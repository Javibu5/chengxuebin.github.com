<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Java 编程规范]]></title>
      <url>/2018/03/26/java-code-style/</url>
      <content type="html"><![CDATA[<p><strong>最常用的两套 java 编程规范</strong></p>
<ul>
<li><a href="https://github.com/alibaba/p3c" target="_blank" rel="noopener">Alibaba Java Coding Guidelines</a></li>
<li><a href="https://github.com/google/google-java-format" target="_blank" rel="noopener">google-java-format</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hibernate 用法]]></title>
      <url>/2018/03/26/hibernate-usage/</url>
      <content type="html"><![CDATA[<h3 id="操作-m-n-关联表"><a href="#操作-m-n-关联表" class="headerlink" title="操作 m-n 关联表"></a>操作 m-n 关联表</h3><ul>
<li><a href="https://stackoverflow.com/questions/5127129/mapping-many-to-many-association-table-with-extra-columns" target="_blank" rel="noopener">定义关联表实体</a></li>
<li><a href="https://www.mkyong.com/hibernate/hibernate-many-to-many-example-join-table-extra-column-annotation/" target="_blank" rel="noopener">Hibernate – Many-to-Many example – join table + extra column (Annotation)</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> hibernate </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Boost Logger 使用]]></title>
      <url>/2017/12/08/boost-logger/</url>
      <content type="html"><![CDATA[<p>未完成</p>
]]></content>
      
        <categories>
            
            <category> c++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vc++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 deployer 自动化部署 laravel]]></title>
      <url>/2017/12/07/deploer-for-laravel-usage/</url>
      <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="phar-包方式"><a href="#phar-包方式" class="headerlink" title="phar 包方式"></a>phar 包方式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -LO https://deployer.org/deployer.phar</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mv deployer.phar /usr/<span class="built_in">local</span>/bin/dep</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod +x /usr/<span class="built_in">local</span>/bin/dep</span></span><br></pre></td></tr></table></figure>
<h3 id="composer-方式"><a href="#composer-方式" class="headerlink" title="composer 方式"></a>composer 方式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> composer require deployer/deployer --dev</span></span><br></pre></td></tr></table></figure>
<p>当以 composer 方式安装时，需要这样运行：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> php vendor/bin/dep</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="简单用法"><a href="#简单用法" class="headerlink" title="简单用法"></a>简单用法</h2><h3 id="1-初始化配置"><a href="#1-初始化配置" class="headerlink" title="1. 初始化配置"></a>1. 初始化配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> dep init</span></span><br></pre></td></tr></table></figure>
<h3 id="2-本地执行任务"><a href="#2-本地执行任务" class="headerlink" title="2. 本地执行任务"></a>2. 本地执行任务</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">task(<span class="string">'build'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;)-&gt;local();</span><br></pre></td></tr></table></figure>
<h3 id="3-任务中调用其它任务"><a href="#3-任务中调用其它任务" class="headerlink" title="3. 任务中调用其它任务"></a>3. 任务中调用其它任务</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">task(<span class="string">'build'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  set(<span class="string">'deploy_path'</span>, <span class="keyword">__DIR__</span> . <span class="string">'/.build'</span>);</span><br><span class="line">  invoke(<span class="string">'deploy:prepare'</span>);</span><br><span class="line">  invoke(<span class="string">'deploy:release'</span>);</span><br><span class="line">  invoke(<span class="string">'deploy:update_code'</span>);</span><br><span class="line">  invoke(<span class="string">'deploy:vendors'</span>);</span><br><span class="line">  invoke(<span class="string">'deploy:symlink'</span>);</span><br><span class="line">&#125;)-&gt;local();</span><br></pre></td></tr></table></figure>
<h2 id="部署-Laravel-项目"><a href="#部署-Laravel-项目" class="headerlink" title="部署 Laravel 项目"></a>部署 Laravel 项目</h2><h3 id="纯服务器方案"><a href="#纯服务器方案" class="headerlink" title="纯服务器方案"></a>纯服务器方案</h3><p>执行 <code>dep init</code> 后，根据提示，选择 laravel 项目，会生成下面的配置文件：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Deployer</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被引用文件保存在 deployer/deployer 项目中</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'recipe/laravel.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 项目名</span></span><br><span class="line">set(<span class="string">'application'</span>, <span class="string">'om'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 项目仓库</span></span><br><span class="line">set(<span class="string">'repository'</span>, <span class="string">'git@code.git'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选：Allocate tty for git clone. Default value is false.</span></span><br><span class="line">set(<span class="string">'git_tty'</span>, <span class="keyword">true</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 多次部署之间共享的文件或目录</span></span><br><span class="line">add(<span class="string">'shared_files'</span>, []);</span><br><span class="line">add(<span class="string">'shared_dirs'</span>, []);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器上需要写权限的目录</span></span><br><span class="line">add(<span class="string">'writable_dirs'</span>, []);</span><br><span class="line">set(<span class="string">'allow_anonymous_stats'</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 部署的域名</span></span><br><span class="line">host(<span class="string">'mystie.com'</span>)-&gt;set(<span class="string">'deploy_path'</span>, <span class="string">'~/&#123;&#123;application&#125;&#125;'</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 定义任务</span></span><br><span class="line">task(<span class="string">'build'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    run(<span class="string">'cd &#123;&#123;release_path&#125;&#125; &amp;&amp; build'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选：部署失败，自动解锁文件</span></span><br><span class="line">after(<span class="string">'deploy:failed'</span>, <span class="string">'deploy:unlock'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在创建软链接前，执行迁移数据库脚本</span></span><br><span class="line">before(<span class="string">'deploy:symlink'</span>, <span class="string">'artisan:migrate'</span>);</span><br></pre></td></tr></table></figure>
<p>执行 <code>dep deploy</code>，使用该配置部署。</p>
<p>部署任务对应的步骤定义在 <code>deployer/deployer</code> 项目的 <code>recipe/laravel.php</code> 中：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Main task</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">desc(<span class="string">'Deploy your project'</span>);</span><br><span class="line">task(<span class="string">'deploy'</span>, [</span><br><span class="line">    <span class="string">'deploy:info'</span>,</span><br><span class="line">    <span class="string">'deploy:prepare'</span>,</span><br><span class="line">    <span class="string">'deploy:lock'</span>,</span><br><span class="line">    <span class="string">'deploy:release'</span>,</span><br><span class="line">    <span class="string">'deploy:update_code'</span>,</span><br><span class="line">    <span class="string">'deploy:shared'</span>,</span><br><span class="line">    <span class="string">'deploy:vendors'</span>,</span><br><span class="line">    <span class="string">'deploy:writable'</span>,</span><br><span class="line">    <span class="string">'artisan:storage:link'</span>,</span><br><span class="line">    <span class="string">'artisan:view:clear'</span>,</span><br><span class="line">    <span class="string">'artisan:cache:clear'</span>,</span><br><span class="line">    <span class="string">'artisan:config:cache'</span>,</span><br><span class="line">    <span class="string">'artisan:optimize'</span>,</span><br><span class="line">    <span class="string">'deploy:symlink'</span>,</span><br><span class="line">    <span class="string">'deploy:unlock'</span>,</span><br><span class="line">    <span class="string">'cleanup'</span>,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">after(<span class="string">'deploy'</span>, <span class="string">'success'</span>);</span><br></pre></td></tr></table></figure>
<p>这些任务都是在登录到远端服务器后执行。</p>
<h3 id="本地-服务器方案"><a href="#本地-服务器方案" class="headerlink" title="本地+服务器方案"></a>本地+服务器方案</h3><p><strong>流程</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+-------------+       +-------------+        +--------------+</span><br><span class="line">|  .dep       |       | compute ver |        |              |</span><br><span class="line">|  releases   +-----&gt; + release     +------&gt; +  git clone   |</span><br><span class="line">|  shared     |       |             |        |              |</span><br><span class="line">+-------------+       +-------------+        +--------------+</span><br><span class="line">                                                     |</span><br><span class="line">                                                     |</span><br><span class="line">                                                     v</span><br><span class="line">+-------------+       +-------------+        +--------------+</span><br><span class="line">|             |       | npm install |        |   composer   |</span><br><span class="line">|   upload    |&lt;------+ npm build   | &lt;------+    vendor    |</span><br><span class="line">|             |       |             |        |              |</span><br><span class="line">+-------------+       +-------------+        +--------------+</span><br></pre></td></tr></table></figure>
<p><strong>部署脚本</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Deployer</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'recipe/laravel.php'</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">'recipe/npm.php'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// 定义部署参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Project name</span></span><br><span class="line">set(<span class="string">'application'</span>, <span class="string">'om'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Project repository</span></span><br><span class="line">set(<span class="string">'repository'</span>, <span class="string">'git@code.cn'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [Optional] Allocate tty for git clone. Default value is false.</span></span><br><span class="line">set(<span class="string">'git_tty'</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">set(<span class="string">'allow_anonymous_stats'</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">set(<span class="string">'current_script_path'</span>, <span class="keyword">__DIR__</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Shared files/dirs between deploys </span></span><br><span class="line">add(<span class="string">'shared_files'</span>, []);</span><br><span class="line"><span class="comment">// 上传资源目录和下载资源目录，更好的方案是统一使用 public/storage</span></span><br><span class="line"><span class="comment">// 详见：https://laravel.com/docs/5.5/filesystem</span></span><br><span class="line">add(<span class="string">'shared_dirs'</span>, [</span><br><span class="line">  <span class="string">'public/download'</span>,</span><br><span class="line">  <span class="string">'public/upload'</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Writable dirs by web server </span></span><br><span class="line">add(<span class="string">'writable_dirs'</span>, [</span><br><span class="line">  <span class="string">'public/download'</span>,</span><br><span class="line">  <span class="string">'public/upload'</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hosts</span></span><br><span class="line">host(<span class="string">'mysite.com'</span>)-&gt;set(<span class="string">'deploy_path'</span>, <span class="string">'~/&#123;&#123;application&#125;&#125;'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// 绑定事件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [Optional] if deploy fails automatically unlock.</span></span><br><span class="line">after(<span class="string">'deploy:failed'</span>, <span class="string">'deploy:unlock'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Migrate database before symlink new release.</span></span><br><span class="line">before(<span class="string">'deploy:symlink'</span>, <span class="string">'artisan:migrate'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// 任务</span></span><br><span class="line"></span><br><span class="line">task(<span class="string">'local:phpunit'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  run(<span class="string">"cd &#123;&#123;local_release_path&#125;&#125; &amp;&amp; phpunit"</span>);</span><br><span class="line">&#125;)-&gt;local();</span><br><span class="line"></span><br><span class="line"><span class="comment">// build npm</span></span><br><span class="line">task(<span class="string">'npm:build'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  run(<span class="string">"cd &#123;&#123;release_path&#125;&#125; &amp;&amp; &#123;&#123;bin/npm&#125;&#125; run production"</span>);</span><br><span class="line">&#125;)-&gt;local();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">task(<span class="string">'npm:copy_install'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  set(<span class="string">'bin/npm'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> run(<span class="string">'which npm'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (test(<span class="string">'[ -d &#123;&#123;current_script_path&#125;&#125;/node_modules ]'</span>)) &#123;</span><br><span class="line">    run(<span class="string">'cp -R &#123;&#123;current_script_path&#125;&#125;/node_modules &#123;&#123;release_path&#125;&#125;'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  run(<span class="string">"cd &#123;&#123;release_path&#125;&#125; &amp;&amp; &#123;&#123;bin/npm&#125;&#125; install"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">task(<span class="string">'copy_deploy:vendors'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (test(<span class="string">'[ -d &#123;&#123;current_script_path&#125;&#125;/vendor ]'</span>)) &#123;</span><br><span class="line">    run(<span class="string">'cp -R &#123;&#123;current_script_path&#125;&#125;/vendor &#123;&#123;release_path&#125;&#125;'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  run(<span class="string">'cd &#123;&#123;release_path&#125;&#125; &amp;&amp; &#123;&#123;bin/composer&#125;&#125; &#123;&#123;composer_options&#125;&#125;'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本地编译</span></span><br><span class="line">task(<span class="string">'build:local'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  set(<span class="string">'deploy_path'</span>, <span class="keyword">__DIR__</span> . <span class="string">'/.build'</span>);</span><br><span class="line">  invoke(<span class="string">'deploy:prepare'</span>);     <span class="comment">// create releases and shared dirs locally</span></span><br><span class="line">  invoke(<span class="string">'deploy:release'</span>);     <span class="comment">// release number locally</span></span><br><span class="line">  invoke(<span class="string">'deploy:update_code'</span>); <span class="comment">// git clone locally</span></span><br><span class="line">  invoke(<span class="string">'copy_deploy:vendors'</span>);<span class="comment">// composer install locally</span></span><br><span class="line">  invoke(<span class="string">'npm:copy_install'</span>);   <span class="comment">// npm install locally</span></span><br><span class="line">  invoke(<span class="string">'npm:build'</span>);          <span class="comment">// npm install locally</span></span><br><span class="line">  invoke(<span class="string">'local:phpunit'</span>);      <span class="comment">// phpunit tests locally</span></span><br><span class="line">  invoke(<span class="string">'deploy:symlink'</span>);     <span class="comment">// symlink /current locally</span></span><br><span class="line">&#125;)-&gt;local();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// local -&gt; server</span></span><br><span class="line">task(<span class="string">'upload'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  upload(<span class="keyword">__DIR__</span> . <span class="string">"/.build/current/"</span>, <span class="string">'&#123;&#123;release_path&#125;&#125;'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 部署流程</span></span><br><span class="line">task(<span class="string">'deploy'</span>, [</span><br><span class="line">  <span class="string">'deploy:info'</span>,</span><br><span class="line">  <span class="string">'build:local'</span>,</span><br><span class="line">  <span class="string">'deploy:prepare'</span>,</span><br><span class="line">  <span class="string">'deploy:lock'</span>,</span><br><span class="line">  <span class="string">'deploy:release'</span>,</span><br><span class="line">  <span class="string">'upload'</span>,</span><br><span class="line">  <span class="string">'deploy:shared'</span>,          <span class="comment">// shared and .env linking on server</span></span><br><span class="line">  <span class="string">'deploy:writable'</span>,        <span class="comment">// ensure shared paths are writable on server</span></span><br><span class="line">  <span class="string">'artisan:storage:link'</span>,   <span class="comment">// execute artisan storage:link</span></span><br><span class="line">  <span class="string">'artisan:view:clear'</span>,</span><br><span class="line">  <span class="string">'artisan:cache:clear'</span>,</span><br><span class="line">  <span class="string">'artisan:config:cache'</span>,</span><br><span class="line">  <span class="string">'artisan:optimize'</span>,</span><br><span class="line">  <span class="string">'deploy:symlink'</span>,</span><br><span class="line">  <span class="string">'deploy:unlock'</span>,</span><br><span class="line">  <span class="string">'cleanup'</span>,</span><br><span class="line">  <span class="string">'success'</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<h2 id="更多“配方”"><a href="#更多“配方”" class="headerlink" title="更多“配方”"></a>更多“配方”</h2><p>上面光定义了 laravel 一种部署方案，更多部署方案请参考：</p>
<ul>
<li><a href="https://deployer.org/recipes" target="_blank" rel="noopener">deployer 官方</a></li>
<li><a href="https://github.com/deployphp/recipes" target="_blank" rel="noopener">deployer github</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> laravel </tag>
            
            <tag> deployer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows 钩子]]></title>
      <url>/2017/12/07/windows-hooks/</url>
      <content type="html"><![CDATA[<p>未完成</p>
]]></content>
      
        <categories>
            
            <category> c++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vc++ </tag>
            
            <tag> Windows </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[玩转 WebBrowser]]></title>
      <url>/2017/12/06/play-with-webbrowser/</url>
      <content type="html"><![CDATA[<p>未完成</p>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h2 id="通过注册表设置特性"><a href="#通过注册表设置特性" class="headerlink" title="通过注册表设置特性"></a>通过注册表设置特性</h2>]]></content>
      
        <categories>
            
            <category> c++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> windows </tag>
            
            <tag> WebBrowser </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 Flyway]]></title>
      <url>/2017/12/05/setup-flyway/</url>
      <content type="html"><![CDATA[<p><a href="https://flywaydb.org/" target="_blank" rel="noopener">Flyway</a> 是一款简单好用的数据库迁移工具。优点是简洁、易上手，功能满足常规开发、维护，并提供了命令行工具。</p>
<h3 id="安装命令行工具"><a href="#安装命令行工具" class="headerlink" title="安装命令行工具"></a>安装命令行工具</h3><p>通过 <code>homebrew</code> 安装非常方便：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew install flyway</span></span><br></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><img src="https://flywaydb.org/assets/balsamiq/CommandLineDirectoryStructure.png" alt=""></p>
<p>默认安装的配置文件保存在：<code>/usr/local/Cellar/flyway/4.2.0/libexec/conf/flyway.conf</code>，其中包含非常详细的注释。</p>
<p>由于需要在多个项目中使用 flyway，每个项目的配置又不完全相同，所以修改默认配置不是我需要的方案。于是，我在每个项目中分别保存一份配置文件，执行时加载各自的配置。</p>
<p><strong>项目配置文件</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file: flyway.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库连接</span></span><br><span class="line">flyway.url=jdbc:mysql://localhost:3306/database</span><br><span class="line">flyway.user=user</span><br><span class="line">flyway.password=password</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迁移脚本的路径，对应：项目根目录/sql</span></span><br><span class="line">flyway.locations=filesystem:sql</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="迁移脚本"><a href="#迁移脚本" class="headerlink" title="迁移脚本"></a>迁移脚本</h3><p>关于脚本的几个重要点：</p>
<ul>
<li>脚本可以用 java 或 sql 写</li>
<li>每个文件以版本号开头: <code>V1__</code></li>
<li>迁移时按照版本号顺序执行</li>
</ul>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h4 id="1-迁移"><a href="#1-迁移" class="headerlink" title="1. 迁移"></a>1. 迁移</h4><p><img src="https://flywaydb.org/assets/balsamiq/command-migrate.png" alt=""></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> flyway -configFile=./flyway.conf migrate</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[家庭电路常识]]></title>
      <url>/2017/12/01/circuit/</url>
      <content type="html"><![CDATA[<h2 id="常见名词"><a href="#常见名词" class="headerlink" title="常见名词"></a>常见名词</h2><p><strong>Neutral Wire</strong></p>
<p>中性线，也叫零线，一般为蓝色或黄色。用字母 <code>N</code> 表示。</p>
<p><strong>Live Wire</strong></p>
<p>相线，也叫火线，是不是更应该翻译成“活”线，一般为红色或黄色或绿色，一种颜色代表三相电中的一相。用字母 <code>L</code> 表示。</p>
<p><strong>Earch Wire</strong></p>
<p>地线，一般为黄绿色或黑色。 用字母 <code>E</code> 表示。</p>
<p><strong>System Earthing</strong></p>
<p>工作接地。</p>
<p><strong>Protective Earthing</strong></p>
<p>保护接地。用字母 <code>PE</code> 表示。</p>
<p><strong>空气开关</strong></p>
<p>简称空开，是当电路中电流大于额定值就跳闸，从而保护电路不被烧毁的开关装置，功能类似过去老房子用的保险丝。</p>
<p>空开按极数（P）分1P 2P 3P 4P四种，家庭常用就是单极1P和二极2P，适用于额定电压220V，1P空开只有一个接线头，接一根火线，跳闸只断这根火线；2P空开有两个接线头，接一根火线和一根零线，跳闸后火线和零线一起断。</p>
<p><img src="https://pic3.zhimg.com/v2-1921b7b12e0918dcd696225b2a5b7b32_r.jpg" alt=""></p>
<a id="more"></a>
<p><strong>漏电保护器</strong></p>
<p>漏电保护器简称漏保，和空开一样是断路器，但是比空开多了一个有漏电保护功能的模块，不仅电流过大会跳闸，漏电也会跳闸。</p>
<p><img src="https://pic4.zhimg.com/50/v2-244d2c987b715e31be36d0f205987cb7_hd.jpg" alt=""></p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><strong>连接方式</strong></p>
<p>正规接线方式是：左零右火上地</p>
<h2 id="张教授专栏"><a href="#张教授专栏" class="headerlink" title="张教授专栏"></a>张教授专栏</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/23124736" target="_blank" rel="noopener">浅谈接地1——有关工作接地和保护接地</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23135979" target="_blank" rel="noopener">浅谈接地2——线制与TN接地系统</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23142501" target="_blank" rel="noopener">浅谈接地3——TN系统下单相接地故障范例</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23147201" target="_blank" rel="noopener">浅谈接地4——TT和IT接地系统</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23159113" target="_blank" rel="noopener">浅谈接地5——居家配电的接地问题</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23179524" target="_blank" rel="noopener">浅谈接地6——线制问题</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23212631" target="_blank" rel="noopener">浅谈接地7——与接地系统有关的故障分析</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23298018" target="_blank" rel="noopener">浅谈接地8——避雷与接地之1</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23298202" target="_blank" rel="noopener">浅谈接地9——避雷与接地之2</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23381353" target="_blank" rel="noopener">浅谈接地10——电子设备的接地与电控设备的接地异同点</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23498492" target="_blank" rel="noopener">浅谈接地11——对于单相接地故障，断路器如何测量和保护？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23481447" target="_blank" rel="noopener">浅谈接地12——什么叫做等电位联结？</a></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/30812914" target="_blank" rel="noopener">装修用的空气开关、漏电保护器和配电箱，你都知道怎么买吗？</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringMVC 静态资源缓存]]></title>
      <url>/2017/10/13/spring-mvc-static-resource/</url>
      <content type="html"><![CDATA[<h2 id="ResourceHttpRequestHandler"><a href="#ResourceHttpRequestHandler" class="headerlink" title="ResourceHttpRequestHandler"></a>ResourceHttpRequestHandler</h2><p><code>ResourceHttpRequestHandler</code> 可以使用 <code>ResourceResolvers</code> 和 <code>ResourceTransformers</code> 来优化处理静态资源。处理过程如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Request for Resource</span><br><span class="line">     |</span><br><span class="line">     | HTTP request</span><br><span class="line">     v</span><br><span class="line"> Resolvers chain: FirstResolver, SecondResolver, ThirdResolver</span><br><span class="line"> (each resolver can return the resource or delegate to the next one)</span><br><span class="line">     |</span><br><span class="line">     | Resolved Resource</span><br><span class="line">     v</span><br><span class="line"> Transformers chain: FirstTransformer, SecondTransformer</span><br><span class="line"> (each transformer can transform the resource or just pass it along without modification)</span><br><span class="line">     |</span><br><span class="line">     | Transformed Resource</span><br><span class="line">     v</span><br><span class="line"> HTTP Response with Resource content</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="ResourceHttpRequestHandler-的配置"><a href="#ResourceHttpRequestHandler-的配置" class="headerlink" title="ResourceHttpRequestHandler 的配置"></a><code>ResourceHttpRequestHandler</code> 的配置</h3><p>配置方法一：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addResourceHandler(<span class="string">"/resources/**"</span>)</span><br><span class="line">            .addResourceLocations(<span class="string">"/public-resources/"</span>)</span><br><span class="line">            .setCacheControl(CacheControl.maxAge(<span class="number">1</span>, TimeUnit.HOURS).cachePublic());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置方法二：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/resources/**"</span> <span class="attr">location</span>=<span class="string">"/public-resources/"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:cache-control</span> <span class="attr">max-age</span>=<span class="string">"3600"</span> <span class="attr">cache-public</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="ResourceResolvers"><a href="#ResourceResolvers" class="headerlink" title="ResourceResolvers"></a>ResourceResolvers</h2><p>用于解析资源，将外面请求的 public 路径解析为内部的资源路径。</p>
<h3 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Resource link in a template source file</span><br><span class="line">|</span><br><span class="line">| Resource path (like “/css/main.css”)</span><br><span class="line">v</span><br><span class="line">Resolvers chain: FirstResolver, SecondResolver, ThirdResolver</span><br><span class="line">(each resolver can modify the resource path or delegate to the next one)</span><br><span class="line">|</span><br><span class="line">| Updated resource path (like “/css/main-0e37f12.css”)</span><br><span class="line">v</span><br><span class="line">Resource link in a rendered template</span><br></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/resources/**"</span> <span class="attr">location</span>=<span class="string">"/public/"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:resource-chain</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resource-cache</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resolvers</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mvc:version-resolver</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:content-version-strategy</span> <span class="attr">patterns</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">mvc:version-resolver</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:resolvers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mvc:resource-chain</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><table>
<thead>
<tr>
<th style="text-align:center">实现类</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">PathResourceResolver</td>
<td style="text-align:left">finds resources under configured locations (classpath, file system…) matching to the request path</td>
</tr>
<tr>
<td style="text-align:center">CachingResourceResolver</td>
<td style="text-align:left">resolves resources from a Cache instance or delegates to the next Resolver in the chain</td>
</tr>
<tr>
<td style="text-align:center">GzipResourceResolver</td>
<td style="text-align:left">finds variations of a resource with a “.gz” extension when HTTP clients support gzip compression</td>
</tr>
<tr>
<td style="text-align:center">VersionResourceResolver</td>
<td style="text-align:left">resolves request paths containing a version string, i.e. version information about the resource being requested. This resolver can be useful to set up HTTP caching strategies by changing resources’ URLs as they are updated.</td>
</tr>
</tbody>
</table>
<h2 id="ResourceTransformers"><a href="#ResourceTransformers" class="headerlink" title="ResourceTransformers"></a>ResourceTransformers</h2><p>用于修改资源内容。</p>
<h3 id="实现类-1"><a href="#实现类-1" class="headerlink" title="实现类"></a>实现类</h3><table>
<thead>
<tr>
<th style="text-align:center">实现类</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CssLinkResourceTransformer</td>
<td style="text-align:left">modifies links in a CSS file to match the public URL paths that should be exposed to clients</td>
</tr>
<tr>
<td style="text-align:center">CachingResourceTransformer</td>
<td style="text-align:left">caches the result of transformations in a Cache or delegates to the next Transformer in the chain</td>
</tr>
<tr>
<td style="text-align:center">AppCacheManifestTransfomer</td>
<td style="text-align:left">helps handling resources within HTML5 AppCache manifests for HTML5 offline applications</td>
</tr>
</tbody>
</table>
<h2 id="静态资源添加-Hash"><a href="#静态资源添加-Hash" class="headerlink" title="静态资源添加 Hash"></a>静态资源添加 Hash</h2><h3 id="1-添加-filter"><a href="#1-添加-filter" class="headerlink" title="1 添加 filter"></a>1 添加 <code>filter</code></h3><p>修改 <code>web.xml</code>:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 静态资源 URL 添加 Hash --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>resourceUrlEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.servlet.resource.ResourceUrlEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Ensure that you map it to the DispatcherServlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>resourceUrlEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>webServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;url-pattern&gt;/*&lt;/url-pattern&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-添加-resolver"><a href="#2-添加-resolver" class="headerlink" title="2 添加 resolver"></a>2 添加 <code>resolver</code></h3><p>修改 SpringMVC 的配置文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/static/**"</span> <span class="attr">location</span>=<span class="string">"/static/"</span> <span class="attr">cache-period</span>=<span class="string">"31536000"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:resource-chain</span> <span class="attr">resource-cache</span>=<span class="string">"true"</span> <span class="attr">auto-registration</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resolvers</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mvc:version-resolver</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:content-version-strategy</span> <span class="attr">patterns</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;mvc:fixed-version-strategy version="1.1.1" patterns="/**"/&gt; --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">mvc:version-resolver</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:resolvers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mvc:resource-chain</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-修改-view"><a href="#3-修改-view" class="headerlink" title="3 修改 view"></a>3 修改 <code>view</code></h3><p>修改相应的 <code>JSP</code>：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- css --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"&lt;c:url value="</span>/<span class="attr">static</span>/<span class="attr">vendors</span>/<span class="attr">bootstrap</span>/<span class="attr">css</span>/<span class="attr">bootstrap.min.css</span>"/&gt;</span>"&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- javascript --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&lt;c:url value="</span>/<span class="attr">static</span>/<span class="attr">vendors</span>/<span class="attr">bootstrap</span>/<span class="attr">js</span>/<span class="attr">bootstrap.min.js</span>"/&gt;</span><span class="undefined">"&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://spring.io/blog/2014/07/24/spring-framework-4-1-handling-static-web-resources" target="_blank" rel="noopener">handling static web resources</a></li>
<li><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">Spring Web MVC</a></li>
<li><a href="http://www.baeldung.com/cachable-static-assets-with-spring-mvc" target="_blank" rel="noopener">Cachable Static Assets with Spring MVC</a></li>
<li><a href="http://sunitkatkar.blogspot.com/2016/04/preventing-caching-of-static-resources.html" target="_blank" rel="noopener">Preventing caching of static resources in Spring MVC legacy projects using XML config</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[新接触 Webpack]]></title>
      <url>/2017/09/25/webpack/</url>
      <content type="html"><![CDATA[<h4 id="Error-Couldn’t-find-preset-“es2015”-relative-to-directory-“-Users-username”"><a href="#Error-Couldn’t-find-preset-“es2015”-relative-to-directory-“-Users-username”" class="headerlink" title="Error: Couldn’t find preset “es2015” relative to directory “/Users/username”"></a>Error: Couldn’t find preset “es2015” relative to directory “/Users/username”</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-cli babel-preset-es2015</span><br></pre></td></tr></table></figure>
<a id="more"></a>]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[指定 IntelliJ 使用的 server.xml]]></title>
      <url>/2017/08/17/intellij-config-server-xml/</url>
      <content type="html"><![CDATA[<h3 id="打开-IntelliJ-的配置"><a href="#打开-IntelliJ-的配置" class="headerlink" title="打开 IntelliJ 的配置"></a>打开 IntelliJ 的配置</h3><p>进入 <code>Startup/Connection</code> 标签页</p>
<p><img src="/images/posts/intellij_config/config-1.png" alt=""></p>
<h3 id="编辑-Startup-Script"><a href="#编辑-Startup-Script" class="headerlink" title="编辑 Startup Script"></a>编辑 <code>Startup Script</code></h3><p>取消选择 <code>Use Default</code>，点击编辑按钮，进入参数编辑窗口</p>
<p><img src="/images/posts/intellij_config/config-2.png" alt=""></p>
<h3 id="添加-Program-Arguments"><a href="#添加-Program-Arguments" class="headerlink" title="添加 Program Arguments"></a>添加 <code>Program Arguments</code></h3><p>在 <code>run</code> 后添加配置文件的地址：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run -config /usr/local/apache-tomcat-8.0.26/conf/server.xml</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="添加-VM-Options"><a href="#添加-VM-Options" class="headerlink" title="添加 VM Options"></a>添加 <code>VM Options</code></h3><p>在 <code>VM Options</code> 后添加配置文件的地址：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-Dcom.sun.management.jmxremote.port=1099</span><br><span class="line">-Dcom.sun.management.jmxremote=</span><br><span class="line">-Dcom.sun.management.jmxremote.ssl=false</span><br><span class="line">-Dcom.sun.management.jmxremote.authenticate=false</span><br><span class="line">-Djava.rmi.server.hostname=127.0.0.1</span><br></pre></td></tr></table></figure>
<p><img src="/images/posts/intellij_config/config-3.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[编译 NW.js]]></title>
      <url>/2017/06/22/build-nwjs/</url>
      <content type="html"><![CDATA[<p>本文讨论的是 NW.js 13.x 在 Windows 操作系统的编译过程。使用这一版，主要因为其支持 <code>xp</code> 和 <code>npapi</code>。</p>
<p>NW.js 13.x 的文档在 <a href="http://docs.nwjs.io/en/v0.13.0-beta7/For%20Developers/Building%20NW.js/" target="_blank" rel="noopener">v0.13.0-beta7</a>，在<a href="https://github.com/nwjs/nw.js/tree/nw13/docs" target="_blank" rel="noopener">这里</a>下载</p>
<p>NW.js 本身是一个浏览器的应用（Packaged App），它的实现思路是在每一个 <code>Chromium</code> 稳定发布版的基础上，打上补丁，以支持 <code>Node.js</code> 等功能。下面是 NW.js 打补丁的几个仓库：</p>
<table>
<thead>
<tr>
<th style="text-align:left">path</th>
<th style="text-align:left">repo</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">src/content/nw</td>
<td style="text-align:left"><a href="https://github.com/nwjs/nw.js" target="_blank" rel="noopener">https://github.com/nwjs/nw.js</a></td>
</tr>
<tr>
<td style="text-align:left">src/third_party/node-nw</td>
<td style="text-align:left"><a href="https://github.com/nwjs/node" target="_blank" rel="noopener">https://github.com/nwjs/node</a></td>
</tr>
<tr>
<td style="text-align:left">src/v8</td>
<td style="text-align:left"><a href="https://github.com/nwjs/v8" target="_blank" rel="noopener">https://github.com/nwjs/v8</a></td>
</tr>
</tbody>
</table>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>安装 <code>depot_tools</code></li>
<li>安装 <code>DirectX SDK</code></li>
</ul>
<h2 id="下载代码"><a href="#下载代码" class="headerlink" title="下载代码"></a>下载代码</h2><h4 id="1-创建配置文件"><a href="#1-创建配置文件" class="headerlink" title="1. 创建配置文件"></a>1. 创建配置文件</h4><p>创建一个目录，然后执行下面语句，生成配置文件：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gclient config --name=src https://github.com/nwjs/chromium.src.git@origin/nw13</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>执行完毕后，会在目录里生成 <code>.gclient</code> 文件，编辑该文件，在 <code>custom_deps</code> 部分添加 <strong>不下载</strong> 的库，这是一些测试代码，体积还是挺大的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"custom_deps"</span> : &#123;</span><br><span class="line">    <span class="string">"src/third_party/WebKit/LayoutTests"</span>: None,</span><br><span class="line">    <span class="string">"src/chrome_frame/tools/test/reference_build/chrome"</span>: None,</span><br><span class="line">    <span class="string">"src/chrome_frame/tools/test/reference_build/chrome_win"</span>: None,</span><br><span class="line">    <span class="string">"src/chrome/tools/test/reference_build/chrome"</span>: None,</span><br><span class="line">    <span class="string">"src/chrome/tools/test/reference_build/chrome_linux"</span>: None,</span><br><span class="line">    <span class="string">"src/chrome/tools/test/reference_build/chrome_mac"</span>: None,</span><br><span class="line">    <span class="string">"src/chrome/tools/test/reference_build/chrome_win"</span>: None,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-下载代码"><a href="#2-下载代码" class="headerlink" title="2. 下载代码"></a>2. 下载代码</h4><p>在命令行窗口中执行</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gclient sync --with_branch_heads</span><br></pre></td></tr></table></figure>
<p><code>with_branch_heads</code> 表示下载全部分支记录，默认只下载最新的分支记录，由于我们想切换到特定版本 <code>nw13</code>， 所以需要下载分支记录。</p>
<h4 id="3-复制依赖库"><a href="#3-复制依赖库" class="headerlink" title="3. 复制依赖库"></a>3. 复制依赖库</h4><p>本版本需要手动复制 <code>DirectX SDK</code>，执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $HOME/nwjs/src/third_party/directxsdk/files</span><br><span class="line">cp -r /c/Program\ Files\ \(x86\)/Microsoft\ DirectX\ SDK\ \(June\ 2010\)/* \</span><br><span class="line"><span class="meta">$</span><span class="bash">HOME/nwjs/src/third_party/directxsdk/files/</span></span><br></pre></td></tr></table></figure>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>其实，在执行 <code>gclient sync</code> 的最后，会自动执行 <code>runhooks</code>，生成编译配置文件，保存在 <code>out</code> 目录。</p>
<p>为了配置参数方便，可以将生成项目的命令写成批处理，像下面这样：</p>
<h4 id="生成-release-配置"><a href="#生成-release-配置" class="headerlink" title="生成 release 配置"></a>生成 release 配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line"></span><br><span class="line">set DEPOT_TOOLS_WIN_TOOLCHAIN=0</span><br><span class="line">set GYP_DEFINES=clang=0 nwjs_sdk=1 disable_nacl=0 buildtype=Official component=static_library</span><br><span class="line">set GYP_MSVS_VERSION=2015</span><br><span class="line">set GYP_GENERATORS=msvs-ninja,ninja</span><br><span class="line"></span><br><span class="line">gclient runhooks --force</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure>
<h4 id="生成-debug-配置"><a href="#生成-debug-配置" class="headerlink" title="生成 debug 配置"></a>生成 debug 配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line"></span><br><span class="line">set DEPOT_TOOLS_WIN_TOOLCHAIN=0</span><br><span class="line">set GYP_DEFINES=clang=0 nwjs_sdk=true enable_nacl=true component=shared_library</span><br><span class="line">set GYP_MSVS_VERSION=2015</span><br><span class="line">set GYP_GENERATORS=msvs-ninja,ninja</span><br><span class="line"></span><br><span class="line">gclient runhooks --force</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure>
<h4 id="GYP-DEFINES-参数"><a href="#GYP-DEFINES-参数" class="headerlink" title="GYP_DEFINES 参数"></a>GYP_DEFINES 参数</h4><table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">clang</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">nwjs_sdk</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">enable_nacl</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">disable_nacl</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">target_arch</td>
<td style="text-align:left">x64</td>
</tr>
<tr>
<td style="text-align:center">disable_nacl</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">component</td>
<td style="text-align:left">shared_library，static_library</td>
</tr>
</tbody>
</table>
<h4 id="编译-release-版本"><a href="#编译-release-版本" class="headerlink" title="编译 release 版本"></a>编译 release 版本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line"></span><br><span class="line">ninja -C src\out\Release nwjs</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure>
<h4 id="编译-debug-版本"><a href="#编译-debug-版本" class="headerlink" title="编译 debug 版本"></a>编译 debug 版本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line"></span><br><span class="line">ninja -C src\out\Debug nwjs</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> nwjs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nwjs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[配置 Fiddler 和 WireShark 解密 HTTPS 流量]]></title>
      <url>/2017/06/11/decrypt-https-tools/</url>
      <content type="html"><![CDATA[<p>首先，推荐一篇非常好的文章：<a href="https://imququ.com/post/how-to-decrypt-https.html" target="_blank" rel="noopener">三种解密 HTTPS 流量的方法介绍</a>。下面记录一下这次使用和配置的步骤：</p>
<h2 id="配置-Fiddler"><a href="#配置-Fiddler" class="headerlink" title="配置 Fiddler"></a>配置 Fiddler</h2><h4 id="1-打开-HTTPS-设置"><a href="#1-打开-HTTPS-设置" class="headerlink" title="1. 打开 HTTPS 设置"></a>1. 打开 HTTPS 设置</h4><p>打开菜单： <code>Tools</code> - <code>Telerik Fiddler Options...</code> - <code>Https</code></p>
<p><img src="/images/posts/decrypt_https/fiddler_https.png" alt=""></p>
<h4 id="2-导入根证书"><a href="#2-导入根证书" class="headerlink" title="2. 导入根证书"></a>2. 导入根证书</h4><p>在 <code>Https</code> 设置标签页，打开右上角菜单 <code>Actions</code> - <code>Trust Root Certificate</code></p>
<p><img src="/images/posts/decrypt_https/fiddler_ca.png" alt=""></p>
<h4 id="3-同意系统警告"><a href="#3-同意系统警告" class="headerlink" title="3. 同意系统警告"></a>3. 同意系统警告</h4><p><img src="/images/posts/decrypt_https/fiddler_ca2.png" alt=""></p>
<a id="more"></a>
<h2 id="配置-WireShark-一：配合程序日志"><a href="#配置-WireShark-一：配合程序日志" class="headerlink" title="配置 WireShark 一：配合程序日志"></a>配置 WireShark 一：配合程序日志</h2><h4 id="1-设置环境变量"><a href="#1-设置环境变量" class="headerlink" title="1. 设置环境变量"></a>1. 设置环境变量</h4><p>添加系统环境变量 <code>SSLKEYLOGFILE</code></p>
<p><img src="/images/posts/decrypt_https/wireshark_log.jpg" alt=""></p>
<h4 id="2-配置-WireShark"><a href="#2-配置-WireShark" class="headerlink" title="2. 配置 WireShark"></a>2. 配置 WireShark</h4><p>打开菜单 <code>Edit</code> - <code>Preference...</code> - <code>Protocols</code> - <code>SSL</code></p>
<p><img src="/images/posts/decrypt_https/wireshark_ssl.jpg" alt=""></p>
<p>在 <code>(Pre)-Master-Secret log filename</code> 一栏，配置上一步产生的日志文件</p>
<h2 id="配置-WireShark-二：配合网站私钥"><a href="#配置-WireShark-二：配合网站私钥" class="headerlink" title="配置 WireShark 二：配合网站私钥"></a>配置 WireShark 二：配合网站私钥</h2><p>私钥的方式需要配合使用网站的证书私钥，这对通常是做不到的，所以仅能用于监测自己搭建的 TLS 网站。</p>
<h4 id="1-配置-WireShark"><a href="#1-配置-WireShark" class="headerlink" title="1. 配置 WireShark"></a>1. 配置 WireShark</h4><p>打开菜单 <code>Edit</code> - <code>Preference...</code> - <code>Protocols</code> - <code>SSL</code></p>
<p><img src="/images/posts/decrypt_https/wireshark_ssl.jpg" alt=""></p>
<h4 id="2-配置域名和私钥"><a href="#2-配置域名和私钥" class="headerlink" title="2. 配置域名和私钥"></a>2. 配置域名和私钥</h4><p>打开 <code>RSA keys list</code> 配置窗口</p>
<blockquote>
<p>为什么是 <code>RSA keys</code> 配置呢？<br>私钥方式只能用于解析采用 <code>RSA</code> 的 TLS 连接。</p>
</blockquote>
<p><img src="/images/posts/decrypt_https/wireshark_key.jpg" alt=""></p>
<ul>
<li>IP Address： 连接的域名或 IP 地址</li>
<li>Port： 连接的端口号</li>
<li>Protocol： 连接的协议，TLS 要写成 http</li>
<li>Key File： 服务器证书的私钥，要求 PEM 格式</li>
<li>Password： 私钥密码</li>
</ul>
]]></content>
      
        <categories>
            
            <category> OpenSSL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> openssl </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TLS 协议]]></title>
      <url>/2017/06/10/tls-1.2/</url>
      <content type="html"><![CDATA[<p>首先，这是 IETF 协会文档 <a href="https://tools.ietf.org/html/rfc5246" target="_blank" rel="noopener">Request for Comments (RFC) 5246</a></p>
<h3 id="Alert-Messages"><a href="#Alert-Messages" class="headerlink" title="Alert Messages"></a><a href="https://tools.ietf.org/html/rfc5246#appendix-A.3" target="_blank" rel="noopener">Alert Messages</a></h3><p>在 TLS 协商握手阶段，遇到服务器返回的 Alert 消息时，能通过下表查找出对应的原因。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Alert Code</th>
<th style="text-align:center">Alert Message</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">close_notify</td>
<td style="text-align:left">Notifies the recipient that the sender will not send any more messages on this connection.</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">unexpected_message</td>
<td style="text-align:left">Received an inappropriate message This alert should never be observed in communication between proper implementations. This message is always fatal.</td>
</tr>
<tr>
<td style="text-align:center">20</td>
<td style="text-align:center">bad_record_mac</td>
<td style="text-align:left">Received a record with an incorrect MAC. This message is always fatal.</td>
</tr>
<tr>
<td style="text-align:center">21</td>
<td style="text-align:center">decryption_failed</td>
<td style="text-align:left">Decryption of a TLSCiphertext record is decrypted in an invalid way: either it was not an even multiple of the block length or its padding values, when checked, were not correct. This message is always fatal.</td>
</tr>
<tr>
<td style="text-align:center">22</td>
<td style="text-align:center">record_overflow</td>
<td style="text-align:left">Received a TLSCiphertext record which had a length more than 2^14+2048 bytes, or a record decrypted to a TLSCompressed record with more than 2^14+1024 bytes. This message is always fatal.</td>
</tr>
<tr>
<td style="text-align:center">30</td>
<td style="text-align:center">decompression_failure</td>
<td style="text-align:left">Received improper input, such as data that would expand to excessive length, from the decompression function. This message is always fatal.</td>
</tr>
<tr>
<td style="text-align:center">40</td>
<td style="text-align:center">handshake_failure</td>
<td style="text-align:left">Indicates that the sender was unable to negotiate an acceptable set of security parameters given the options available. This is a fatal error.</td>
</tr>
<tr>
<td style="text-align:center">42</td>
<td style="text-align:center">bad_certificate</td>
<td style="text-align:left">There is a problem with the certificate, for example, a certificate is corrupt, or a certificate contains signatures that cannot be verified.</td>
</tr>
<tr>
<td style="text-align:center">43</td>
<td style="text-align:center">unsupported_certificate</td>
<td style="text-align:left">Received an unsupported certificate type.</td>
</tr>
<tr>
<td style="text-align:center">44</td>
<td style="text-align:center">certificate_revoked</td>
<td style="text-align:left">Received a certificate that was revoked by its signer.</td>
</tr>
<tr>
<td style="text-align:center">45</td>
<td style="text-align:center">certificate_expired</td>
<td style="text-align:left">Received a certificate has expired or is not currently valid.</td>
</tr>
<tr>
<td style="text-align:center">46</td>
<td style="text-align:center">certificate_unknown</td>
<td style="text-align:left">An unspecified issue took place while processing the certificate that made it unacceptable.</td>
</tr>
<tr>
<td style="text-align:center">47</td>
<td style="text-align:center">illegal_parameter</td>
<td style="text-align:left">Violated security parameters, such as a field in the handshake was out of range or inconsistent with other fields. This is always fatal.</td>
</tr>
<tr>
<td style="text-align:center">48</td>
<td style="text-align:center">unknown_ca</td>
<td style="text-align:left">Received a valid certificate chain or partial chain, but the certificate was not accepted because the CA certificate could not be located or could not be matched with a known, trusted CA. This message is always fatal.</td>
</tr>
<tr>
<td style="text-align:center">49</td>
<td style="text-align:center">access_denied</td>
<td style="text-align:left">Received a valid certificate, but when access control was applied, the sender did not proceed with negotiation. This message is always fatal.</td>
</tr>
<tr>
<td style="text-align:center">50</td>
<td style="text-align:center">decode_error</td>
<td style="text-align:left">A message could not be decoded because some field was out of the specified range or the length of the message was incorrect. This message is always fatal.</td>
</tr>
<tr>
<td style="text-align:center">51</td>
<td style="text-align:center">decrypt_error</td>
<td style="text-align:left">Failed handshake cryptographic operation, including being unable to correctly verify a signature, decrypt a key exchange, or validate a finished message.</td>
</tr>
<tr>
<td style="text-align:center">60</td>
<td style="text-align:center">export_restriction</td>
<td style="text-align:left">Detected a negotiation that was not in compliance with export restrictions; for example, attempting to transfer a 1024 bit ephemeral RSA key for the RSA_EXPORT handshake method. This message is always fatal.</td>
</tr>
<tr>
<td style="text-align:center">70</td>
<td style="text-align:center">protocol_version</td>
<td style="text-align:left">The protocol version the client attempted to negotiate is recognized, but not supported. For example, old protocol versions might be avoided for security reasons. This message is always fatal.</td>
</tr>
<tr>
<td style="text-align:center">71</td>
<td style="text-align:center">insufficient_security</td>
<td style="text-align:left">Failed negotiation specifically because the server requires ciphers more secure than those supported by the client. Returned instead of handshake_failure. This message is always fatal.</td>
</tr>
<tr>
<td style="text-align:center">80</td>
<td style="text-align:center">internal_error</td>
<td style="text-align:left">An internal error unrelated to the peer or the correctness of the protocol makes it impossible to continue, such as a memory allocation failure. The error is not related to protocol. This message is always fatal.</td>
</tr>
<tr>
<td style="text-align:center">90</td>
<td style="text-align:center">user_cancelled</td>
<td style="text-align:left">Cancelled handshake for a reason that is unrelated to a protocol failure. If the user cancels an operation after the handshake is complete, just closing the connection by sending a close_notify is more appropriate. This alert should be followed by a close_notify. This message is generally a warning.</td>
</tr>
<tr>
<td style="text-align:center">100</td>
<td style="text-align:center">no_renegotiation</td>
<td style="text-align:left">Sent by the client in response to a hello request or sent by the server in response to a client hello after initial handshaking. Either of these would normally lead to renegotiation; when that is not appropriate, the recipient should respond with this alert; at that point, the original requester can decide whether to proceed with the connection. One case where this would be appropriate would be where a server has spawned a process to satisfy a request; the process might receive security parameters (key length, authentication, and so on) at start-up and it might be difficult to communicate changes to these parameters after that point. This message is always a warning.</td>
</tr>
<tr>
<td style="text-align:center">255</td>
<td style="text-align:center">unsupported_extension</td>
</tr>
</tbody>
</table>
<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> OpenSSL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> openssl </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[中间人劫持代理]]></title>
      <url>/2017/06/10/mitm-proxy/</url>
      <content type="html"><![CDATA[<h2 id="中间人劫持代理"><a href="#中间人劫持代理" class="headerlink" title="中间人劫持代理"></a>中间人劫持代理</h2><p><img src="/images/posts/mitm_proxy/how-mitmproxy-works-explicit-https.png" alt=""></p>
<p>注：图片来源于 mitmproxy</p>
<h4 id="本代理基于-TCP，是一个不关心协议的代理？"><a href="#本代理基于-TCP，是一个不关心协议的代理？" class="headerlink" title="本代理基于 TCP，是一个不关心协议的代理？"></a>本代理基于 TCP，是一个不关心协议的代理？</h4><p>是的</p>
<h4 id="HTTP-代理-VS-Socks-代理"><a href="#HTTP-代理-VS-Socks-代理" class="headerlink" title="HTTP 代理 VS Socks 代理"></a>HTTP 代理 VS Socks 代理</h4><h2 id="问题与挑战"><a href="#问题与挑战" class="headerlink" title="问题与挑战"></a>问题与挑战</h2><h3 id="获取远端主机名（Host）"><a href="#获取远端主机名（Host）" class="headerlink" title="获取远端主机名（Host）"></a>获取远端主机名（Host）</h3><p>当应用设置了代理后，在 TLS 协商前，应用首先会发一条 CONNECT 请求，期待通过代理和远端服务器建立 TLS 隧道（tunnel）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONNECT 10.1.1.1:443 HTTP/1.1</span><br></pre></td></tr></table></figure>
<p>作为中间人代理，并不帮助建立隧道，而是需要解析 CONNECT 请求，并从中获得远端服务器主机名。同时返回给被代理程序隧道建立成功的回复：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 根据请求指定版本号</span><br><span class="line">HTTP/1.0 200 Connection established\r\n\r\n</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="Subject-Alternative-Name"><a href="#Subject-Alternative-Name" class="headerlink" title="Subject Alternative Name"></a>Subject Alternative Name</h3><p>这是服务器证书包含的一个字段，用于标识证书签发的域名。</p>
<p>通常服务器的域名保存在 <code>Common name</code> 字段，只保存一个域名，而 <code>Subject Alternative Name</code> 可保存多个域名，并支持通配符。也就是，有的时候访问的服务器主机并不和 <code>Common name</code> 匹配，但匹配 <code>SAN</code>，这样的证书也是合法的。</p>
<h3 id="服务器名称指示（SNI）"><a href="#服务器名称指示（SNI）" class="headerlink" title="服务器名称指示（SNI）"></a>服务器名称指示（SNI）</h3><p>这是识别同一 IP 部署的多个带证书虚拟主机（Virtual Host）的技术。</p>
<p>基于名称的虚拟主机允许多个域名由同一IP地址上的单个服务器（通常为Web服务器）托管。使用 HTTP 时，其必须包含的协议头 <a href="https://zh.wikipedia.org/wiki/HTTP%E5%A4%B4%E5%AD%97%E6%AE%B5%E5%88%97%E8%A1%A8" target="_blank" rel="noopener"><code>Host</code></a> 字段标识了欲访问的域名，据此分辨出虚拟主机。但是，由于 HTTPS 握手发生在服务器看到任何 HTTP 头之前，这时并不知道要访问哪个虚拟主机，也就不能把对应的服务器证书发给客户端，以完成 TLS 协商。</p>
<p>SNI 通过让客户端发送虚拟域名的名称作为TLS协商的一部分来解决此问题。</p>
<p>OpenSSL 客户端实现：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// set host name before initiating the SSL connection</span></span><br><span class="line">SSL_set_tlsext_host_name(ssl, hostName)</span><br></pre></td></tr></table></figure>
<p><a href="https://zh.wikipedia.org/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%8D%E7%A7%B0%E6%8C%87%E7%A4%BA" target="_blank" rel="noopener">扩展阅读</a></p>
<h3 id="Certificate-Pinning"><a href="#Certificate-Pinning" class="headerlink" title="Certificate Pinning"></a>Certificate Pinning</h3><p>简单地说，就是某些程序（比如浏览器）只相信某些根证书签发的服务器证书。</p>
<p>通常证书通过证书链验证合法性，<code>MyCert</code> 由 <code>IntermediateCert</code> 签发，它又由 <code>RootCert</code> 签发，<code>RootCert</code> 已经内置在操作系统的可信任根证书中。 这样，<code>MyCert</code> 是合法的。常见内置的根证书有：Verisign, Digicert, Thawte等。</p>
<p>但是，Certificate pinning 的作用是，即使通过了上面的验证，如果不是某个指定 RootCert 签发的证书，也认为其不合法。这在一定程序上避免中间人攻击，但没有真的解决。</p>
<p>下面是一些使用 Certificate pinning 的应用：</p>
<ul>
<li>微软的自动更新</li>
<li>苹果 App Store</li>
<li>Twitter app</li>
</ul>
<p><a href="https://security.stackexchange.com/questions/29988/what-is-certificate-pinning/" target="_blank" rel="noopener">扩展阅读</a></p>
<h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><h3 id="通过-netsh-winhttp-命令"><a href="#通过-netsh-winhttp-命令" class="headerlink" title="通过 netsh winhttp 命令"></a>通过 <code>netsh winhttp</code> 命令</h3><p><a href="https://technet.microsoft.com/pt-br/library/cc731131(v=ws.10" target="_blank" rel="noopener">文档</a>.aspx#BKMK_5)</p>
<p>设置代理：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set proxy 127.0.0.1:8080 "&lt;local&gt;"</span><br></pre></td></tr></table></figure>
<h3 id="通过-WinHTTP-接口设置"><a href="#通过-WinHTTP-接口设置" class="headerlink" title="通过 WinHTTP 接口设置"></a>通过 <code>WinHTTP</code> 接口设置</h3><p><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa384069(v=vs.85" target="_blank" rel="noopener">文档</a>.aspx)</p>
<h3 id="WinHTTP-vs-WinINet"><a href="#WinHTTP-vs-WinINet" class="headerlink" title="WinHTTP vs. WinINet"></a>WinHTTP vs. WinINet</h3><p><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/hh227297(v=vs.85" target="_blank" rel="noopener">参考</a>.aspx)</p>
<p>选择 WinINet 的原因：</p>
<ul>
<li>支持 cookies</li>
<li>Credential Cache (和SSL证书相关？)</li>
<li>Credential Prompting (和SSL证书相关？)</li>
</ul>
<h3 id="INTERNET-PER-CONN-OPTION"><a href="#INTERNET-PER-CONN-OPTION" class="headerlink" title="INTERNET_PER_CONN_OPTION"></a>INTERNET_PER_CONN_OPTION</h3><p><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa385145(v=vs.85" target="_blank" rel="noopener">INTERNET_PER_CONN_OPTION</a>.aspx)</p>
<h3 id="INTERNET-PROXY-INFO"><a href="#INTERNET-PROXY-INFO" class="headerlink" title="INTERNET_PROXY_INFO"></a>INTERNET_PROXY_INFO</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INTERNET_PROXY_INFO proxy;</span><br><span class="line">proxy.dwAccessType = INTERNET_OPEN_TYPE_PROXY;</span><br><span class="line">proxy.lpszProxy = (LPCTSTR)<span class="string">"127.0.0.1:8080"</span>;  <span class="comment">// unicode building, must cast to LPCTSTR</span></span><br><span class="line">proxy.lpszProxyBypass = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>
<h3 id="设置自动代理"><a href="#设置自动代理" class="headerlink" title="设置自动代理"></a>设置自动代理</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">wchar_t</span> wzsPath[MAX_PATH];</span><br><span class="line"><span class="keyword">wchar_t</span> wszProxyUrl[INTERNET_MAX_URL_LENGTH];</span><br><span class="line">SHGetFolderPath ( <span class="literal">NULL</span>, CSIDL_APPDATA | CSIDL_FLAG_CREATE, <span class="literal">NULL</span>, <span class="number">0</span>, wszPath );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Construct Pac file path. – %appdata%\MyAppFolder\redirect.pac</span></span><br><span class="line">StringCbPrintf (wszProxyUrl, <span class="keyword">sizeof</span>(wszProxyUrl), </span><br><span class="line">        <span class="string">L"file://%s\\MyAppFolder\\redirect.pac"</span>, wszPath );</span><br><span class="line"></span><br><span class="line">INTERNET_PER_CONN_OPTION_LIST *optionList = <span class="number">0</span>;</span><br><span class="line">optionList-&gt;pOptions[INDEX].Value.pszValue = wszPath;</span><br><span class="line"></span><br><span class="line">InternetSetOption ( <span class="literal">NULL</span>, INTERNET_OPTION_PER_CONNECTION_OPTION,</span><br><span class="line">        optionList, <span class="keyword">sizeof</span>(INTERNET_PER_CONN_OPTION_LIST) );</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">INTERNET_PER_CONN_OPTION_LIST    List;</span><br><span class="line">INTERNET_PER_CONN_OPTION         Option[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>                    nSize =</span><br><span class="line"><span class="keyword">sizeof</span>(INTERNET_PER_CONN_OPTION_LIST);</span><br><span class="line"></span><br><span class="line">Option[<span class="number">0</span>].dwOption = INTERNET_PER_CONN_AUTOCONFIG_URL;</span><br><span class="line">Option[<span class="number">0</span>].Value.pszValue = <span class="string">"http://myserver/proxy.pacl"</span>;</span><br><span class="line">Option[<span class="number">1</span>].dwOption = INTERNET_PER_CONN_FLAGS;</span><br><span class="line">Option[<span class="number">1</span>].Value.dwValue = PROXY_TYPE_AUTO_PROXY_URL;</span><br><span class="line"></span><br><span class="line">List.dwSize = <span class="keyword">sizeof</span>(INTERNET_PER_CONN_OPTION_LIST);</span><br><span class="line">List.pszConnection = <span class="literal">NULL</span>;</span><br><span class="line">List.dwOptionCount = <span class="number">2</span>;</span><br><span class="line">List.dwOptionError = <span class="number">0</span>;</span><br><span class="line">List.pOptions = Option;</span><br><span class="line"></span><br><span class="line">hMyHandle =  InternetOpen(<span class="string">""</span>, INTERNET_OPEN_TYPE_DIRECT, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!InternetSetOption(hMyHandle, INTERNET_OPTION_PER_CONNECTION_OPTION,</span><br><span class="line">&amp;List, nSize))</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"InternetQueryOption failed! (%d)\n"</span>, GetLastError());</span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://docs.mitmproxy.org/en/stable/howmitmproxy.html" target="_blank" rel="noopener">mitmproxy</a></li>
<li><a href="http://www.5icpp.com/?p=139" target="_blank" rel="noopener">如何给CHtmlView添加代理——MFC</a></li>
<li><a href="http://www.lai18.com/content/2206252.html" target="_blank" rel="noopener">为网络程序添加代理设置</a>：带 VC6 示例程序</li>
<li><a href="http://www.cnblogs.com/duanshuiliu/archive/2013/03/18/2965405.html" target="_blank" rel="noopener">查询代理和设置代理</a></li>
<li><a href="http://blog.csdn.net/ba_jie/article/details/43564385" target="_blank" rel="noopener">写C++程序绕过IE的限制：“某些设置由系统管理员进行管理”</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> OpenSSL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> openssl </tag>
            
            <tag> proxy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenSSL 常用方法收集]]></title>
      <url>/2017/06/08/openssl-commands/</url>
      <content type="html"><![CDATA[<p><a href="http://onthink.com/post/openssl-resources.html">下载 OpenSSL</a></p>
<p>进入 OpenSSL 命令行模式：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OpenSSL</span><br></pre></td></tr></table></figure>
<p>;) windows 系统中会提示：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WARNING: can\'t open config file: /usr/local/ssl/openssl.cnf</span><br><span class="line"><span class="meta">OpenSSL&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure>
<p>退出OpenSSL程序</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">OpenSSL&gt;</span><span class="bash"> <span class="built_in">exit</span></span></span><br></pre></td></tr></table></figure>
<h3 id="生成私钥"><a href="#生成私钥" class="headerlink" title="生成私钥"></a>生成私钥</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">OpenSSL&gt;</span><span class="bash"> genrsa -out rsa_private_key.pem   1024</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="生成公钥"><a href="#生成公钥" class="headerlink" title="生成公钥"></a>生成公钥</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">OpenSSL&gt;</span><span class="bash"> rsa -<span class="keyword">in</span> rsa_private_key.pem -pubout -out rsa_public_key.pem</span></span><br></pre></td></tr></table></figure>
<h3 id="将公私钥写入同一文件"><a href="#将公私钥写入同一文件" class="headerlink" title="将公私钥写入同一文件"></a>将公私钥写入同一文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat cert.key cert.crt &gt; cert.pem</span><br></pre></td></tr></table></figure>
<h3 id="转换成-PKCS8-格式"><a href="#转换成-PKCS8-格式" class="headerlink" title="转换成 PKCS8 格式"></a>转换成 PKCS8 格式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">OpenSSL&gt;</span><span class="bash"> pkcs8 -topk8 -inform PEM -<span class="keyword">in</span> rsa_private_key.pem -outform PEM -nocrypt -out rsa_private_key_pkcs8.pem</span></span><br></pre></td></tr></table></figure>
<p>其它一些格式转换，参考<a href="http://onthink.com/post/about-cert-type.html">这里</a></p>
]]></content>
      
        <categories>
            
            <category> OpenSSL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> openssl </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++ 常用方法收集]]></title>
      <url>/2017/06/06/cpp-library/</url>
      <content type="html"><![CDATA[<h2 id="字符操作"><a href="#字符操作" class="headerlink" title="字符操作"></a>字符操作</h2><h3 id="wstring-和-string-互转"><a href="#wstring-和-string-互转" class="headerlink" title="wstring 和 string 互转"></a>wstring 和 string 互转</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="function">wstring <span class="title">s2ws</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> convert_typeX = <span class="built_in">std</span>::codecvt_utf8&lt;<span class="keyword">wchar_t</span>&gt;;</span><br><span class="line">    <span class="built_in">std</span>::wstring_convert&lt;convert_typeX, <span class="keyword">wchar_t</span>&gt; converterX;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> converterX.from_bytes(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">ws2s</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::wstring&amp; wstr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> convert_typeX = <span class="built_in">std</span>::codecvt_utf8&lt;<span class="keyword">wchar_t</span>&gt;;</span><br><span class="line">    <span class="built_in">std</span>::wstring_convert&lt;convert_typeX, <span class="keyword">wchar_t</span>&gt; converterX;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> converterX.to_bytes(wstr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://stackoverflow.com/questions/4804298/how-to-convert-wstring-into-string" target="_blank" rel="noopener">进一步阅读</a></p>
<a id="more"></a>
<h2 id="Windows-相关"><a href="#Windows-相关" class="headerlink" title="Windows 相关"></a>Windows 相关</h2><h3 id="获取当前进程目录"><a href="#获取当前进程目录" class="headerlink" title="获取当前进程目录"></a>获取当前进程目录</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="function">wstring <span class="title">getExePath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">wchar_t</span> buffer[MAX_PATH];</span><br><span class="line">    GetModuleFileName(<span class="literal">NULL</span>, buffer, MAX_PATH);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span>::size_type pos = <span class="built_in">std</span>::wstring(buffer).find_last_of(<span class="string">L"\\/"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::wstring(buffer).substr(<span class="number">0</span>, pos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> c++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenSSL 学习资源]]></title>
      <url>/2017/06/05/openssl-resources/</url>
      <content type="html"><![CDATA[<h3 id="OpenSSL-可执行文件下载"><a href="#OpenSSL-可执行文件下载" class="headerlink" title="OpenSSL 可执行文件下载"></a>OpenSSL 可执行文件下载</h3><ul>
<li><a href="https://indy.fulgan.com/SSL/" target="_blank" rel="noopener">OpenSSL 下载</a></li>
</ul>
<h3 id="最好的学习文章"><a href="#最好的学习文章" class="headerlink" title="最好的学习文章"></a>最好的学习文章</h3><ul>
<li><p><a href="http://www.cnblogs.com/LittleHann/p/3741907.html" target="_blank" rel="noopener">OPENSSL编程入门学习</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/LittleHann/p/3738141.html" target="_blank" rel="noopener">openSSL命令、PKI、CA、SSL证书原理</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/LittleHann/p/3735602.html" target="_blank" rel="noopener">中间人攻击(MITM)姿势总结</a></p>
</li>
</ul>
<a id="more"></a>]]></content>
      
        <categories>
            
            <category> c++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[windows 常用命令]]></title>
      <url>/2017/06/02/windows-commands/</url>
      <content type="html"><![CDATA[<h2 id="一、网络"><a href="#一、网络" class="headerlink" title="一、网络"></a>一、网络</h2><h3 id="查看谁在侦听端口"><a href="#查看谁在侦听端口" class="headerlink" title="查看谁在侦听端口"></a>查看谁在侦听端口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -np &lt;protocol&gt; | find "port #"</span><br><span class="line"></span><br><span class="line">netstat -np TCP | find "80"</span><br></pre></td></tr></table></figure>
<h3 id="打开-Internet-网络设置"><a href="#打开-Internet-网络设置" class="headerlink" title="打开 Internet 网络设置"></a>打开 Internet 网络设置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inetcpl.cpl</span><br></pre></td></tr></table></figure>
<p>其它的控制命令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">appwiz.cpl</span><br><span class="line">bthprops.cpl</span><br><span class="line">desk.cpl</span><br><span class="line">Firewall.cpl</span><br><span class="line">hdwwiz.cpl</span><br><span class="line">igfxCPL.cpl</span><br><span class="line">inetcpl.cpl</span><br><span class="line">intl.cpl</span><br><span class="line">irprops.cpl</span><br><span class="line">joy.cpl</span><br><span class="line">main.cpl</span><br><span class="line">mmsys.cpl</span><br><span class="line">ncpa.cpl</span><br><span class="line">powercfg.cpl</span><br><span class="line">sysdm.cpl</span><br><span class="line">TabletPC.cpl</span><br><span class="line">telephon.cpl</span><br><span class="line">timedate.cpl</span><br><span class="line">wscui.cpl</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="二、文件系统"><a href="#二、文件系统" class="headerlink" title="二、文件系统"></a>二、文件系统</h2><h3 id="以-Ascii-树列出文件和目录"><a href="#以-Ascii-树列出文件和目录" class="headerlink" title="以 Ascii 树列出文件和目录"></a>以 Ascii 树列出文件和目录</h3><p>打开 <code>PowerShell</code>，执行：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree &lt;文件目录&gt; /F /A</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> windows </category>
            
        </categories>
        
        
        <tags>
            
            <tag> windows </tag>
            
            <tag> command </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Visual Studio 提高效率方法和工具]]></title>
      <url>/2017/05/25/visual-studio-tips/</url>
      <content type="html"><![CDATA[<h3 id="为多行注释开头添加空格"><a href="#为多行注释开头添加空格" class="headerlink" title="为多行注释开头添加空格"></a>为多行注释开头添加空格</h3><p>一般情况下可以通过快捷键 <code>CTRL+K+C</code> 来添加注释：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//A</span></span><br><span class="line"><span class="comment">//B</span></span><br><span class="line"><span class="comment">//C</span></span><br></pre></td></tr></table></figure>
<p>但是，我更习惯在每行内容的开头添加一个空格：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A</span></span><br><span class="line"><span class="comment">// B</span></span><br><span class="line"><span class="comment">// C</span></span><br></pre></td></tr></table></figure>
<p>这是一个实现的方法：<a href="https://stackoverflow.com/questions/14027598/how-to-comment-multiple-lines-with-space-or-indent" target="_blank" rel="noopener">How to comment multiple lines with space or indent</a></p>
]]></content>
      
        <categories>
            
            <category> vs </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c++ </tag>
            
            <tag> vs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[编译 CEF]]></title>
      <url>/2017/04/26/cef-tips/</url>
      <content type="html"><![CDATA[<h2 id="项目与分支"><a href="#项目与分支" class="headerlink" title="项目与分支"></a>项目与分支</h2><p><strong>内容来自官方文档<a href="https://bitbucket.org/chromiumembedded/cef/wiki/BranchesAndBuilding.md" target="_blank" rel="noopener">BranchesAndBuilding</a></strong></p>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>CEF 是 Chromium 项目的一个扩展，跟踪其分支。可通过自动工具或手动编译。</p>
<h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><p>CEF 的 master 分支跟踪 Chromium 的 master 分支，不建议用其产品化。</p>
<p>下载开发版 CEF</p>
<p>CEF3 - <a href="https://bitbucket.org/chromiumembedded/cef/src?at=master" target="_blank" rel="noopener">https://bitbucket.org/chromiumembedded/cef/src?at=master</a></p>
<p>CEF1 已不再支持。</p>
<h3 id="发布（Release）分支"><a href="#发布（Release）分支" class="headerlink" title="发布（Release）分支"></a>发布（Release）分支</h3><p>CEF 的发布分支跟踪 Chromium 的 release 里程碑（milesone）MXX 分支，推荐使用其产品化：</p>
<ul>
<li>基于 Chromium release </li>
<li>更好的测试</li>
<li>CEF API 维护不变，仅做 bug 和安全修复</li>
<li>CEF 必要时可包含 Blink 补丁</li>
<li>不受 CEF master 分支推进影响</li>
</ul>
<p>CEF 版本 <strong> X.YYYY.A.gHHHHHHH</strong>：</p>
<ul>
<li>X：主版本号（当前为 3）</li>
<li>YYYY：Chromium 分支</li>
<li>A：自增值，反映当前分支的版本值。可表示基于同一分支，各版本的顺序，用于修复 bug 等的版本提升</li>
<li>gHHHHHHH：7位字符反映 git 提交哈希，便于定位 git 历史</li>
</ul>
<p>版本的详细信息保存在 <code>include/cef_version.h</code> 头文件中，也可以通过生成的应用访问 <code>about:version</code> 查看。</p>
<p>CEF release 分支下载规则，YYYY 对应4位 Chromium release 分支号：</p>
<ul>
<li><a href="https://bitbucket.org/chromiumembedded/cef/src/YYYY?at=YYYY" target="_blank" rel="noopener">https://bitbucket.org/chromiumembedded/cef/src/YYYY?at=YYYY</a></li>
</ul>
<p>比如： <a href="https://bitbucket.org/chromiumembedded/cef/src/2623?at=2623" target="_blank" rel="noopener">https://bitbucket.org/chromiumembedded/cef/src/2623?at=2623</a></p>
<h2 id="编译-CEF"><a href="#编译-CEF" class="headerlink" title="编译 CEF"></a>编译 CEF</h2><h3 id="下载文档"><a href="#下载文档" class="headerlink" title="下载文档"></a>下载文档</h3><p>首先要下载文档仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://bitbucket.org/chromiumembedded/cef.git/wiki</span><br></pre></td></tr></table></figure>
<p>然后将文档检出到需要编译的版本，比如 2623</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 0625af2618b7f15660146acd769142144e5a48c9</span><br></pre></td></tr></table></figure>
<h3 id="生成项目文件"><a href="#生成项目文件" class="headerlink" title="生成项目文件"></a>生成项目文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd src\cef </span><br><span class="line">create.bat</span><br></pre></td></tr></table></figure>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd src </span><br><span class="line">ninja -C out\Release</span><br></pre></td></tr></table></figure>
<h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p>编译成功之后，运行 <code>out\Release\cefclient.exe</code></p>
<h3 id="打包导出"><a href="#打包导出" class="headerlink" title="打包导出"></a>打包导出</h3><p>执行打包脚本</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd src\cef\tools</span><br><span class="line">make_distrib.bat --ninja-build</span><br></pre></td></tr></table></figure>
<p>打包成功后，在 <code>src/cef/binary_distrib</code> 目录会生成二进制的包</p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul>
<li><a href="https://bitbucket.org/chromiumembedded/cef/downloads/?tab=branches" target="_blank" rel="noopener">CEF branches</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> cef </category>
            
        </categories>
        
        
        <tags>
            
            <tag> chromium </tag>
            
            <tag> cef </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Chrome 扩展之： Content Script]]></title>
      <url>/2017/04/25/extension-content-script/</url>
      <content type="html"><![CDATA[<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><h2 id="1-1-使用场景"><a href="#1-1-使用场景" class="headerlink" title="1.1 使用场景"></a>1.1 使用场景</h2><p><code>Content Script</code> 是一个很神奇的东西。它可以读取和修改页面内容。比如一些应用场景</p>
<ul>
<li>过滤广告：将页面中的广告区块过滤掉，只显示主要内容</li>
<li>翻译页面中的外语</li>
<li>分享页面内容到社交平台</li>
</ul>
<h3 id="1-2-限制"><a href="#1-2-限制" class="headerlink" title="1.2 限制"></a>1.2 限制</h3><ul>
<li>Use chrome.* APIs, with the exception of:<ul>
<li>extension ( getURL , inIncognitoContext , lastError , onRequest , sendRequest )</li>
<li>i18n</li>
<li>runtime ( connect , getManifest , getURL , id , onConnect , onMessage , sendMessage )</li>
<li>storage</li>
</ul>
</li>
<li>不能使用扩展页面中的变量和方法</li>
<li>不能使用定义在其它扩展的 Content Script 中的变量和方法</li>
</ul>
<h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2 使用"></a>2 使用</h2><h3 id="2-1-Manifest"><a href="#2-1-Manifest" class="headerlink" title="2.1 Manifest"></a>2.1 Manifest</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"My extension"</span>,</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"content_scripts"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"matches"</span>: [<span class="string">"http://www.google.com/*"</span>],</span><br><span class="line">      <span class="string">"css"</span>: [<span class="string">"mystyles.css"</span>],</span><br><span class="line">      <span class="string">"js"</span>: [<span class="string">"jquery.js"</span>, <span class="string">"myscript.js"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"permissions"</span>: [</span><br><span class="line">    <span class="string">"tabs"</span>, <span class="string">"http://www.google.com/*"</span></span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-注入"><a href="#2-2-注入" class="headerlink" title="2.2 注入"></a>2.2 注入</h3><h4 id="2-2-1-与-browserAction-配合"><a href="#2-2-1-与-browserAction-配合" class="headerlink" title="2.2.1 与 browserAction 配合"></a>2.2.1 与 <code>browserAction</code> 配合</h4><p>注入并执行一段代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chrome.browserAction.onClicked.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">tab</span>) </span>&#123;</span><br><span class="line">  chrome.tabs.executeScript(&#123;</span><br><span class="line">    code: <span class="string">'document.body.style.backgroundColor="red"'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>执行上面的代码先获取权限：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"permissions"</span>: [</span><br><span class="line">  <span class="string">"activeTab"</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>或直接执行一个文件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrome.tabs.executeScript(<span class="literal">null</span>, &#123;<span class="attr">file</span>: <span class="string">"content_script.js"</span>&#125;);</span><br></pre></td></tr></table></figure>
<p><code>blocking</code> 会将回调函数设置为同步处理，请求会等待回调完成。使用该参数需要在 <code>permission</code> 中添加 <code>webRequestBlocking</code> 权限。</p>
<h3 id="2-2-2-获取资源文件-URL"><a href="#2-2-2-获取资源文件-URL" class="headerlink" title="2.2.2 获取资源文件 URL"></a>2.2.2 获取资源文件 URL</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/Code <span class="keyword">for</span> displaying &lt;extensionDir&gt;<span class="regexp">/images/myim</span>age.png:</span><br><span class="line"><span class="keyword">var</span> imgURL = chrome.extension.getURL(<span class="string">"images/myimage.png"</span>);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"someImage"</span>).src = imgURL;</span><br></pre></td></tr></table></figure>
<h2 id="3-要点"><a href="#3-要点" class="headerlink" title="3 要点"></a>3 要点</h2><h3 id="3-1-ContentScript-在独立环境运行"><a href="#3-1-ContentScript-在独立环境运行" class="headerlink" title="3.1 ContentScript 在独立环境运行"></a>3.1 ContentScript 在独立环境运行</h3><h3 id="3-2-注入的方式"><a href="#3-2-注入的方式" class="headerlink" title="3.2 注入的方式"></a>3.2 注入的方式</h3><h4 id="3-2-1-整个文件"><a href="#3-2-1-整个文件" class="headerlink" title="3.2.1 整个文件"></a>3.2.1 整个文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> add "script.js" to web_accessible_resources in manifest.json</span></span><br><span class="line">s.src = chrome.extension.getURL(<span class="string">'script.js'</span>);</span><br><span class="line">s.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.remove(); <span class="comment">// 执行完后清理注入标签</span></span><br><span class="line">&#125;;</span><br><span class="line">(<span class="built_in">document</span>.head || <span class="built_in">document</span>.documentElement).appendChild(s);</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong> 将 <code>script.js</code> 加入到 <a href="https://developer.chrome.com/extensions/manifest/web_accessible_resources" target="_blank" rel="noopener">“web_accessible_resources”</a></p>
<h4 id="3-2-2-代码片段"><a href="#3-2-2-代码片段" class="headerlink" title="3.2.2 代码片段"></a>3.2.2 代码片段</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> actualCode = <span class="string">`// Code here.</span></span><br><span class="line"><span class="string">// If you want to use a variable, use $ and curly braces.</span></span><br><span class="line"><span class="string">// For example, to use a fixed random number:</span></span><br><span class="line"><span class="string">var someFixedRandomValue = <span class="subst">$&#123; <span class="built_in">Math</span>.random() &#125;</span>;</span></span><br><span class="line"><span class="string">// NOTE: Do not insert unsafe variables in this way, see below</span></span><br><span class="line"><span class="string">// at "Dynamic values in the injected code"</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">script.textContent = actualCode;</span><br><span class="line">(<span class="built_in">document</span>.head||<span class="built_in">document</span>.documentElement).appendChild(script);</span><br><span class="line">script.remove();</span><br></pre></td></tr></table></figure>
<h4 id="3-2-3-更多方式"><a href="#3-2-3-更多方式" class="headerlink" title="3.2.3 更多方式"></a>3.2.3 更多方式</h4><p>参见： <a href="http://stackoverflow.com/questions/9515704/insert-code-into-the-page-context-using-a-content-script/9517879#9517879" target="_blank" rel="noopener">Insert code into the page context using a content script</a></p>
<h3 id="3-3-注入的时机"><a href="#3-3-注入的时机" class="headerlink" title="3.3 注入的时机"></a>3.3 注入的时机</h3><h4 id="3-3-1-document-start"><a href="#3-3-1-document-start" class="headerlink" title="3.3.1 document_start"></a>3.3.1 document_start</h4><ul>
<li>在 <code>document.readyState</code> 事件前被触发。</li>
<li><p>document.head 和 document.body 还不可用，只有 documentElement</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="built_in">document</span>.createElement (<span class="string">"script"</span>);</span><br><span class="line">s.src = <span class="string">"http://ajax.googleapis.com/ajax/libs/jquery/2.1.0/jquery.min.js"</span>;</span><br><span class="line">s.async = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">document</span>.documentElement.appendChild (s);</span><br></pre></td></tr></table></figure>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="built_in">document</span>.createElement (<span class="string">"script"</span>);</span><br><span class="line">s.src = chrome.extension.getURL (<span class="string">"MyPwnCode.js"</span>);</span><br><span class="line">s.async = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">document</span>.documentElement.appendChild (s);</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果需要操作其它 DOM，可以等待 <code>DOMContentLoaded</code> 事件</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, fireContentLoadedEvent, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fireContentLoadedEvent</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log (<span class="string">"DOMContentLoaded"</span>);</span><br><span class="line">    <span class="comment">// PUT YOUR CODE HERE.</span></span><br><span class="line">    <span class="comment">//document.body.textContent = "Changed this!";</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="3-3-2-document-end"><a href="#3-3-2-document-end" class="headerlink" title="3.3.2 document_end"></a>3.3.2 document_end</h4><ul>
<li>DOM 已解析完成</li>
<li>资源如 image 和 frame 还没有加载（onload）</li>
</ul>
<h4 id="3-3-3-document-idle"><a href="#3-3-3-document-idle" class="headerlink" title="3.3.3 document_idle"></a>3.3.3 document_idle</h4><ul>
<li>晚于 document_end，</li>
<li>也晚于 window.onload</li>
<li>DOM 已解析完成</li>
</ul>
]]></content>
      
        <categories>
            
            <category> chrome </category>
            
        </categories>
        
        
        <tags>
            
            <tag> chrome </tag>
            
            <tag> extension </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Chrome 扩展之： 使用 webRequest 替换页面资源]]></title>
      <url>/2017/04/19/extension-replace-js/</url>
      <content type="html"><![CDATA[<h2 id="请求事件"><a href="#请求事件" class="headerlink" title="请求事件"></a>请求事件</h2><p>首先，一个请求的生命周期是这样的：</p>
<p><img src="/images/posts/chrome_extension/webrequestapi.png" alt=""></p>
<p>利用 <a href="https://developer.chrome.com/extensions/webRequest" target="_blank" rel="noopener">webRequest</a> 接口，可以监听图中的事件，插入自己的处理。</p>
<h2 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h2><h3 id="1-webRequest-需要在-background-中使用"><a href="#1-webRequest-需要在-background-中使用" class="headerlink" title="1. webRequest 需要在 background 中使用"></a>1. webRequest 需要在 background 中使用</h3><h3 id="2-调用方式"><a href="#2-调用方式" class="headerlink" title="2. 调用方式"></a>2. 调用方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">details</span>) </span>&#123;...&#125;;</span><br><span class="line"><span class="keyword">var</span> filter = &#123;...&#125;;</span><br><span class="line"><span class="keyword">var</span> opt_extraInfoSpec = [...];</span><br><span class="line"></span><br><span class="line">chrome.webRequest.onBeforeRequest.addListener(</span><br><span class="line">    callback, filter, opt_extraInfoSpec);</span><br></pre></td></tr></table></figure>
<h3 id="3-blocking-参数"><a href="#3-blocking-参数" class="headerlink" title="3. blocking 参数"></a>3. <code>blocking</code> 参数</h3><p><code>blocking</code> 会将回调函数设置为同步处理，请求会等待回调完成。使用该参数需要在 <code>permission</code> 中添加 <code>webRequestBlocking</code> 权限。</p>
<h2 id="举例：-替换网站的-JS-文件"><a href="#举例：-替换网站的-JS-文件" class="headerlink" title="举例： 替换网站的 JS 文件"></a>举例： 替换网站的 JS 文件</h2><h3 id="1-声明权限"><a href="#1-声明权限" class="headerlink" title="1. 声明权限"></a>1. 声明权限</h3><p>编辑 <code>manifest.json</code>，添加 <code>permission</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"permissions": [</span><br><span class="line">  "webRequest",</span><br><span class="line">  "webRequestBlocking",</span><br><span class="line">  "http://*/*",</span><br><span class="line">  <span class="string">"https://*/*"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="2-添加后端-文件"><a href="#2-添加后端-文件" class="headerlink" title="2. 添加后端 文件"></a>2. 添加后端 文件</h3><p>首先在 <code>manifest.json</code> 中添加 background 文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"background": &#123;</span><br><span class="line">  "scripts": ["dist/js/background.js"],</span><br><span class="line">  "persistent": true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-webRequest-脚本"><a href="#3-webRequest-脚本" class="headerlink" title="3. webRequest 脚本"></a>3. webRequest 脚本</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">chrome.webRequest.onBeforeRequest.addListener(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">details</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( details.url.endsWith(<span class="string">'origin.js'</span>) )&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="attr">redirectUrl</span>: chrome.extension.getURL (<span class="string">"dist/bake/fake.js"</span>)&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;<span class="attr">urls</span>: [<span class="string">"*://*/*.js"</span>]&#125;,</span><br><span class="line">  [<span class="string">"blocking"</span>]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>解释一下上面的后端代码：</p>
<ul>
<li>监听 <strong>符合规定请求</strong> 的 <code>onBeforeRequest</code> 事件</li>
<li>这2个参数是回调函数，通过参数 <code>details</code> 来判断每一个请求 <code>url</code>，如果以 <code>origin.js</code> 结尾，将用扩展中准备好的 <code>fake.js</code> 替换。换句话说，将原始网站的 JS 替换为假的 JS</li>
<li>对于用户来讲，通过查看源码，看到的仍然是 <code>&lt;script src=&quot;origin.js&quot;&gt;&lt;/script&gt;</code></li>
<li>通过 DevTools 的 network 查看，会发现 <code>url</code> 已经变为 <code>fake.js</code></li>
<li>第3个参数过滤被监听的请求，支持通配符 <code>*</code></li>
<li>第4个参数为扩展参数，<code>blocking</code> 说明这是 <strong>同步</strong> 处理，请求会等待回调函数完成</li>
</ul>
]]></content>
      
        <categories>
            
            <category> chrome </category>
            
        </categories>
        
        
        <tags>
            
            <tag> chrome </tag>
            
            <tag> extension </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设置 WebBrowser Document Mode]]></title>
      <url>/2017/03/27/webbrowser-document-mode/</url>
      <content type="html"><![CDATA[<h3 id="编辑注册表"><a href="#编辑注册表" class="headerlink" title="编辑注册表"></a>编辑注册表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_CURRENT_USER\SOFTWARE\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BROWSER_EMULATION</span><br></pre></td></tr></table></figure>
<h3 id="设置值"><a href="#设置值" class="headerlink" title="设置值"></a>设置值</h3><table>
<thead>
<tr>
<th style="text-align:left">值</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">10001 (0x2711)</td>
<td style="text-align:left">Internet Explorer 10。网页以IE 10的标准模式展现，页面!DOCTYPE无效</td>
</tr>
<tr>
<td style="text-align:left">10000 (0x02710)</td>
<td style="text-align:left">Internet Explorer 10。在IE 10标准模式中按照网页上!DOCTYPE指令来显示网页。Internet Explorer 10 默认值。</td>
</tr>
<tr>
<td style="text-align:left">9999 (0x270F)</td>
<td style="text-align:left">Windows Internet Explorer 9. 强制IE9显示，忽略!DOCTYPE指令</td>
</tr>
<tr>
<td style="text-align:left">9000 (0x2328)</td>
<td style="text-align:left">Internet Explorer 9. Internet Explorer 9默认值，在IE9标准模式中按照网页上!DOCTYPE指令来显示网页。</td>
</tr>
<tr>
<td style="text-align:left">8888 (0x22B8)</td>
<td style="text-align:left">Internet Explorer 8，强制IE8标准模式显示，忽略!DOCTYPE指令</td>
</tr>
<tr>
<td style="text-align:left">8000 (0x1F40)</td>
<td style="text-align:left">Internet Explorer 8默认设置，在IE8标准模式中按照网页上!DOCTYPE指令展示网页</td>
</tr>
<tr>
<td style="text-align:left">7000 (0x1B58)</td>
<td style="text-align:left">使用WebBrowser Control控件的应用程序所使用的默认值，在IE7标准模式中按照网页上!DOCTYPE指令来展示网页。</td>
</tr>
</tbody>
</table>
<h3 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h3><p><img src="/images/posts/ie/set-reg.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> ie </category>
            
        </categories>
        
        
        <tags>
            
            <tag> windows </tag>
            
            <tag> c++ </tag>
            
            <tag> ie </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DuiLib 的使用]]></title>
      <url>/2017/03/17/duilib-tutorial/</url>
      <content type="html"><![CDATA[<h2 id="下载代码"><a href="#下载代码" class="headerlink" title="下载代码"></a>下载代码</h2><p>本文下载的是 <a href="https://github.com/redrains/DuiLib_Redrain" target="_blank" rel="noopener">Redrain 维护的版本</a>，原始的 DuiLib 版本从<a href="https://github.com/duilib/duilib" target="_blank" rel="noopener">这里</a>下载。</p>
<h2 id="以库方式使用"><a href="#以库方式使用" class="headerlink" title="以库方式使用"></a>以库方式使用</h2><h3 id="打开并升级工程文件"><a href="#打开并升级工程文件" class="headerlink" title="打开并升级工程文件"></a>打开并升级工程文件</h3><p>打开 <code>DuiLib_vs2010.sln</code>，我安装的 IDE 是 <code>VS2015</code>，会提示升级，按提示完成。</p>
<h3 id="编译全部动态库"><a href="#编译全部动态库" class="headerlink" title="编译全部动态库"></a>编译全部动态库</h3><p>打开菜单 Build &gt; Batch Build…</p>
<p>选择编译所有配置：</p>
<p><img src="/images/posts/duilib/build-batch.jpg" alt=""></p>
<p>保存编译的结果：</p>
<ul>
<li>DuiLib.dll</li>
<li>DuiLib.lib</li>
<li>DuiLib_d.dll</li>
<li>DuiLib_d.lib</li>
</ul>
<p>以及 DuiLib 库的定义目录： <code>DuiLib</code></p>
<p>当创建新工程时，把 lib 文件添加到 link 依赖里，把 DuiLib 目录添加到 inluce 路径中，最后把 dll 库放到导出目录中，便配置好了一个 DuiLib 工程。</p>
<h2 id="以源码方式使用"><a href="#以源码方式使用" class="headerlink" title="以源码方式使用"></a>以源码方式使用</h2><h3 id="1-创建一个空工程"><a href="#1-创建一个空工程" class="headerlink" title="1. 创建一个空工程"></a>1. 创建一个空工程</h3><h3 id="2-将源码中的-DuiLib-目录添加到工程根目录中"><a href="#2-将源码中的-DuiLib-目录添加到工程根目录中" class="headerlink" title="2. 将源码中的 DuiLib 目录添加到工程根目录中"></a>2. 将源码中的 DuiLib 目录添加到工程根目录中</h3><h3 id="3-导入-DuiLib-项目"><a href="#3-导入-DuiLib-项目" class="headerlink" title="3. 导入 DuiLib 项目"></a>3. 导入 DuiLib 项目</h3><p>在工程上右键，选择：Add &gt; Existing Project…，找到 DuiLib 项目文件导入</p>
<h3 id="4-设置依赖-DuiLib"><a href="#4-设置依赖-DuiLib" class="headerlink" title="4. 设置依赖 DuiLib"></a>4. 设置依赖 DuiLib</h3><p>在主项目上右键，选择：Build Dependencies &gt; Project Dependencies…，设置依赖 DuiLib 项目。</p>
<p>这样，在编译主项目时会先编译依赖的 DuiLib 项目。</p>
]]></content>
      
        <categories>
            
            <category> c++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> windows </tag>
            
            <tag> c++ </tag>
            
            <tag> duilib </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CEF 的使用]]></title>
      <url>/2017/03/17/cef-tutorial/</url>
      <content type="html"><![CDATA[<h2 id="下载代码"><a href="#下载代码" class="headerlink" title="下载代码"></a>下载代码</h2><p><a href="http://opensource.spotify.com/cefbuilds/index.html" target="_blank" rel="noopener">http://opensource.spotify.com/cefbuilds/index.html</a></p>
<h2 id="CEF"><a href="#CEF" class="headerlink" title="CEF"></a>CEF</h2><h3 id="cefsimple-示例"><a href="#cefsimple-示例" class="headerlink" title="cefsimple 示例"></a>cefsimple 示例</h3><ol>
<li>编译 <code>libcef_dll_wrapper</code> 静态库</li>
<li>创建新的项目</li>
<li>设置 include 目录到 cef 头文件目录</li>
<li>设置链接库  comctl32.lib, shlwapi.lib, rcprt4.lib, libcef_dll_wrapper.lib, libcef.lib, cef_sandbox.lib</li>
<li>添加 resource.rc</li>
<li>添加 cefsimple.exe.manifest 和 compatibility.manifest</li>
<li>绑定编译事件 post build: 将 cef debug 或 release 目录，Resources 目录复制到输出目录</li>
</ol>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="CefSettings"><a href="#CefSettings" class="headerlink" title="CefSettings"></a>CefSettings</h4><p>当嵌入到 windows 消息循环和 DuiLib 消息循环时，要设置 <code>multi_threaded_message_loop</code></p>
<h4 id="CefBrowser-和-CefFrame"><a href="#CefBrowser-和-CefFrame" class="headerlink" title="CefBrowser 和 CefFrame"></a>CefBrowser 和 CefFrame</h4><p>CefBrowser 可以包含多个 CefFrame</p>
<h4 id="CefApp"><a href="#CefApp" class="headerlink" title="CefApp"></a>CefApp</h4><p>待补充</p>
<h4 id="CefClient"><a href="#CefClient" class="headerlink" title="CefClient"></a>CefClient</h4><p>待补充</p>
]]></content>
      
        <categories>
            
            <category> c++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> windows </tag>
            
            <tag> c++ </tag>
            
            <tag> cef </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Proxychains4 问题]]></title>
      <url>/2017/03/10/proxychains-problem/</url>
      <content type="html"><![CDATA[<h3 id="Timeout-问题"><a href="#Timeout-问题" class="headerlink" title="Timeout 问题"></a>Timeout 问题</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 curl https://www.twitter.com/</span><br><span class="line">[proxychains] config file found: /usr/local/Cellar/proxychains-ng/4.10/etc/proxychains.conf</span><br><span class="line">[proxychains] preloading /usr/local/Cellar/proxychains-ng/4.10/lib/libproxychains4.dylib</span><br><span class="line">curl: (7) Failed to connect to www.twitter.com port 443: Operation timed out</span><br></pre></td></tr></table></figure>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="1-重启系统进入维护模式（Recovery-Mode）"><a href="#1-重启系统进入维护模式（Recovery-Mode）" class="headerlink" title="1. 重启系统进入维护模式（Recovery Mode）"></a>1. 重启系统进入维护模式（Recovery Mode）</h4><p>按住 ‘Command’ 和 ‘R’ 启动系统</p>
<h4 id="2-打开终端（Terminal）"><a href="#2-打开终端（Terminal）" class="headerlink" title="2. 打开终端（Terminal）"></a>2. 打开终端（Terminal）</h4><h4 id="3-禁用-csrutil"><a href="#3-禁用-csrutil" class="headerlink" title="3. 禁用 csrutil"></a>3. 禁用 csrutil</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csrutil disable</span><br></pre></td></tr></table></figure>
<h4 id="4-重启系统"><a href="#4-重启系统" class="headerlink" title="4. 重启系统"></a>4. 重启系统</h4>]]></content>
      
        <categories>
            
            <category> mac </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mac </tag>
            
            <tag> shadowsocks </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NSIS 用法小结]]></title>
      <url>/2017/02/22/nsis-usage/</url>
      <content type="html"><![CDATA[<h3 id="编译-Unicode-版本"><a href="#编译-Unicode-版本" class="headerlink" title="编译 Unicode 版本"></a>编译 Unicode 版本</h3><p>在 nsi 文件开头加上宏配置：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unicode true</span><br></pre></td></tr></table></figure>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>unicode 版本的 nsi 和 nsh 文件，需要将编码设置成 <strong>utf8 with BOM</strong>。不然编译器会仍然以 ACP 方式读取文件。</p>
<p><a href="http://nsis.sourceforge.net/Docs/Contents.html" target="_blank" rel="noopener">NSIS Users Manual</a></p>
]]></content>
      
        <categories>
            
            <category> installer </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nsis </tag>
            
            <tag> installer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[socket 常用数据结构]]></title>
      <url>/2017/02/16/socket-data-struct/</url>
      <content type="html"><![CDATA[<h3 id="编译步骤"><a href="#编译步骤" class="headerlink" title="编译步骤"></a>编译步骤</h3><h4 id="1-sockaddr"><a href="#1-sockaddr" class="headerlink" title="1. sockaddr"></a>1. sockaddr</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct sockaddr &#123;</span><br><span class="line">    unsigned short    sa_family;    // address family, AF_xxx</span><br><span class="line">    char              sa_data[14];  // 14 bytes of protocol address</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="2-inet-相关"><a href="#2-inet-相关" class="headerlink" title="2. inet 相关"></a>2. inet 相关</h4><p>sockaddr_in 继承 sockaddr 并添加了一些 INET 的数据属性。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// IPv4 AF_INET sockets:</span><br><span class="line">struct in_addr &#123;</span><br><span class="line">    unsigned long s_addr;          // load with inet_pton()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct sockaddr_in &#123;</span><br><span class="line">    short            sin_family;   // e.g. AF_INET, AF_INET6</span><br><span class="line">    unsigned short   sin_port;     // e.g. htons(3490)</span><br><span class="line">    struct in_addr   sin_addr;     // see struct in_addr, below</span><br><span class="line">    char             sin_zero[8];  // zero this if you want to</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// IPv6 AF_INET6 sockets:</span><br><span class="line">struct in6_addr &#123;</span><br><span class="line">    unsigned char   s6_addr[16];   // load with inet_pton()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct sockaddr_in6 &#123;</span><br><span class="line">    u_int16_t       sin6_family;   // address family, AF_INET6</span><br><span class="line">    u_int16_t       sin6_port;     // port number, Network Byte Order</span><br><span class="line">    u_int32_t       sin6_flowinfo; // IPv6 flow information</span><br><span class="line">    struct in6_addr sin6_addr;     // IPv6 address</span><br><span class="line">    u_int32_t       sin6_scope_id; // Scope ID</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>sockaddr 转换为 sockaddr_in：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sockaddr from;</span><br><span class="line">sockaddr_in to = (sockaddr_in)from;</span><br></pre></td></tr></table></figure>
<h4 id="3-sockaddr-storage"><a href="#3-sockaddr-storage" class="headerlink" title="3. sockaddr_storage"></a>3. sockaddr_storage</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// General socket address holding structure, big enough to hold either</span><br><span class="line">// struct sockaddr_in or struct sockaddr_in6 data:</span><br><span class="line"></span><br><span class="line">struct sockaddr_storage &#123;</span><br><span class="line">    sa_family_t  ss_family;     // address family</span><br><span class="line"></span><br><span class="line">    // all this is padding, implementation specific, ignore it:</span><br><span class="line">    char      __ss_pad1[_SS_PAD1SIZE];</span><br><span class="line">    int64_t   __ss_align;</span><br><span class="line">    char      __ss_pad2[_SS_PAD2SIZE];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="4-addrinfo"><a href="#4-addrinfo" class="headerlink" title="4. addrinfo"></a>4. addrinfo</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">struct addrinfo &#123;</span><br><span class="line">  int     ai_flags;          // AI_PASSIVE, AI_CANONNAME, ...</span><br><span class="line">  int     ai_family;         // AF_xxx</span><br><span class="line">  int     ai_socktype;       // SOCK_xxx</span><br><span class="line">  int     ai_protocol;       // 0 (auto) or IPPROTO_TCP, IPPROTO_UDP </span><br><span class="line"></span><br><span class="line">  socklen_t  ai_addrlen;     // length of ai_addr</span><br><span class="line">  char   *ai_canonname;      // canonical name for nodename</span><br><span class="line">  struct sockaddr  *ai_addr; // binary address</span><br><span class="line">  struct addrinfo  *ai_next; // next structure in linked list</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><a href="http://beej.us/guide/bgnet/output/html/multipage/sockaddr_inman.html" target="_blank" rel="noopener">struct sockaddr and pals</a></p>
]]></content>
      
        <categories>
            
            <category> c++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c++ </tag>
            
            <tag> socket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 VS2015 编译 cpp-netlib]]></title>
      <url>/2017/02/15/build-cpp-netlib-with-vs2015/</url>
      <content type="html"><![CDATA[<p><a href="http://cpp-netlib.org/0.11.0/getting_started.html#building-on-windows" target="_blank" rel="noopener">cpp-netlib 官方文档</a></p>
<p>cpp-netlib 旨在用最新的 C++ 标准，提供易用的网络接口库。</p>
<ul>
<li><a href="http://cpp-netlib.org/" target="_blank" rel="noopener">官方网站</a>：官网提供最新的代码和库下载</li>
<li><a href="https://github.com/cpp-netlib/cpp-netlib" target="_blank" rel="noopener">GitHub</a>：提供较早版本的下载</li>
</ul>
<h2 id="编译步骤"><a href="#编译步骤" class="headerlink" title="编译步骤"></a>编译步骤</h2><h4 id="1-编译-boost"><a href="#1-编译-boost" class="headerlink" title="1. 编译 boost"></a>1. 编译 boost</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bootstrap.bat</span><br><span class="line">.\b2 install --prefix=C:\Users\jon\Desktop\builds\boost --toolset=msvc --without-python link=static runtime-link=shared debug release</span><br></pre></td></tr></table></figure>
<ul>
<li><code>runtime-link=shared</code> 是使用动态库方式编译，对应 VS 设置值 <code>runtime = MD</code></li>
<li><code>runtime-link=static</code> 是使用静态库方式编译，对应 VS 设置值 <code>runtime = MT</code></li>
</ul>
<h4 id="2-生成-cpp-netlib-配置文件"><a href="#2-生成-cpp-netlib-配置文件" class="headerlink" title="2. 生成 cpp-netlib 配置文件"></a>2. 生成 cpp-netlib 配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir cpp-netlib-build</span><br><span class="line"></span><br><span class="line">cd cpp-netlib-build</span><br><span class="line"></span><br><span class="line">cmake -G "Visual Studio 14" -DCMAKE_BUILD_TYPE=Debug -DBOOST_ROOT=C:/Users/jon/Desktop/builds/boost ..\cpp-netlib-0.12.0-final</span><br></pre></td></tr></table></figure>
<p>其它的设置选项还有：</p>
<ul>
<li>-DCMAKE_BUILD_TYPE=Debug </li>
<li>-DCMAKE_C_COMPILER=clang</li>
<li>-DCMAKE_CXX_COMPILER=clang++ </li>
</ul>
<h4 id="3-打开-cpp-netlib-build-CPP-NETLIB-sln-编译"><a href="#3-打开-cpp-netlib-build-CPP-NETLIB-sln-编译" class="headerlink" title="3. 打开 cpp-netlib-build/CPP-NETLIB.sln 编译"></a>3. 打开 <code>cpp-netlib-build/CPP-NETLIB.sln</code> 编译</h4><p>可以全部编译，也可以根据需要单独编译某个模块。比如，单独编译 <code>cppnetlib-uri</code> 项目。编译好的文件输出在 <code>cpp-netlib-build/libs/network/src/Release</code></p>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="1-Invalid-escape-sequence-U"><a href="#1-Invalid-escape-sequence-U" class="headerlink" title="1. Invalid escape sequence \U"></a>1. Invalid escape sequence \U</h3><p>检查 <code>-DBOOST_ROOT=</code> 后面的路径分隔符是不是反斜扛。</p>
]]></content>
      
        <categories>
            
            <category> c++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c++ </tag>
            
            <tag> boost </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 VS2015 编译 boost]]></title>
      <url>/2017/02/14/build-boost-with-vs2015/</url>
      <content type="html"><![CDATA[<p><a href="http://www.boost.org/doc/libs/1_63_0/more/getting_started/windows.html" target="_blank" rel="noopener">boost 官方文档</a></p>
<h3 id="最简单的编译方法"><a href="#最简单的编译方法" class="headerlink" title="最简单的编译方法"></a>最简单的编译方法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bootstrap.bat</span><br><span class="line">.\b2.exe</span><br></pre></td></tr></table></figure>
<p>当编译成功，会得到提示</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">The Boost C++ Libraries were successfully built!</span><br><span class="line"></span><br><span class="line">The following directory should be added to compiler include paths:</span><br><span class="line"></span><br><span class="line">    C:\Users\jon\Desktop\boost_1_63_0</span><br><span class="line"></span><br><span class="line">The following directory should be added to linker library paths:</span><br><span class="line"></span><br><span class="line">    C:\Users\jon\Desktop\boost_1_63_0\stage\lib</span><br></pre></td></tr></table></figure>
<h3 id="编译并指定目录"><a href="#编译并指定目录" class="headerlink" title="编译并指定目录"></a>编译并指定目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./b2 install --prefix=PREFIX</span><br></pre></td></tr></table></figure>
<p><a href="http://www.boost.org/doc/libs/1_55_0/doc/html/bbv2/installation.html" target="_blank" rel="noopener">参考</a></p>
<h3 id="编译参数示例"><a href="#编译参数示例" class="headerlink" title="编译参数示例"></a>编译参数示例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\b2 install --prefix=C:\Users\jon\Desktop\builds\boost --toolset=msvc --without-python link=static runtime-link=shared debug release</span><br></pre></td></tr></table></figure>
<h3 id="使用-boost-头文件库（Header-Only）"><a href="#使用-boost-头文件库（Header-Only）" class="headerlink" title="使用 boost 头文件库（Header Only）"></a>使用 boost 头文件库（Header Only）</h3><p>将下载的 boost 目录添加到项目的 include 路径即可</p>
<h3 id="使用-boost-编译库（Header-CPP）"><a href="#使用-boost-编译库（Header-CPP）" class="headerlink" title="使用 boost 编译库（Header+CPP）"></a>使用 boost 编译库（Header+CPP）</h3><p>除了将 boost 目录添加到 include，还要将上面编译出来的 <code>stage/lib</code> 目录添加到 library 路径</p>
]]></content>
      
        <categories>
            
            <category> c++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c++ </tag>
            
            <tag> boost </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Chromium 拾遗]]></title>
      <url>/2017/01/19/chrome-tips/</url>
      <content type="html"><![CDATA[<h4 id="记录-SSL-的-Session-Key"><a href="#记录-SSL-的-Session-Key" class="headerlink" title="记录 SSL 的 Session Key"></a>记录 SSL 的 Session Key</h4><p>在环境变量中添加一个变量</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SSLKEYLOGFILE  C:\Users\Jonathan\Documents\SSLKEYLOGFILE.txt</span><br></pre></td></tr></table></figure>
<h4 id="可用的命令行参数"><a href="#可用的命令行参数" class="headerlink" title="可用的命令行参数"></a>可用的命令行参数</h4><p><a href="http://peter.sh/experiments/chromium-command-line-switches/" target="_blank" rel="noopener">参考</a></p>
<h4 id="Chrome-发布日历"><a href="#Chrome-发布日历" class="headerlink" title="Chrome 发布日历"></a>Chrome 发布日历</h4><p><a href="https://www.chromium.org/developers/calendar" target="_blank" rel="noopener">Chromium Development Calendar and Release Info</a></p>
<h4 id="chromium-browser-official"><a href="#chromium-browser-official" class="headerlink" title="chromium-browser-official"></a>chromium-browser-official</h4><p><a href="https://gsdview.appspot.com/chromium-browser-official/?marker=chromium-49.0.2623.11.tar.xz.hashe%40" target="_blank" rel="noopener">chromium-browser-official</a></p>
<p><a href="https://chromium.googlesource.com/chromium/src.git" target="_blank" rel="noopener">chromium src</a></p>
]]></content>
      
        <categories>
            
            <category> chromium </category>
            
        </categories>
        
        
        <tags>
            
            <tag> chromium </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHPStorm 设置 watcher]]></title>
      <url>/2017/01/19/phpstorm-file-watcher/</url>
      <content type="html"><![CDATA[<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p><img src="/images/posts/phpstorm_watch/pic-1.png" alt=""></p>
<p><img src="/images/posts/phpstorm_watch/pic-2.png" alt=""></p>
<h4 id="Arguments"><a href="#Arguments" class="headerlink" title="Arguments:"></a>Arguments:</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--no-cache --update $FileName$:$ProjectFileDir$/dist/css/$FileNameWithoutExtension$.css</span><br></pre></td></tr></table></figure>
<h4 id="Outputs-path-to-refresh"><a href="#Outputs-path-to-refresh" class="headerlink" title="Outputs path to refresh:"></a>Outputs path to refresh:</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">ProjectFileDir$/dist/css/<span class="variable">$FileNameWithoutExtension</span>$.css:<span class="variable">$ProjectFileDir</span>$/dist/css/<span class="variable">$FileNameWithoutExtension</span>$.css.map</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> ide </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[编译 Chromium 常见问题]]></title>
      <url>/2017/01/17/build-chromium-issues/</url>
      <content type="html"><![CDATA[<h3 id="gclient-sync-错误"><a href="#gclient-sync-错误" class="headerlink" title="gclient sync 错误"></a>gclient sync 错误</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">fatal: Needed a single revision</span><br><span class="line">Does not point to a valid commit: 4ce7fef091e1d63a3bfc2ed225619893b0eb1782</span><br><span class="line"><span class="meta">32&gt;</span><span class="bash"> Unrecognized error, please merge or rebase manually.  </span></span><br><span class="line"><span class="meta">32&gt;</span><span class="bash"> <span class="built_in">cd</span> src\third_party\libjingle\<span class="built_in">source</span>\talk &amp;&amp; git rebase --onto 4ce7fef091e1d63a3bfc2ed225619893b0eb1782 refs/remotes/origin/master</span></span><br></pre></td></tr></table></figure>
<p>解决办法：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gclient sync --with_branch_heads</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> chromium </category>
            
        </categories>
        
        
        <tags>
            
            <tag> chromium </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WebBrowser 运行 ActiveX 异常]]></title>
      <url>/2017/01/17/webbrowser-nxcompat-issue/</url>
      <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>前段时间使用 VS2015 编译 WebBrowser 的程序，然后运行包含 ActiveX 的页面时，出现了一些奇怪的问题（呃…问题记不清了）。但是，换成 VS2008 或其它低版本编译器时，又不会出现该问题了。</p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>经过一翻查找，发现是编译参数 <code>/NXCOMPAT</code> 引起的，早期的 VS，该参数默认为 <code>NO</code>，新版本默认为 <code>YES</code>。可修改默认值为 <code>NO</code> 解决此问题。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><blockquote>
<p><a href="http://blog.csdn.net/charlessimonyi/article/details/30479131" target="_blank" rel="noopener">WebBrowser无法显示招商银行密码输入控件的问题</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> activex </category>
            
        </categories>
        
        
        <tags>
            
            <tag> activex </tag>
            
            <tag> webbrowser </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SourceTree 操作被挂起]]></title>
      <url>/2017/01/17/source-tree-hungs/</url>
      <content type="html"><![CDATA[<h4 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">The server's host key is not cached in the registry. You</span><br><span class="line">have no guarantee that the server is the computer you</span><br><span class="line">think it is.</span><br><span class="line">The server's rsa2 key fingerprint is:</span><br><span class="line">ssh-rsa 2048 59:ca:22:af:f9:8e:6f:f7:87:b3:ea:da:1b:2b:aa:f2</span><br><span class="line">If you trust this host, enter "y" to add the key to</span><br><span class="line">PuTTY's cache and carry on connecting.</span><br><span class="line">If you want to carry on connecting just once, without</span><br><span class="line">adding the key to the cache, enter "n".</span><br><span class="line">If you do not trust this host, press Return to abandon the</span><br><span class="line">connection.</span><br></pre></td></tr></table></figure>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>手动连接一次 git 服务器，比如 GitLab，<a href="http://stackoverflow.com/questions/32437659/cannot-pull-git-remote-repository-from-sourcetree" target="_blank" rel="noopener">StackOverflow</a></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"C:\Program Files (x86)\Atlassian\SourceTree\tools\putty\plink.exe" gitlab.com</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> SourceTree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows Batch 用法]]></title>
      <url>/2017/01/17/batch-usage/</url>
      <content type="html"><![CDATA[<h4 id="当前脚本目录"><a href="#当前脚本目录" class="headerlink" title="当前脚本目录"></a>当前脚本目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash">~dp0</span></span><br></pre></td></tr></table></figure>
<h4 id="当前目录"><a href="#当前目录" class="headerlink" title="当前目录"></a>当前目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for %%* in (.) do set CurrentDirName=%%~nx*</span><br></pre></td></tr></table></figure>
<h4 id="当前目录（不带斜线-）"><a href="#当前目录（不带斜线-）" class="headerlink" title="当前目录（不带斜线 ）"></a>当前目录（不带斜线 ）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SET mypath=%~dp0</span><br><span class="line">echo %mypath:~0,-1%</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> windows </category>
            
        </categories>
        
        
        <tags>
            
            <tag> windows </tag>
            
            <tag> bat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 vs2015 编译 OpenSSL]]></title>
      <url>/2017/01/16/build-openssl-with-vs2015/</url>
      <content type="html"><![CDATA[<h3 id="OpenSSL-版本"><a href="#OpenSSL-版本" class="headerlink" title="OpenSSL 版本"></a>OpenSSL 版本</h3><p>openssl-1.0.2j</p>
<h3 id="必需的工具"><a href="#必需的工具" class="headerlink" title="必需的工具"></a>必需的工具</h3><ul>
<li>Visual Studio 2015</li>
<li>ActivePerl</li>
<li>Nasm (The Netwide Assembler)</li>
</ul>
<p>nasm 需要根据需要下载32位或64位版本：</p>
<ul>
<li><a href="http://www.nasm.us/pub/nasm/releasebuilds/2.12.02/win32/" target="_blank" rel="noopener">32位</a></li>
<li><a href="http://www.nasm.us/pub/nasm/releasebuilds/2.12.02/win64/" target="_blank" rel="noopener">64位</a></li>
</ul>
<h3 id="编译32位版本"><a href="#编译32位版本" class="headerlink" title="编译32位版本"></a>编译32位版本</h3><h4 id="1-初始化命令行环境"><a href="#1-初始化命令行环境" class="headerlink" title="1. 初始化命令行环境"></a>1. 初始化命令行环境</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cd C:\build\src\openssl-1.0.2j</span><br><span class="line"></span><br><span class="line">set PATH=%PATH%;C:\nasm</span><br><span class="line"></span><br><span class="line">"C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat"</span><br></pre></td></tr></table></figure>
<h4 id="2-初始化编译配置"><a href="#2-初始化编译配置" class="headerlink" title="2. 初始化编译配置"></a>2. 初始化编译配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">perl Configure VC-WIN32 no-asm</span><br><span class="line"></span><br><span class="line">ms\do_nasm</span><br></pre></td></tr></table></figure>
<h4 id="3-编译"><a href="#3-编译" class="headerlink" title="3. 编译"></a>3. 编译</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 静态库</span><br><span class="line">nmake /f ms\nt.mak</span><br><span class="line">nmake /f ms\nt.mak test</span><br><span class="line">nmake /f ms\nt.mak install</span><br><span class="line"></span><br><span class="line">// 动态库</span><br><span class="line">nmake -f ms\ntdll.mak</span><br><span class="line">nmake -f ms\ntdll.mak install</span><br></pre></td></tr></table></figure>
<h3 id="编译64位版本"><a href="#编译64位版本" class="headerlink" title="编译64位版本"></a>编译64位版本</h3><h4 id="1-初始化命令行环境-1"><a href="#1-初始化命令行环境-1" class="headerlink" title="1. 初始化命令行环境"></a>1. 初始化命令行环境</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cd C:\build\src\openssl-1.0.2j</span><br><span class="line"></span><br><span class="line">set PATH=%PATH%;C:\nasm</span><br><span class="line"></span><br><span class="line">"C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" amd64</span><br></pre></td></tr></table></figure>
<h4 id="2-初始化编译配置-1"><a href="#2-初始化编译配置-1" class="headerlink" title="2. 初始化编译配置"></a>2. 初始化编译配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">perl Configure VC-WIN64A no-asm</span><br><span class="line"></span><br><span class="line">ms\do_win64a</span><br></pre></td></tr></table></figure>
<h4 id="3-编译-1"><a href="#3-编译-1" class="headerlink" title="3. 编译"></a>3. 编译</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 静态库</span><br><span class="line">nmake /f ms\nt.mak</span><br><span class="line">nmake /f ms\nt.mak test</span><br><span class="line">nmake /f ms\nt.mak install</span><br><span class="line"></span><br><span class="line">// 动态库</span><br><span class="line">nmake -f ms\ntdll.mak</span><br><span class="line">nmake -f ms\ntdll.mak install</span><br></pre></td></tr></table></figure>
<h3 id="遇到的错误"><a href="#遇到的错误" class="headerlink" title="遇到的错误"></a>遇到的错误</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Assembling: tmp32\sha1-586.asm</span><br><span class="line">tmp32\sha1-586.asm(1427) : error A2070: invalid instruction operands</span><br><span class="line">tmp32\sha1-586.asm(1571) : error A2070: invalid instruction operands</span><br><span class="line">NMAKE : fatal error U1077: 'ml' : return code '0x1'</span><br><span class="line">Stop.</span><br></pre></td></tr></table></figure>
<p>解决： <code>perl Configure VC-WIN32 no-asm</code> 加上 no-asm</p>
]]></content>
      
        <categories>
            
            <category> openssl </category>
            
        </categories>
        
        
        <tags>
            
            <tag> openssl </tag>
            
            <tag> vs2015 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于证书类型]]></title>
      <url>/2016/12/20/about-cert-type/</url>
      <content type="html"><![CDATA[<h3 id="证书的编码（encoding）分类"><a href="#证书的编码（encoding）分类" class="headerlink" title="证书的编码（encoding）分类"></a>证书的编码（encoding）分类</h3><p>首先，ASN.1 定义了几个编码格式，成为了 <a href="https://en.wikipedia.org/wiki/X.690#DER_encoding" target="_blank" rel="noopener">X.690</a> 标准，它们是：</p>
<ul>
<li>Basic Encoding Rules (BER)</li>
<li>Canonical Encoding Rules (CER)</li>
<li>Distinguished Encoding Rules (DER)</li>
</ul>
<p>然后证书采用了 DER 作为 <strong>二进制</strong> 编码格式；但是为了便于阅读和传送，也可以将二进制转换为 base64 形式，又引入了 PEM 格式，如下所示：</p>
<ul>
<li>Privacy-enhanced Electronic Mail (PEM) ：将 DER 的做 base64 编码，并在开头和结尾加入标识：<code>&quot;-----BEGIN CERTIFICATE-----&quot;</code> 和 <code>&quot;-----END CERTIFICATE-----&quot;</code></li>
</ul>
<h3 id="证书的存储格式"><a href="#证书的存储格式" class="headerlink" title="证书的存储格式"></a>证书的存储格式</h3><ul>
<li>.pem</li>
<li>.cer, .crt, .der</li>
<li>.p7b, .p7c</li>
<li>.p12</li>
<li>.pfx</li>
<li>.key</li>
</ul>
<h4 id="pem"><a href="#pem" class="headerlink" title=".pem"></a>.pem</h4><p>存储的是 base64 格式，也就是 PEM 格式</p>
<h4 id="cer-crt-der"><a href="#cer-crt-der" class="headerlink" title=".cer, .crt, .der"></a>.cer, .crt, .der</h4><p>通常存储的是 DER 编码的二进制格式</p>
<h4 id="p7b-p7c"><a href="#p7b-p7c" class="headerlink" title=".p7b, .p7c"></a>.p7b, .p7c</h4><p>不包含数据的 PKCS#7 签名格式, 只包含证书或CRL<br>开头和结尾是：<code>&quot;-----BEGIN PKCS7-----&quot;</code> 和 <code>&quot;-----END PKCS7-----&quot;</code></p>
<h4 id="pfx"><a href="#pfx" class="headerlink" title=".pfx"></a>.pfx</h4><p>personal information exchange (PFX) 也是 PKCS#12 格式，这是微软提出的格式</p>
<h4 id="p12"><a href="#p12" class="headerlink" title=".p12"></a>.p12</h4><p>PKCS#12 格式，包含了证书和私钥，私钥有密码保护，Netscape 提出的格式</p>
<h4 id="key"><a href="#key" class="headerlink" title=".key"></a>.key</h4><p>用于 PKCS#8 的公钥或私钥，编码支持 DER 或 PEM 2种格式</p>
<h3 id="查看证书"><a href="#查看证书" class="headerlink" title="查看证书"></a>查看证书</h3><h4 id="查看-DER-证书"><a href="#查看-DER-证书" class="headerlink" title="查看 DER 证书"></a>查看 DER 证书</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -in certificate.der -inform der -text -noout</span><br></pre></td></tr></table></figure>
<h4 id="查看-PEM-证书"><a href="#查看-PEM-证书" class="headerlink" title="查看 PEM 证书"></a>查看 PEM 证书</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -in cert.pem -text -noout</span><br><span class="line">openssl x509 -in cert.cer -text -noout</span><br><span class="line">openssl x509 -in cert.crt -text -noout</span><br></pre></td></tr></table></figure>
<h3 id="编码转换"><a href="#编码转换" class="headerlink" title="编码转换"></a>编码转换</h3><h4 id="DER-gt-PEM"><a href="#DER-gt-PEM" class="headerlink" title="DER -&gt; PEM"></a>DER -&gt; PEM</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -in cert.crt -inform der -outform pem -out cert.pem</span><br></pre></td></tr></table></figure>
<h4 id="PEM-gt-DER"><a href="#PEM-gt-DER" class="headerlink" title="PEM -&gt; DER"></a>PEM -&gt; DER</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -in cert.crt -outform der -out cert.der</span><br></pre></td></tr></table></figure>
<h4 id="PEM-gt-P7B"><a href="#PEM-gt-P7B" class="headerlink" title="PEM -&gt; P7B"></a>PEM -&gt; P7B</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl crl2pkcs7 -nocrl -certfile certificate.cer -out certificate.p7b -certfile CACert.cer</span><br></pre></td></tr></table></figure>
<h4 id="PEM-gt-PFX"><a href="#PEM-gt-PFX" class="headerlink" title="PEM -&gt; PFX"></a>PEM -&gt; PFX</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -export -out certificate.pfx -inkey privateKey.key -in certificate.crt -certfile CACert.crt</span><br></pre></td></tr></table></figure>
<h4 id="PFX-gt-PEM"><a href="#PFX-gt-PEM" class="headerlink" title="PFX -&gt; PEM"></a>PFX -&gt; PEM</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -in certificate.pfx -out certificate.cer -nodes</span><br></pre></td></tr></table></figure>
<h4 id="P7B-gt-PEM"><a href="#P7B-gt-PEM" class="headerlink" title="P7B -&gt; PEM"></a>P7B -&gt; PEM</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs7 -print_certs -in certificate.p7b -out certificate.cer</span><br></pre></td></tr></table></figure>
<h4 id="P7B-gt-PFX"><a href="#P7B-gt-PFX" class="headerlink" title="P7B -&gt; PFX"></a>P7B -&gt; PFX</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs7 -print_certs -in certificate.p7b -out certificate.cer</span><br><span class="line"></span><br><span class="line">openssl pkcs12 -export -in certificate.cer -inkey privateKey.key -out certificate.pfx -certfile CACert.cer</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> crypto </category>
            
        </categories>
        
        
        <tags>
            
            <tag> crypto </tag>
            
            <tag> cert </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS6 安装 nginx, MySQL, PHP]]></title>
      <url>/2016/08/28/install-nmp-on-centos6/</url>
      <content type="html"><![CDATA[<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote>
<p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-on-centos-6" target="_blank" rel="noopener">How To Install Linux, nginx, MySQL, PHP (LEMP) stack on CentOS 6</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> cenos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL升级到5.7]]></title>
      <url>/2016/08/28/upgrade-mysql/</url>
      <content type="html"><![CDATA[<p>Step 1: Uninstall MySQL Packages<br>First uninstall all the MySQL packages installed on your server</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> yum remove mysql mysql-server</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> yum list installed | grep mysql</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> yum remove mysql-client mysql-server mysql-common mysql-devel</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> rm -rf /var/lib/mysql/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> rm -rf /etc/my.cnf</span></span><br></pre></td></tr></table></figure>
<p>Step 2: Romove MySQL Directory<br>Now we need to remove MySQL data directory from system which by default exists at /var/lib/mysql. If you didn’t find this, It may be changed to some other place, which you can find in my.cnf file with variable datadir. Delete the /var/lib/mysql directory from system but we prefer to rename it to keep a backup of existing files.</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> mv /var/lib/mysql /var/lib/mysql_old_backup</span></span><br></pre></td></tr></table></figure>
<p>Step 3: Install MySQL Packages Again<br>After removing MySQL completely, install it again using yum package manager, It will re create mysql directory under /var/lib/.</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> yum install mysql mysql-server</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> mysql_upgrade -uroot -p</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> grep <span class="string">'temporary password'</span> /var/<span class="built_in">log</span>/mysqld.log</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> mysql_secure_installation</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> we can <span class="built_in">set</span> it <span class="keyword">in</span> my.cnf file</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> [mysqld]</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> validate_password_policy=LOW</span></span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote>
<p><a href="http://www.tecmint.com/install-latest-mysql-on-rhel-centos-and-fedora/" target="_blank" rel="noopener">How to Install Latest MySQL 5.7.9 on RHEL/CentOS 7/6/5 and Fedora</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> cenos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 查看磁盘空间使用]]></title>
      <url>/2016/08/18/view-disk-usage/</url>
      <content type="html"><![CDATA[<h3 id="df"><a href="#df" class="headerlink" title="df"></a>df</h3><h3 id="du"><a href="#du" class="headerlink" title="du"></a>du</h3><h3 id="fdisk"><a href="#fdisk" class="headerlink" title="fdisk"></a>fdisk</h3><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote>
<p><a href="http://os.51cto.com/art/201012/240726_all.htm" target="_blank" rel="noopener">df、du、fdisk：Linux磁盘管理三板斧的使用心得</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> command </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IntelliJ，Tomcat，Maven，Spring]]></title>
      <url>/2016/08/16/intellij-tomcat/</url>
      <content type="html"><![CDATA[<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="1）IntelliJ-部署目录是不是-Tomcat-webapps-目录？"><a href="#1）IntelliJ-部署目录是不是-Tomcat-webapps-目录？" class="headerlink" title="1）IntelliJ 部署目录是不是 Tomcat webapps 目录？"></a>1）IntelliJ 部署目录是不是 Tomcat webapps 目录？</h4><p>IntelliJ 默认发布到 <code>${dir.to.idea.project}\YourWebApp\out\artifacts</code>，而不是 Tomcat webapps 目录。但是可以通过配置，将配置文件发现到 Tomcat 目录：</p>
<p><img src="http://i.stack.imgur.com/yGOph.png" alt="配置发布tomcat"></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mac </tag>
            
            <tag> server </tag>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Supervisor 使用小结]]></title>
      <url>/2016/06/03/supervisor-usage/</url>
      <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>通过 pip 来安装</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> pip install supervisor</span></span><br></pre></td></tr></table></figure>
<p>如果还没有 pip，运行下面的命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> curl -O http://python-distribute.org/distribute_setup.py</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> python distribute_setup.py</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> sudo easy_install pip</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> sudo pip install supervisor</span></span><br></pre></td></tr></table></figure>
<p>在 Mac OS 下，还可能通过 homebrew 安装：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> brew install distribute</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> sudo easy_install pip</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> sudo pip install supervisor</span></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 创建配置文件</span></span></span><br><span class="line"></span><br><span class="line">一旦安装完成，运行 `echo_supervisord_conf` 将打印一个标准的配置模板，可将其保存到下列配置路径中：</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">/usr/local/share/etc/supervisord.conf</span><br><span class="line">/usr/local/share/supervisord.conf</span><br><span class="line">./supervisord.conf</span><br><span class="line">./etc/supervisord.conf</span><br><span class="line">/etc/supervisord.conf</span><br></pre></td></tr></table></figure>
<p>将标准配置输出到某个路径下的命令是：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> echo_supervisord_conf &gt; /etc/supervisord.conf</span></span><br></pre></td></tr></table></figure>
<h3 id="运行-supervisor"><a href="#运行-supervisor" class="headerlink" title="运行 supervisor"></a>运行 supervisor</h3><p>supervisor 提供了2个运行程序：守护程序 <code>supervisord</code> 和客户端程序 <code>supervisorctl</code>。守护程序在后台运行，管理其它进程；客户端程序用于操作supervisor。</p>
<p>启动守护进程：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> supervisord </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> supervisord -c /path/to/supervisord.conf    <span class="comment"># 或指定配置文件</span></span></span><br></pre></td></tr></table></figure>
<h4 id="Mac-OS-配置-launchd"><a href="#Mac-OS-配置-launchd" class="headerlink" title="Mac OS 配置 launchd"></a>Mac OS 配置 <code>launchd</code></h4><p>添加文件 <code>/Library/LaunchDaemons/com.agendaless.supervisord.plist</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=\<span class="string">"1.0\" encoding=\"UTF-8\"?&gt;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">\</span>"<span class="attr">1.0</span>\"&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>KeepAlive<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>SuccessfulExit<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.agendaless.supervisord<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>/usr/local/share/python/supervisord<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>-n<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>-c<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>/usr/local/share/supervisor/supervisord.conf<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>RunAtLoad<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注册 plist<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> launchctl load /Library/LaunchDaemons/com.agendaless.supervisord.plist</span></span><br></pre></td></tr></table></figure></p>
<h3 id="使用-supervisorctl"><a href="#使用-supervisorctl" class="headerlink" title="使用 supervisorctl"></a>使用 supervisorctl</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> supervisorctl -c /etc/supervisord.conf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> status    <span class="comment"># 查看程序状态</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> stop foo   <span class="comment"># 关闭 foo 程序</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> start foo  <span class="comment"># 启动 foo 程序</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> restart foo    <span class="comment"># 重启 foo 程序</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> reread    ＃ 读取有更新（增加）的配置文件，不会启动新添加的程序</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> update    ＃ 重启配置文件修改过的程序</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> tail foo stdout</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> tail -f foo</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> tail -f foo stderr</span></span><br></pre></td></tr></table></figure>
<p>通过命令行直接运行：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> sudo supervisorctl start foo</span></span><br></pre></td></tr></table></figure>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[unix_http_server]</span><br><span class="line">file=/tmp/supervisor.sock   ; UNIX socket 文件，supervisorctl 会使用</span><br><span class="line">;chmod=0700                 ; socket 文件的 mode，默认是 0700</span><br><span class="line">;chown=nobody:nogroup       ; socket 文件的 owner，格式： uid:gid</span><br><span class="line"></span><br><span class="line">[inet_http_server]         ; HTTP 服务器，提供 web 管理界面</span><br><span class="line">port=127.0.0.1:9001        ; Web 管理后台运行的 IP 和端口，如果开放到公网，需要注意安全性</span><br><span class="line">;username=user              ; 登录管理后台的用户名</span><br><span class="line">;password=123               ; 登录管理后台的密码</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile=/tmp/supervisord.log ; 日志文件，默认是 $CWD/supervisord.log</span><br><span class="line">logfile_maxbytes=50MB        ; 日志文件大小，超出会 rotate，默认 50MB</span><br><span class="line">logfile_backups=10           ; 日志文件保留备份数量默认 10</span><br><span class="line">loglevel=info                ; 日志级别，默认 info，其它: debug,warn,trace</span><br><span class="line">pidfile=/tmp/supervisord.pid ; pid 文件</span><br><span class="line">nodaemon=false               ; 是否在前台启动，默认是 false，即以 daemon 的方式启动</span><br><span class="line">minfds=1024                  ; 可以打开的文件描述符的最小值，默认 1024</span><br><span class="line">minprocs=200                 ; 可以打开的进程数的最小值，默认 200</span><br><span class="line"></span><br><span class="line">; the below section must remain in the config file for RPC</span><br><span class="line">; (supervisorctl/web interface) to work, additional interfaces may be</span><br><span class="line">; added by defining them in separate rpcinterface: sections</span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl=unix:///tmp/supervisor.sock ; 通过 UNIX socket 连接 supervisord，路径与 unix_http_server 部分的 file 一致</span><br><span class="line">;serverurl=http://127.0.0.1:9001 ; 通过 HTTP 的方式连接 supervisord</span><br><span class="line"></span><br><span class="line">; 包含其他的配置文件</span><br><span class="line">[include]</span><br><span class="line">files = relative/directory/*.ini    ; 可以是 *.conf 或 *.ini</span><br></pre></td></tr></table></figure>
<p>当更新配置文件后，重新启动守护进程：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisord -c /etc/supervisord.conf</span><br></pre></td></tr></table></figure>
<h3 id="常用程序"><a href="#常用程序" class="headerlink" title="常用程序"></a>常用程序</h3><h4 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[program:nginx]</span><br><span class="line">command=sudo /usr/local/sbin/nginx</span><br><span class="line">autostart=false</span><br><span class="line">autorestart=true</span><br></pre></td></tr></table></figure>
<h4 id="laravel-queue"><a href="#laravel-queue" class="headerlink" title="laravel queue"></a>laravel queue</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[program:laravel-worker]</span><br><span class="line">process_name=%(program_name)s_%(process_num)02d</span><br><span class="line">command=php /home/forge/app.com/artisan queue:work sqs --sleep=3 --tries=3 --daemon</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">user=forge</span><br><span class="line">numprocs=8</span><br><span class="line">redirect_stderr=true</span><br><span class="line">stdout_logfile=/home/forge/app.com/worker.log</span><br></pre></td></tr></table></figure>
<h3 id="可能遇到的问题："><a href="#可能遇到的问题：" class="headerlink" title="可能遇到的问题："></a>可能遇到的问题：</h3><h4 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h4><pre><code class="shell">* Starting Supervisor daemon manager...
Error: Another program is already listening on a port that one of our HTTP servers is configured to use.  Shut this program down first before starting supervisord.
For help, use /usr/bin/supervisord -h
   ...fail!
</code></pre>
<p>解决办法：<br>删除 supervisor.sock</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mac </tag>
            
            <tag> linux </tag>
            
            <tag> server </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP 使用小结]]></title>
      <url>/2016/05/28/php-common-usage/</url>
      <content type="html"><![CDATA[<h3 id="PHP-环境信息"><a href="#PHP-环境信息" class="headerlink" title="PHP 环境信息"></a>PHP 环境信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -i</span><br></pre></td></tr></table></figure>
<ul>
<li>查看配置文件位置：<code>php -i | grep php.ini</code></li>
<li>根据关键字查询配置：<code>php -i | grep memory</code></li>
</ul>
<p>### </p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> server </tag>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[COM 组件 AddRef/Release 用法]]></title>
      <url>/2016/05/24/com-addref-release-usage/</url>
      <content type="html"><![CDATA[<p><code>AddRef/Release</code> 是 COM 组件的垃圾回收机制。当请求一个接口时，调用<code>AddRef</code>增加引用计数；当使用完该接口时，调用<code>Release</code>减少计数，计数为0时，释放接口（释放接口对应的对象，内存如何操作？）。</p>
<h3 id="IUnknown"><a href="#IUnknown" class="headerlink" title="IUnknown"></a>IUnknown</h3><h3 id="QueryInterface-VS-QueryControl"><a href="#QueryInterface-VS-QueryControl" class="headerlink" title="QueryInterface VS QueryControl"></a>QueryInterface VS QueryControl</h3><h3 id="CoCreateInstance"><a href="#CoCreateInstance" class="headerlink" title="CoCreateInstance"></a>CoCreateInstance</h3><h3 id="CComQIPtr-VS-CComPtr"><a href="#CComQIPtr-VS-CComPtr" class="headerlink" title="CComQIPtr VS CComPtr"></a>CComQIPtr VS CComPtr</h3><p><em>附录</em>：</p>
<ul>
<li><a href="http://blog.csdn.net/yangshuangtao/article/details/51220110" target="_blank" rel="noopener">COM组件的AddRef和Release()方法使用</a>  </li>
<li><a href="https://support.microsoft.com/en-us/kb/104138" target="_blank" rel="noopener">Reference Counting Rules</a></li>
<li><a href="http://www.cnblogs.com/hibernate6/archive/2009/11/12/2522119.html" target="_blank" rel="noopener">COM :IUnknown接口QueryInterface函数介绍</a></li>
<li><a href="http://www.jellythink.com/archives/232" target="_blank" rel="noopener">COM编程——引用计数（1）</a></li>
<li><a href="http://www.jellythink.com/archives/242" target="_blank" rel="noopener">COM编程——引用计数（2）</a></li>
<li><a href="http://www.jellythink.com/archives/188" target="_blank" rel="noopener">COM编程——QueryInterface函数（1）</a></li>
<li><a href="http://www.jellythink.com/archives/198" target="_blank" rel="noopener">COM编程——QueryInterface函数（2）</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vc++ </tag>
            
            <tag> com </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Amazon EC2 启用 root 登录]]></title>
      <url>/2016/03/06/amazon-ec2-enable-root-login/</url>
      <content type="html"><![CDATA[<p>在亚马逊安装完 EC2 云主机实例，当使用 root 账号登录时，会收到下面的信息：</p>
<blockquote>
<p>“Please login as the user “centos” rather than the user “root”.” Then the connection will close.</p>
</blockquote>
<p>如果你想启用root账号 SSH 登录，可以按下面的步骤：</p>
<ul>
<li>第一步：先登录云主机</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ssh -i privateKey.pem  root@ip-address</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第二步：切换到 root 模式</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sudo -s</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第三步：修改密钥验证文件<br>打开 <code>authorized_keys</code>，删除从开头到 <code>sh-rsa</code> 之前的内容。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /root/.ssh/authorized_keys</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第四步：修改ssh配置文件</li>
</ul>
<p>打开 <code>sshd_config</code>，注释掉 <code>PermitRootLogin yes</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /etc/ssh/sshd_config</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第五步：重启 SSH 守护进程（demand）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl restart sshd</span></span><br></pre></td></tr></table></figure>
<p>现在，你可以重新以 root 用户登录实例了。</p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> server </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[安装 Composer]]></title>
      <url>/2016/03/05/install-composer-linux/</url>
      <content type="html"><![CDATA[<p>Composer 是一个 PHP 依赖管理程序。可以按照下面的步骤以全局方式安装到 Linux 系统。</p>
<ul>
<li>第一步：下载 composer.phar</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp  </span><br><span class="line"></span><br><span class="line">curl -sS https://getcomposer.org/installer | php</span><br></pre></td></tr></table></figure>
<ul>
<li>第二步：移动到全局目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure>
<p>现在能够以全局方式在命令行中执行 <code>composer</code></p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> composer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript 编码常规]]></title>
      <url>/2015/07/03/javascript-code-conventions/</url>
      <content type="html"><![CDATA[<p>标题写成常规，非规范，是由于只要没有语法错误，如何写代码本身就是编码者的一个喜好而已，但是好的习惯有助于提高可读性，减少错误，尤其提高团队合作的效率。</p>
<p>下面内容搜集了业内顶级开发者的习惯，来源见底部附录。</p>
<h2 id="JavaScript-文件"><a href="#JavaScript-文件" class="headerlink" title="JavaScript 文件"></a>JavaScript 文件</h2><p>所有 javascript 文件根据依赖关系，按序放置在 <code>&lt;body&gt;</code> 结束标签前。<br>原因：  </p>
<ul>
<li>不会因为 javascript 文件的加载和解析延缓页面显示</li>
<li>防止标签在加载完成前被 js 代码调用。</li>
</ul>
<h2 id="缩进-Indentation"><a href="#缩进-Indentation" class="headerlink" title="缩进 Indentation"></a>缩进 Indentation</h2><ul>
<li>使用空格代替 <code>tab</code></li>
<li>缩进单位是2个空格</li>
</ul>
<h2 id="代码行"><a href="#代码行" class="headerlink" title="代码行"></a>代码行</h2><ul>
<li>每行不超过80字符</li>
<li>换行缩进8个空格</li>
</ul>
<h2 id="注释-Comment"><a href="#注释-Comment" class="headerlink" title="注释 Comment"></a>注释 Comment</h2><ul>
<li>尽量多地注释代码的思路、注意点等</li>
<li>修改代码时同步更新注释</li>
</ul>
<h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><ul>
<li>使用26大写和小写字母<code>(A .. Z, a .. z)</code>，10个数字<code>(0 .. 9)</code>，下划线<code>(_)</code>。不要使用 <code>$ (dollar sign)</code> 或 <code>\ (backslash)</code></li>
<li>首尾不使用下划线</li>
<li>变量或方法遵守驼峰（camelCase）规则</li>
<li>构造函数遵守大写驼峰规则</li>
<li>全局变量遵守全大写规则</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MESSAGE_TYPE_BROADCAST = <span class="number">0</span>,    <span class="comment">// 全局变量</span></span><br><span class="line">    MESSAGE_TYPE_PERSON = <span class="number">1</span>,</span><br><span class="line">    MESSAGE_TYPE_GROUP = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span>(<span class="params">messageType, message</span>)</span>&#123;    <span class="comment">// 方法名</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> httpStatus,</span><br><span class="line">        sendResult;     <span class="comment">// 变量</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// detect message target by message type</span></span><br><span class="line">    ... </span><br><span class="line">    </span><br><span class="line">    httpStatus = httpRequest(message);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// handle result</span></span><br><span class="line">    ...</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> sendResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="变量-Variable"><a href="#变量-Variable" class="headerlink" title="变量 Variable"></a>变量 Variable</h2><ul>
<li>所有变量在使用前声明，<code>var</code> 应该是 <code>Function</code> 第一行语句</li>
<li>变量及其注释单独一行</li>
<li><p>变量名遵守驼峰（camelCase）规则</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> currentEntry, <span class="comment">// currently selected table entry</span></span><br><span class="line">level,        <span class="comment">// indentation level</span></span><br><span class="line">size;         <span class="comment">// size of table</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="方法-Function"><a href="#方法-Function" class="headerlink" title="方法 Function"></a>方法 Function</h2><ul>
<li>方法名遵守驼峰（camelCase）规则</li>
<li><p>立即执行的方法使用小括号封装</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> collection = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> keys = [], values = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> at = keys.indexOf(key);</span><br><span class="line">            <span class="keyword">if</span> (at &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> values[at];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> at = keys.indexOf(key);</span><br><span class="line">            <span class="keyword">if</span> (at &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                at = keys.length;</span><br><span class="line">            &#125;</span><br><span class="line">            keys[at] = key;</span><br><span class="line">            values[at] = value;</span><br><span class="line">        &#125;,</span><br><span class="line">        remove: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> at = keys.indexOf(key);</span><br><span class="line">            <span class="keyword">if</span> (at &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                keys.splice(at, <span class="number">1</span>);</span><br><span class="line">                values.splice(at, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="格式示例"><a href="#格式示例" class="headerlink" title="格式示例"></a>格式示例</h2><h3 id="if-语句（Statement）"><a href="#if-语句（Statement）" class="headerlink" title="if 语句（Statement）"></a>if 语句（Statement）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (initialization; condition; update) &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (variable <span class="keyword">in</span> object) &#123;</span><br><span class="line">    <span class="keyword">if</span> (filter) &#123;</span><br><span class="line">        statements</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a>while 语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="do-语句"><a href="#do-语句" class="headerlink" title="do 语句"></a>do 语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125; <span class="keyword">while</span> (condition);</span><br></pre></td></tr></table></figure>
<p>Unlike the other compound statements, the do statement always ends with a ; (semicolon).</p>
<h3 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (expression) &#123;</span><br><span class="line"><span class="keyword">case</span> expression:</span><br><span class="line">    statements</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每一组必须有结束代码：<code>break, return, or throw</code></p>
<h3 id="try-语句"><a href="#try-语句" class="headerlink" title="try 语句"></a>try 语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">     statements</span><br><span class="line"> &#125; <span class="keyword">catch</span> (variable) &#123;</span><br><span class="line">     statements</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">     statements</span><br><span class="line"> &#125; <span class="keyword">catch</span> (variable) &#123;</span><br><span class="line">     statements</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">     statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句"></a>continue 语句</h3><p><strong>不要使用</strong></p>
<h3 id="with-语句"><a href="#with-语句" class="headerlink" title="with 语句"></a>with 语句</h3><p><strong>不要使用</strong></p>
<h3 id="eval-语句"><a href="#eval-语句" class="headerlink" title="eval 语句"></a>eval 语句</h3><p><strong>不要使用</strong></p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><em><a href="http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html" target="_blank" rel="noopener">Javascript编程风格</a></em><br><em><a href="http://javascript.crockford.com/code.html" target="_blank" rel="noopener">Code Conventions for the JavaScript Programming Language</a></em><br><em><a href="http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml" target="_blank" rel="noopener">Google JavaScript Style Guide</a></em></p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[php 编码常规]]></title>
      <url>/2015/07/03/php-code-conventions/</url>
      <content type="html"><![CDATA[<h2 id="MVC-框架命名规范"><a href="#MVC-框架命名规范" class="headerlink" title="MVC 框架命名规范"></a>MVC 框架命名规范</h2><h3 id="控制器（controller）"><a href="#控制器（controller）" class="headerlink" title="控制器（controller）"></a>控制器（controller）</h3><ul>
<li>类名遵守大写CamelCase，继承<code>RootController</code></li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">RootController</span>   // 类后缀为 <span class="title">Controller</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>Action名、变量名、方法名采用小写camelCase： </li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loginAction</span> <span class="params">()</span> </span>&#123;...&#125;    <span class="comment">// Action 后缀为 Action</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Action 名与 url 的映射关系： </li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">high-school -&gt; highSchoolAction</span><br></pre></td></tr></table></figure>
<h3 id="模型（model）"><a href="#模型（model）" class="headerlink" title="模型（model）"></a>模型（model）</h3><ul>
<li>类名遵守大写CamelCase，继承<code>RootModel</code></li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserModel</span> <span class="title">entends</span> <span class="title">RootModel</span>    //类后缀为 <span class="title">Model</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>类方法和变量遵守小写camelCase</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateScore</span> <span class="params">()</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>
<h3 id="视图（view）"><a href="#视图（view）" class="headerlink" title="视图（view）"></a>视图（view）</h3><ul>
<li>视图模板（tpl）文件路径</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">views/&lt;Controller&gt;/&lt;action&gt;.tpl.php</span><br></pre></td></tr></table></figure>
<ul>
<li>目录名对应 <code>Controller</code>，首字母大写</li>
<li>文件名对应 <code>action</code>，首字母小写</li>
</ul>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[url 编码常规]]></title>
      <url>/2015/07/03/url-code-conventions/</url>
      <content type="html"><![CDATA[<h2 id="MVC-框架支持的模式（Pattern）："><a href="#MVC-框架支持的模式（Pattern）：" class="headerlink" title="MVC 框架支持的模式（Pattern）："></a>MVC 框架支持的模式（Pattern）：</h2><ul>
<li>GET 模式： <code>fumujidi.com/index.php?controller=life&amp;action=books</code></li>
<li>Path Info 模式： <code>fumujidi.com/index.php/life/books.html</code></li>
<li>SEO 模式： <code>fumujidi.com/life/books.html</code><br>NODIR 模式： <code>fumujidi.com/life-books.html</code></li>
</ul>
<h2 id="我们使用："><a href="#我们使用：" class="headerlink" title="我们使用："></a>我们使用：</h2><ul>
<li><code>SEO</code> 模式</li>
<li>使用连字符规则，不使用大写</li>
<li>命名首选 <code>RESTful</code> 方式</li>
<li>每个尽量不要超过2个单词，多个单词使用 <code>hyphens（dash）</code> 格式 </li>
</ul>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> url </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[bower usage]]></title>
      <url>/2015/06/11/bower-usage/</url>
      <content type="html"><![CDATA[<h4 id="1-安装-nodejs"><a href="#1-安装-nodejs" class="headerlink" title="1. 安装 nodejs"></a>1. 安装 <code>nodejs</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew install nodejs</span></span><br></pre></td></tr></table></figure>
<p>NPM是node程序包管理器。它是捆绑在nodejs的安装程序上的，所以一旦你已经安装了node，NPM也就安装好了。</p>
<h4 id="2-安装-bower"><a href="#2-安装-bower" class="headerlink" title="2. 安装 bower"></a>2. 安装 <code>bower</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g bower</span></span><br></pre></td></tr></table></figure>
<h4 id="3-使用-bower-安装其它库"><a href="#3-使用-bower-安装其它库" class="headerlink" title="3. 使用 bower 安装其它库"></a>3. 使用 <code>bower</code> 安装其它库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bower install jquery</span></span><br></pre></td></tr></table></figure>
<p>NPM是node程序包管理器。它是捆绑在nodejs的安装程序上的，所以一旦你已经安装了node，NPM也就安装好了。</p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[osx配置xdebug]]></title>
      <url>/2015/06/04/osx-config-xdebug/</url>
      <content type="html"><![CDATA[<h2 id="一、xdebug-工作原理"><a href="#一、xdebug-工作原理" class="headerlink" title="一、xdebug 工作原理"></a>一、xdebug 工作原理</h2><p>引用 xdebug 的文档：<a href="http://xdebug.org/docs/remote" target="_blank" rel="noopener">Communication Set-up</a> </p>
<p>当远程调试时，xdebug 充当着客户端的角色，而 IDE 像是服务器，它会侦听调试端口，就是默认的9000，等待 xdebug 建立远程调试的连接。如下图所求：</p>
<p><img src="/images/posts/xdebug/dbgp-setup.gif" alt=""></p>
<ul>
<li>The IP of the server is 10.0.1.2 with HTTP on port 80</li>
<li>The IDE is on IP 10.0.1.42, so xdebug.remote_host is set to 10.0.1.42</li>
<li>The IDE listens on port 9000, so xdebug.remote_port is set to 9000</li>
<li>The HTTP request is started on the machine running the IDE</li>
<li>Xdebug connects to 10.0.1.42:9000</li>
<li>Debugging runs, HTTP Response provided</li>
</ul>
<p>当使用匿名IP时，是通过配置 xdebug.remote_connect_back，工作流程像下图所求：</p>
<p><img src="/images/posts/xdebug/dbgp-setup2.gif" alt=""></p>
<ul>
<li>The IP of the server is 10.0.1.2 with HTTP on port 80</li>
<li>The IDE is on an unknown IP, so xdebug.remote_connect_back is set to 1</li>
<li>The IDE listens on port 9000, so xdebug.remote_port is set to 9000</li>
<li>The HTTP request is made, Xdebug detects the IP addres from the HTTP headers</li>
<li>Xdebug connects to the detected IP (10.0.1.42) on port 9000</li>
<li>Debugging runs, HTTP Response provided</li>
</ul>
<p>当有了侦听端口的机制，那他们是如何配合起来工作的呢？</p>
<p>HTTP Debug Sessions</p>
<p>Xdebug 是依靠 cookies 来跟踪来自浏览器的请求. 工作流程是这样:</p>
<ol>
<li>使用GET或POST的请求参数：<code>XDEBUG_SESSION_START=name</code>， 当有请求参数时会忽略 <code>XDEBUG_SESSION</code> cookies 的值。</li>
<li>设置请求的cookies值 <code>XDEBUG_SESSION</code></li>
</ol>
<p>当xdebug检测到 <code>XDEBUG_SESSION_START</code> 或 <code>XDEBUG_SESSION</code>时，会尝试连接调用的客户端</p>
<p>当xdebug检测到 <code>XDEBUG_SESSION_STOP</code> 时，会终止调试。</p>
<h2 id="二、配置-xdebug"><a href="#二、配置-xdebug" class="headerlink" title="二、配置 xdebug"></a>二、配置 xdebug</h2><p>首先安装 xdebug 模块</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pecl install xdebug</span><br></pre></td></tr></table></figure>
<p>配置 <code>php.ini</code>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[xdebug]</span></span><br><span class="line"><span class="attr">zend_extension</span>=/usr/local/Cellar/php56/<span class="number">5.6</span>.<span class="number">8</span>/lib/php/extensions/<span class="literal">no</span>-debug-non-zts-<span class="number">20131226</span>/xdebug.so</span><br><span class="line">xdebug.remote_enable=1</span><br><span class="line">xdebug.remote_autostart=1 </span><br><span class="line">xdebug.remote_host=127.0.0.1</span><br><span class="line">xdebug.remote_port=9001</span><br><span class="line">xdebug.idekey = "PHPSTORM"</span><br></pre></td></tr></table></figure>
<p><em>如何知道配置成功了？</em></p>
<p>通过 <code>phpinfo()</code>，如何看到启动的模块中包含 xdebug 信息，且配置如上面所示，则表示成功了。</p>
<h2 id="四、配置IDE"><a href="#四、配置IDE" class="headerlink" title="四、配置IDE"></a>四、配置IDE</h2><p>这里使用 phpstrom。</p>
<ol>
<li><p>配置 phpstorm 的侦听端口：</p>
<p>  <img src="/images/posts/xdebug/phpstorm-debug-settings.png" alt=""></p>
</li>
<li><p>启动侦听端口</p>
<p> <img src="/images/posts/xdebug/phpstorm-bug-phone.png" alt=""></p>
</li>
<li><p>（可选）安装浏览器插件，设置idekey<br>如果你使用不同的IDE调试，每个IDE的key是不一样的，你可以通过安装浏览器插件，让它配置key并插入cookies，比如chrome插件xdebug helper</p>
<p> <img src="/images/posts/xdebug/xdebug-browser-extension.png" alt=""></p>
</li>
</ol>
<p><em>如何知道IDE配置成功了？</em></p>
<p>通过 terminal，执行 <code>sudo lsof -n -i4TCP:9001 | grep LISTEN</code>，如果看到IDE在侦听该端口，则表示成功了。</p>
<h2 id="五、开始调试"><a href="#五、开始调试" class="headerlink" title="五、开始调试"></a>五、开始调试</h2><p>设置断点，然后浏览器打开要调试的url。</p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> osx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[osx安装php扩展]]></title>
      <url>/2015/06/03/osx-install-php-extension/</url>
      <content type="html"><![CDATA[<h2 id="一、安装xcdoe命令行"><a href="#一、安装xcdoe命令行" class="headerlink" title="一、安装xcdoe命令行"></a>一、安装xcdoe命令行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure>
<h2 id="二、通过PECL来安装PHP扩展"><a href="#二、通过PECL来安装PHP扩展" class="headerlink" title="二、通过PECL来安装PHP扩展"></a>二、通过PECL来安装PHP扩展</h2><p>在 <code>/usr/lib/php</code> 目录下有个 <code>install-pear-nozlib.phar</code> 文件（怎么来的？），通过它首先安装 PECL 管理器</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo php install-pear-nozlib.phar</span><br></pre></td></tr></table></figure>
<h2 id="三、获取所需的扩展"><a href="#三、获取所需的扩展" class="headerlink" title="三、获取所需的扩展"></a>三、获取所需的扩展</h2><p>比如，我们安装 xdebug</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pecl install xdebug</span><br></pre></td></tr></table></figure>
<h2 id="四、更新-php-配置文件"><a href="#四、更新-php-配置文件" class="headerlink" title="四、更新 php 配置文件"></a>四、更新 php 配置文件</h2><p>打开 <code>php.ini</code>，配置新获取的扩展（略）</p>
]]></content>
      
        <categories>
            
            <category> chromium </category>
            
        </categories>
        
        
        <tags>
            
            <tag> osx </tag>
            
            <tag> extension </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[osx 常用命令]]></title>
      <url>/2015/06/02/osx-commans/</url>
      <content type="html"><![CDATA[<h2 id="一、网络"><a href="#一、网络" class="headerlink" title="一、网络"></a>一、网络</h2><h3 id="查看谁在侦听端口"><a href="#查看谁在侦听端口" class="headerlink" title="查看谁在侦听端口"></a>查看谁在侦听端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo lsof -n -i4TCP:<span class="variable">$PORT</span> | grep LISTEN</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://en.wikipedia.org/wiki/Lsof" target="_blank" rel="noopener">lsof</a> is a command meaning “list open files”, which is used in many Unix-like systems to report a list of all open files and the processes that opened them.</p>
</blockquote>
<h3 id="修改-Host"><a href="#修改-Host" class="headerlink" title="修改 Host"></a>修改 Host</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/hosts</span><br></pre></td></tr></table></figure>
<p>注意 <code>::1</code> 的写法：</p>
<blockquote>
<p>如果地址中出现连续的0，则可以用“::”号来压缩(称为零压缩)，进一步简化IP v6地址表示。例如，地址FE80:0:0:0:2AA:FF:FE9A:4CA2 可以压缩成FE80::2AA:FF:FE9A:4CA2；FF02:0:0:0:0:0:0:2 可以压缩成 FF02::2。零压缩只能用于压缩冒号十六进制地址中一个连续的16位块，不能压缩部分16位信息块，例如，不能将FF02:30:0:0:0:0:0:5 表示成 FF02:3::5。用 :: 表示0位的数量用(8-n)×16公式来计算，其中n为地址中的16位块的数量。例如，在地址FF02::2中，被压缩了96=(8-2)×16个0。零压缩只能在给定地址中使用一次，否则，就无法确定每个双冒号 (::)实例所表示的 0位数量。</p>
<p>特殊地址。IP v6中有两个特殊地址：</p>
<ul>
<li>未指定地址(0:0:0:0:0:0:0:0 或::)：仅用于指出某个地址不存在，它等价于 IP v4 未指定地址0.0.0.0。未指定地址通常作为源地址来验证暂定地址的惟一性，但不会用作目的地址。</li>
<li>环回地址(0:0:0:0:0:0:0:1或::1)：用来标识环回接口，允许节点自发自收，它等价于IP v4环回地址 127.0.0.1。</li>
</ul>
</blockquote>
<h3 id="统计代码行数"><a href="#统计代码行数" class="headerlink" title="统计代码行数"></a>统计代码行数</h3><ul>
<li>列出每个文件的行数</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">"*.m"</span> -or -name <span class="string">"*.h"</span> -or -name <span class="string">"*.xib"</span> -or -name <span class="string">"*.c"</span> |xargs wc -l</span><br></pre></td></tr></table></figure>
<ul>
<li>列出代码行数总和 </li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">"*.m"</span> -or -name <span class="string">"*.h"</span> -or -name <span class="string">"*.xib"</span> -or -name <span class="string">"*.c"</span> |xargs grep -v <span class="string">"^$"</span>|wc -l</span><br></pre></td></tr></table></figure>
<h3 id="查看正在运行的进程"><a href="#查看正在运行的进程" class="headerlink" title="查看正在运行的进程"></a>查看正在运行的进程</h3><ul>
<li>通过进程名查看</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep <span class="string">"Application Name"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>按 CPU 排序</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -o cpu</span><br></pre></td></tr></table></figure>
<ul>
<li>按内存使用排序</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -o rsize</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> osx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> osx </tag>
            
            <tag> command </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[创建 Chromium Extension Event]]></title>
      <url>/2015/05/23/chromium-create-extension-event/</url>
      <content type="html"><![CDATA[<h2 id="一、创建事件名"><a href="#一、创建事件名" class="headerlink" title="一、创建事件名"></a>一、创建事件名</h2><ul>
<li>打开 <code>chrome/browser/extensions/event_names.h</code></li>
</ul>
<p>添加</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> event_names &#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">+ <span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">char</span> kOnLoginByCertComplete[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>打开 <code>chrome/browser/extensions/event_names.cc</code></li>
</ul>
<p>添加</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> event_names &#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">+ <span class="keyword">const</span> <span class="keyword">char</span> kOnLoginByCertComplete[] = <span class="string">"wintrust.onLoginByCertComplete"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二、添加事件的描述"><a href="#二、添加事件的描述" class="headerlink" title="二、添加事件的描述"></a>二、添加事件的描述</h2><ul>
<li>打开 <code>chrome\common\extensions\api\wintrust.json</code></li>
</ul>
<p>添加</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">    <span class="string">"namespace"</span>: <span class="string">"wintrust"</span>,</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">+    <span class="string">"events"</span>: [&#123;</span><br><span class="line">+      <span class="string">"name"</span>: <span class="string">"onLoginByCertComplete"</span>,</span><br><span class="line">+      <span class="string">"description"</span>: <span class="string">"Fired when login vpn by cert."</span>,</span><br><span class="line">+      <span class="string">"type"</span>: <span class="string">"function"</span>,</span><br><span class="line">+      <span class="string">"parameters"</span>: [&#123;<span class="string">"name"</span>: <span class="string">"success"</span>, <span class="string">"type"</span>:<span class="string">"boolean"</span>&#125;]</span><br><span class="line">+    &#125;]</span><br><span class="line"></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>
<h2 id="三、添加触发扩展事件的事件"><a href="#三、添加触发扩展事件的事件" class="headerlink" title="三、添加触发扩展事件的事件"></a>三、添加触发扩展事件的事件</h2><ul>
<li>打开 <code>content\public\browser\notification_types.h</code></li>
</ul>
<p>添加</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> NotificationType &#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">+<span class="comment">// 证书登录的结果</span></span><br><span class="line">+NOTIFICATION_LOGIN_BY_CERT_COMPLETE,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="四、绑定第三步事件的回调"><a href="#四、绑定第三步事件的回调" class="headerlink" title="四、绑定第三步事件的回调"></a>四、绑定<strong>第三步</strong>事件的回调</h2><ul>
<li>打开 <code>chrome/browser/extensions/browser_event_router.cc</code></li>
</ul>
<p>添加绑定</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">BrowserEventRouter::BrowserEventRouter(Profile* profile)</span><br><span class="line">    : profile_(profile) &#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  registrar_.Add(<span class="keyword">this</span>,</span><br><span class="line">                 content::NOTIFICATION_LOGIN_BY_CERT_COMPLETE,</span><br><span class="line">                 content::Source&lt;Profile&gt;(profile_));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现回调</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> BrowserEventRouter::Observe(<span class="keyword">int</span> type,</span><br><span class="line">                                 <span class="keyword">const</span> content::NotificationSource&amp; source,</span><br><span class="line">                                 <span class="keyword">const</span> content::NotificationDetails&amp; details) &#123;</span><br><span class="line">  ...</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == content::NOTIFICATION_LOGIN_BY_CERT_COMPLETE) &#123;</span><br><span class="line">    scoped_ptr&lt;ListValue&gt; args(<span class="keyword">new</span> ListValue());</span><br><span class="line">    <span class="keyword">bool</span> value = *(content::Details&lt;<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&gt;(details).ptr()) == <span class="string">"true"</span>;</span><br><span class="line">    args-&gt;Append(Value::CreateBooleanValue(value));</span><br><span class="line">    DispatchEvent(profile_, events::kOnLoginByCertComplete, args.Pass(), EventRouter::USER_GESTURE_UNKNOWN);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    NOTREACHED();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="五、实现触发消息"><a href="#五、实现触发消息" class="headerlink" title="五、实现触发消息"></a>五、实现触发消息</h2><p>在某个合适和需要的位置以下列的代码触发 <code>NOTIFICATION_LOGIN_BY_CERT_COMPLETE</code> 事件</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+  <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">detail</span><span class="params">(<span class="string">"false"</span>)</span></span>;</span><br><span class="line">+  content::NotificationService::current()-&gt;Notify(</span><br><span class="line">+      content::NOTIFICATION_LOGIN_BY_CERT_COMPLETE,</span><br><span class="line">+      content::Source&lt;Profile&gt;(browser_-&gt;profile()),</span><br><span class="line">+      content::Details&lt;<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&gt;(&amp;detail));</span><br></pre></td></tr></table></figure>
<h2 id="六、测试新事件"><a href="#六、测试新事件" class="headerlink" title="六、测试新事件"></a>六、测试新事件</h2><ol>
<li><p>在扩展的 <code>manifest</code> 里首先声明对 <code>wintrust</code> 命名空间的权限</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="string">"permissions"</span>: [</span><br><span class="line">    <span class="string">"*://*/*"</span>,</span><br><span class="line">    <span class="string">"wintrust"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>绑定事件回调函数</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chrome.wintrust.onLoginByCertComplete.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">success</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Login result is: '</span>, success);  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li>触发<strong>第五步</strong>定义的条件，使事件发生。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> chromium </category>
            
        </categories>
        
        
        <tags>
            
            <tag> chromium </tag>
            
            <tag> extension </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[创建 Chromium Extension API]]></title>
      <url>/2015/05/22/chromium-create-extension-api/</url>
      <content type="html"><![CDATA[<h2 id="一、添加新接口描述文件"><a href="#一、添加新接口描述文件" class="headerlink" title="一、添加新接口描述文件"></a>一、添加新接口描述文件</h2><ol>
<li><p>新建描述文件</p>
<p> 创建 <code>chrome\common\extensions\api\wintrust.json</code></p>
<p> 添加接口描述代码：</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">// 获取浏览器模块目录</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"versionDirectory"</span>,</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"function"</span>,</span><br><span class="line">        <span class="string">"parameters"</span>: [&#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"function"</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"callback"</span>,</span><br><span class="line">            <span class="string">"parameters"</span>: [&#123;</span><br><span class="line">              <span class="string">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">              <span class="string">"name"</span>: <span class="string">"path"</span></span><br><span class="line">            &#125;]</span><br><span class="line">         &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加新文件到 <code>GYP</code></p>
<p> 打开 <code>src\chrome\common\extensions\api\api.gyp</code>, 添加：</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="string">'schema_files'</span>: [</span><br><span class="line">  ...</span><br><span class="line">+  # 新接口	  </span><br><span class="line">+  <span class="string">'wintrust.json'</span>,</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加新文件到 <code>grd</code> </p>
<p> 打开 <code>src\chrome\common\extensions_api_resources.grd</code>，添加</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">grit</span> <span class="attr">latest_public_release</span>=<span class="string">"0"</span> <span class="attr">current_release</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">outputs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">output</span> <span class="attr">filename</span>=<span class="string">"grit/extensions_api_resources.h"</span> <span class="attr">type</span>=<span class="string">"rc_header"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">emit</span> <span class="attr">emit_type</span>=<span class="string">'prepend'</span>&gt;</span><span class="tag">&lt;/<span class="name">emit</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">output</span> <span class="attr">filename</span>=<span class="string">"extensions_api_resources.pak"</span> <span class="attr">type</span>=<span class="string">"data_package"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">output</span> <span class="attr">filename</span>=<span class="string">"extensions_api_resources.rc"</span> <span class="attr">type</span>=<span class="string">"rc_all"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">outputs</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">release</span> <span class="attr">seq</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">	  ...</span><br><span class="line">      <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">"IDR_EXTENSION_API_JSON_WINTRUST"</span> <span class="attr">file</span>=<span class="string">"extensions\api\wintrust.json"</span> <span class="attr">type</span>=<span class="string">"BINDATA"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">release</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">grit</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="二、添加新接口头文件和实现"><a href="#二、添加新接口头文件和实现" class="headerlink" title="二、添加新接口头文件和实现"></a>二、添加新接口头文件和实现</h2><ol>
<li><p>新建头文件和实现文件</p>
<p> 创建 <code>src\chrome\browser\extensions\api\wintrust\wintrust_api.h</code> 和 <code>src\chrome\browser\extensions\api\wintrust\wintrust_api.cc</code></p>
</li>
<li><p>添加新文件到 <code>GYP</code></p>
<p> 打开 <code>src\chrome\chrome_browser_extensions.gypi</code>, 添加：</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'sources'</span>: [</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">   +   # win-trust 添加的插件接口</span><br><span class="line">   +    <span class="string">'browser/extensions/api/wintrust/wintrust_api.h'</span>,</span><br><span class="line">   +    <span class="string">'browser/extensions/api/wintrust/wintrust_api.cc'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现 <code>wintrust_api.h</code></p>
</li>
</ol>
<pre><code><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"chrome/browser/extensions/extension_function.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> extensions &#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">WintrustVersionDirectoryFunction</span> :</span> <span class="keyword">public</span> SyncExtensionFunction &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    WintrustVersionDirectoryFunction();</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">RunImpl</span><span class="params">()</span> OVERRIDE</span>;</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~WintrustVersionDirectoryFunction()&#123;&#125;;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    DECLARE_EXTENSION_FUNCTION(<span class="string">"wintrust.versionDirectory"</span>, WINTRUST_VERSIONDIRECTORY);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre><ol>
<li>实现 <code>wintrust_api.cc</code></li>
</ol>
<pre><code><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"chrome/browser/extensions/api/wintrust/wintrust_api.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"base/file_util.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"base/path_service.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"chrome/browser/profiles/profile.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> extensions&#123;</span><br><span class="line">  </span><br><span class="line">  WintrustVersionDirectoryFunction::WintrustVersionDirectoryFunction()&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">bool</span> WintrustVersionDirectoryFunction::RunImpl() &#123;</span><br><span class="line">    base::FilePath path;</span><br><span class="line">    PathService::Get(base::DIR_MODULE, &amp;path);</span><br><span class="line"></span><br><span class="line">    scoped_ptr&lt;base::StringValue&gt; value (base::Value::CreateStringValue(path.value().c_str()));</span><br><span class="line">    </span><br><span class="line">    SetResult(value.release());</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre><h2 id="三、重新生成项目（sln）"><a href="#三、重新生成项目（sln）" class="headerlink" title="三、重新生成项目（sln）"></a>三、重新生成项目（sln）</h2><p>执行 <code>python build\gyp_chromium</code></p>
<h2 id="四、为新接口定义C-常量"><a href="#四、为新接口定义C-常量" class="headerlink" title="四、为新接口定义C++常量"></a>四、为新接口定义C++常量</h2><ul>
<li>打开 <code>src\chrome\browser\extensions\extension_function_histogram_value.h</code></li>
</ul>
<p>添加下面代码, 转换示例： <code>Example: &quot;tabs.create&quot; -&gt; TABS_CREATE</code></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> HistogramValue &#123;</span><br><span class="line">  UNKNOWN = <span class="number">0</span>,</span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">+  <span class="comment">// 赢达信客户端添加的接口</span></span><br><span class="line">+  WINTRUST_VERSIONDIRECTORY,</span><br><span class="line"></span><br><span class="line">  ENUM_BOUNDARY <span class="comment">// Last entry: Add new entries above.</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="五、注册新接口类（class）"><a href="#五、注册新接口类（class）" class="headerlink" title="五、注册新接口类（class）"></a>五、注册新接口类（class）</h2><ul>
<li>打开 <code>src\chrome\browser\extensions\extension_function_registry.cc</code></li>
</ul>
<p>添加下面代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 赢达信客户端接口</span><br><span class="line">#include &quot;chrome/browser/extensions/api/wintrust/wintrust_api.h&quot;</span><br><span class="line"></span><br><span class="line">void ExtensionFunctionRegistry::ResetFunctions() &#123;</span><br><span class="line">#if defined(ENABLE_EXTENSIONS)</span><br><span class="line"></span><br><span class="line">  // Register all functions here.</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  // 赢达信客户端定义的接口</span><br><span class="line">  RegisterFunction&lt;extensions::WintrustVersionDirectoryFunction&gt;();</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  // Generated APIs</span><br><span class="line">  extensions::api::GeneratedFunctionRegistry::RegisterAll(this);</span><br><span class="line">  </span><br><span class="line">#endif  // defined(ENABLE_EXTENSIONS)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="六、定义新接口的访问权限"><a href="#六、定义新接口的访问权限" class="headerlink" title="六、定义新接口的访问权限"></a>六、定义新接口的访问权限</h2><ol>
<li><p>定义该接口可用于的扩展程序类型：</p>
<p> 打开 <code>src\chrome\common\extensions\api\_permission_features.json</code></p>
<p> 添加下面代码， <code>extension_types</code> 定义了哪些类型的扩展可以使用新接口。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright (c) 2012 The Chromium Authors. All rights reserved.</span></span><br><span class="line"><span class="comment">// Use of this source code is governed by a BSD-style license that can be</span></span><br><span class="line"><span class="comment">// found in the LICENSE file.</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">+  <span class="comment">// 赢达信的接口</span></span><br><span class="line">+   <span class="string">"wintrust"</span>: &#123;</span><br><span class="line">+    <span class="string">"channel"</span>: <span class="string">"stable"</span>,</span><br><span class="line">+    <span class="string">"extension_types"</span>: [<span class="string">"extension"</span>, <span class="string">"packaged_app"</span>,<span class="string">"platform_app"</span>,<span class="string">"hosted_app"</span>]</span><br><span class="line">+  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义权限的键名，该常量也显示到 <code>manifest permission</code> 中</p>
<p> 打开 <code>src\chrome\common\extensions\permissions\api_permission.h</code>，添加</p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> ID &#123;</span><br><span class="line">	<span class="comment">// Error codes.</span></span><br><span class="line">	kInvalid = <span class="number">-2</span>,</span><br><span class="line">	kUnknown = <span class="number">-1</span>,</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// Real permissions.</span></span><br><span class="line">	...</span><br><span class="line">+	kWintrust,</span><br><span class="line">	kEnumBoundary</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现该键名</p>
<p> 打开 <code>src\chrome\common\extensions\permissions\chrome_api_permissions.cc</code>，添加</p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;APIPermissionInfo*&gt; ChromeAPIPermissions::GetAllPermissions()</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">PermissionRegistration</span> &#123;</span></span><br><span class="line">	APIPermission::ID id;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">char</span>* name;</span><br><span class="line">	<span class="keyword">int</span> flags;</span><br><span class="line">	<span class="keyword">int</span> l10n_message_id;</span><br><span class="line">	PermissionMessage::ID message_id;</span><br><span class="line">	APIPermissionInfo::APIPermissionConstructor constructor;</span><br><span class="line">	&#125; PermissionsToRegister[] = &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// Register extension permissions.</span></span><br><span class="line">	...</span><br><span class="line">	&#123; APIPermission::kWintrust, <span class="string">"wintrust"</span> &#125;,</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="七、测试新接口"><a href="#七、测试新接口" class="headerlink" title="七、测试新接口"></a>七、测试新接口</h2><ol>
<li><p>创建扩展  <code>manifest</code> 文件</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"WinTrust API"</span>,</span><br><span class="line">  <span class="string">"manifest_version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.1"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"Test new extenslion api"</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="string">"browser_action"</span>: &#123;</span><br><span class="line">    <span class="string">"default_icon"</span>: &#123;                    </span><br><span class="line">      <span class="string">"19"</span>: <span class="string">"img/icon19.png"</span>,           </span><br><span class="line">      <span class="string">"38"</span>: <span class="string">"img/icon38.png"</span>            </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"default_title"</span>: <span class="string">"VPN"</span>, </span><br><span class="line">    <span class="string">"default_popup"</span>: <span class="string">"popup.html"</span>        </span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="string">"background"</span>: &#123;</span><br><span class="line">    <span class="string">"page"</span>: <span class="string">"background.html"</span></span><br><span class="line">  &#125;,  </span><br><span class="line">  </span><br><span class="line">  <span class="string">"permissions"</span>: [</span><br><span class="line">    <span class="string">"*://*/*"</span>,</span><br><span class="line">    <span class="string">"wintrust"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建扩展  <code>manifest</code> 文件</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chrome.wintrust.versionDirectory(<span class="function"><span class="keyword">function</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'Test reust:'</span>, path);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      
        <categories>
            
            <category> chromium </category>
            
        </categories>
        
        
        <tags>
            
            <tag> chromium </tag>
            
            <tag> extension </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac OS 安装 nginx, php, mysql]]></title>
      <url>/2015/05/07/mac-install-nginx-php-mysql/</url>
      <content type="html"><![CDATA[<h2 id="常用位置："><a href="#常用位置：" class="headerlink" title="常用位置："></a>常用位置：</h2><ol>
<li><p>nginx: </p>
<ul>
<li>安装位置：<code>/usr/local/Cellar/nginx</code></li>
<li>log: <code>/usr/local/var/log/nginx/error.log</code></li>
<li>配置位置：<code>/usr/local/etc/nginx</code></li>
<li>document root: <code>/var/www</code></li>
</ul>
</li>
<li><p>php</p>
<ul>
<li>安装位置：<code>/usr/local/Cellar/php56/5.6.8/</code></li>
<li>配置位置：<code>/usr/local/etc/php/5.6/php.ini</code></li>
</ul>
</li>
<li><p>mysql</p>
<ul>
<li>查看server信息：<code>mysqld --help --verbose</code></li>
<li>安装位置：<code>/usr/local/Cellar/mysql</code> </li>
</ul>
</li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>引用一篇非常详细的博客：<a href="http://blog.frd.mn/install-nginx-php-fpm-mysql-and-phpmyadmin-on-os-x-mavericks-using-homebrew/" target="_blank" rel="noopener">Install Nginx, PHP-FPM, MySQL and phpMyAdmin on OS X Mavericks or Yosemite</a></p>
<h3 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure>
<h3 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>
<p>Check for any conflicts or problems (If you have confilcts, sort them out before you continue with this guide):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew doctor</span><br></pre></td></tr></table></figure>
<p>Update and upgrade its formulas in case you already had Homebrew installed before:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update &amp;&amp; brew upgrade</span><br></pre></td></tr></table></figure>
<h3 id="PHP-FPM"><a href="#PHP-FPM" class="headerlink" title="PHP-FPM"></a>PHP-FPM</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap homebrew/dupes</span><br><span class="line">brew tap homebrew/php</span><br></pre></td></tr></table></figure>
<p>Now install it with the following arguments:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install --without-apache --with-fpm --with-mysql php56</span><br></pre></td></tr></table></figure>
<p>Setup PHP CLI binary</p>
<p>If you want to use the PHP command line binary, you need to update the $PATH environment variable of your shell profile:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># If you use Bash    </span><br><span class="line">echo &apos;export PATH=&quot;/usr/local/sbin:$PATH&quot;&apos; &gt;&gt; ~/.bash_profile</span><br><span class="line">. ~/.bash_profile</span><br><span class="line"></span><br><span class="line"># If you use ZSH</span><br><span class="line">echo &apos;export PATH=&quot;/usr/local/sbin:$PATH&quot;&apos; &gt;&gt; ~/.zshrc</span><br><span class="line">. ~/.zshrc</span><br></pre></td></tr></table></figure>
<p>Setup auto start</p>
<p>Create a folder for our LaunchAgents and symlink the start/stop service:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/Library/LaunchAgents</span><br><span class="line">ln -sfv /usr/local/opt/php56/homebrew.mxcl.php56.plist ~/Library/LaunchAgents/</span><br></pre></td></tr></table></figure>
<p>And start PHP-FPM:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.php56.plist</span><br></pre></td></tr></table></figure>
<p>Make sure PHP-FPM is listening on port 9000:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -Pni4 | grep LISTEN | grep php</span><br></pre></td></tr></table></figure>
<p>The output should look something like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php-fpm   69659  frdmn    6u  IPv4 0x8d8ebe505a1ae01      0t0  TCP 127.0.0.1:9000 (LISTEN)</span><br><span class="line">php-fpm   69660  frdmn    0u  IPv4 0x8d8ebe505a1ae01      0t0  TCP 127.0.0.1:9000 (LISTEN)</span><br><span class="line">php-fpm   69661  frdmn    0u  IPv4 0x8d8ebe505a1ae01      0t0  TCP 127.0.0.1:9000 (LISTEN)</span><br><span class="line">php-fpm   69662  frdmn    0u  IPv4 0x8d8ebe505a1ae01      0t0  TCP 127.0.0.1:9000 (LISTEN)</span><br></pre></td></tr></table></figure>
<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>Next step is to install MySQL:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install mysql</span><br></pre></td></tr></table></figure>
<p>Setup auto start</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -sfv /usr/local/opt/mysql/*.plist ~/Library/LaunchAgents</span><br></pre></td></tr></table></figure>
<p>And start the database server:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>
<p>Test connection</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>
<h3 id="phpMyAdmin"><a href="#phpMyAdmin" class="headerlink" title="phpMyAdmin"></a>phpMyAdmin</h3><p>Install autoconf, which is needed for the installation of phpMyAdmin:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install autoconf</span><br></pre></td></tr></table></figure>
<p>Set $PHP_AUTOCONF:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># If you use Bash</span><br><span class="line">echo &apos;PHP_AUTOCONF=&quot;&apos;$(which autoconf)&apos;&quot;&apos; &gt;&gt; ~/.bash_profile &amp;&amp; . ~/.bash_profile</span><br><span class="line"># If you use ZSH</span><br><span class="line">echo &apos;PHP_AUTOCONF=&quot;&apos;$(which autoconf)&apos;&quot;&apos; &gt;&gt; ~/.zshrc &amp;&amp; . ~/.zshrc</span><br></pre></td></tr></table></figure>
<p>Let’s start with the installation of phpMyAdmin:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install phpmyadmin</span><br></pre></td></tr></table></figure>
<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>Install the default Nginx with:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure>
<p>Setup auto start</p>
<p>Since we want to use port 80 have to start the Nginx process as root:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -v /usr/local/opt/nginx/*.plist /Library/LaunchDaemons/</span><br><span class="line">sudo chown root:wheel /Library/LaunchDaemons/homebrew.mxcl.nginx.plist</span><br></pre></td></tr></table></figure>
<p>Test web server</p>
<p>Start Nginx for the first with:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo launchctl load /Library/LaunchDaemons/homebrew.mxcl.nginx.plist</span><br></pre></td></tr></table></figure>
<p>Stop Nginx again:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo launchctl unload /Library/LaunchDaemons/homebrew.mxcl.nginx.plist</span><br></pre></td></tr></table></figure>
<p>Make alias:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">alias nginx.start=&apos;sudo launchctl load /Library/LaunchDaemons/homebrew.mxcl.nginx.plist&apos;</span><br><span class="line">alias nginx.stop=&apos;sudo launchctl unload /Library/LaunchDaemons/homebrew.mxcl.nginx.plist&apos;</span><br><span class="line">alias nginx.restart=&apos;nginx.stop &amp;&amp; nginx.start&apos;</span><br><span class="line">alias php-fpm.start=&quot;launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.php56.plist&quot;</span><br><span class="line">alias php-fpm.stop=&quot;launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.php56.plist&quot;</span><br><span class="line">alias php-fpm.restart=&apos;php-fpm.stop &amp;&amp; php-fpm.start&apos;</span><br><span class="line">alias mysql.start=&quot;launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist&quot;</span><br><span class="line">alias mysql.stop=&quot;launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist&quot;</span><br><span class="line">alias mysql.restart=&apos;mysql.stop &amp;&amp; mysql.start&apos;</span><br><span class="line">alias nginx.logs.error=&apos;tail -250f /usr/local/etc/nginx/logs/error.log&apos;</span><br><span class="line">alias nginx.logs.access=&apos;tail -250f /usr/local/etc/nginx/logs/access.log&apos;</span><br><span class="line">alias nginx.logs.default.access=&apos;tail -250f /usr/local/etc/nginx/logs/default.access.log&apos;</span><br><span class="line">alias nginx.logs.default-ssl.access=&apos;tail -250f /usr/local/etc/nginx/logs/default-ssl.access.log&apos;</span><br><span class="line">alias nginx.logs.phpmyadmin.error=&apos;tail -250f /usr/local/etc/nginx/logs/phpmyadmin.error.log&apos;</span><br><span class="line">alias nginx.logs.phpmyadmin.access=&apos;tail -250f /usr/local/etc/nginx/logs/phpmyadmin.access.log&apos;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> mac </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mac </tag>
            
            <tag> php </tag>
            
            <tag> nginx </tag>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[发布到 App Store]]></title>
      <url>/2015/02/15/deliver-to-app-store/</url>
      <content type="html"><![CDATA[<h2 id="一-一些名词"><a href="#一-一些名词" class="headerlink" title="一 一些名词"></a>一 一些名词</h2><h3 id="App-ID：应用的标识"><a href="#App-ID：应用的标识" class="headerlink" title="App ID：应用的标识"></a>App ID：应用的标识</h3><ul>
<li><p>格式：上由2部分组成： <code>&lt;Bundle Seed ID&gt;.&lt;Bundle Identifier&gt;</code>，例如，<code>ABCDE12345.com.foocompany.appname</code>:</p>
<ul>
<li><code>ABCDE12345</code> 是 Bundle Seed ID (苹果生成)</li>
<li><code>com.foocompany.appname</code> is the App ID’s Bundle Identifier and needs to be the same as your app’s Bundle Identifier</li>
</ul>
</li>
<li><p>分类： 通配符方式（wildcard） VS 显示定义（explicit）</p>
<ul>
<li>通配符方式： 一般的ID都应该用此方式，理由是一个 Wildcard App ID 可用于编译和安装多个 App。注意星要放到最后<br><code>Example App ID: ABCDE12345.com.foocompany.*</code></li>
<li>显示定义：只能用于一个 App，但是，如果你的应用需要诸如 In App Purchase and Apple Push Notification service 的功能，你就必须使用显示定义<br><code>Example App ID: ABCDE12345.com.foocompany.appname</code></li>
</ul>
</li>
</ul>
<p>扩展阅读：<a href="https://developer.apple.com/library/ios/qa/qa1713/_index.html" target="_blank" rel="noopener">Q:  When should I use a wildcard App ID vs. an explicit App ID?</a> </p>
<ul>
<li><a href="https://developer.apple.com/library/mac/documentation/IDEs/Conceptual/AppStoreDistributionTutorial/CreatingYourTeamProvisioningProfile/CreatingYourTeamProvisioningProfile.html#//apple_ref/doc/uid/TP40013839-CH33-SW1" target="_blank" rel="noopener">Provisioning profile</a>：配置文件</li>
</ul>
<p>开始 ios 开发时，最大的不适就是复杂的测试发布限制，你不能简单的编译个 app 放到任一设备中运行。比如符合 Provisioning profile 的设定。A picture worth a thousand words，先看下面的图：</p>
<p><img src="/images/posts/itunes_connect/teamprovisioningprofile_2x.png" alt=""></p>
<p>一个 Provisioning profile 设置了 APP ID，证书和设备。当你使用某个 Provisioning profile 签名应用时，其实是使用它包含的证书来签名，并且签证对应的 APP ID，并只允许安装到被包含其中的设备中。</p>
<h3 id="Certification：证书"><a href="#Certification：证书" class="headerlink" title="Certification：证书"></a>Certification：证书</h3><p><img src="/images/posts/itunes_connect/certificates_2x.png" alt=""></p>
<p>如上图所示，证书的公钥保存在苹果的用户中心，公私钥对保存到开发者 keychain 中。你必须有私钥才可以签名应用。</p>
<ul>
<li>Development certification：开发证书</li>
<li>Adhoc certification：真机部署测试证书</li>
<li>Distribution certification：发布证书 </li>
</ul>
<h3 id="Deployment-Target：部署目标"><a href="#Deployment-Target：部署目标" class="headerlink" title="Deployment Target：部署目标"></a>Deployment Target：部署目标</h3><p>面向的 ios 版本</p>
<h3 id="iTunes-Connect"><a href="#iTunes-Connect" class="headerlink" title="iTunes Connect"></a>iTunes Connect</h3><p>This is the version number shown in the App Store; This must be a pure version number like1.2.3</p>
<h3 id="Bundle-Version-CFBundleVersion"><a href="#Bundle-Version-CFBundleVersion" class="headerlink" title="Bundle Version (CFBundleVersion)"></a>Bundle Version (CFBundleVersion)</h3><p>This doesn’t need to be a pure version number. This can be something like 12345 or 1.2.3 (Build 12345AB). This is shown in the About window for Mac OS X apps for example and is often more a “Build Number” than a “Version Number”. 真实版本号，用来判断版本信息的。</p>
<h3 id="Bundle-Version-String-CFBundleShortVersionString"><a href="#Bundle-Version-String-CFBundleShortVersionString" class="headerlink" title="Bundle Version String (CFBundleShortVersionString)"></a>Bundle Version String (CFBundleShortVersionString)</h3><p>This value is used as the “real” version number. This must be the same string as used for the version in iTunes Connect. 面向用户市场的束的版本字符串–用户看到的版本号；</p>
<h2 id="二-流程"><a href="#二-流程" class="headerlink" title="二 流程"></a>二 流程</h2><h3 id="下载安装证书"><a href="#下载安装证书" class="headerlink" title="下载安装证书"></a>下载安装证书</h3><h3 id="配置编译参数"><a href="#配置编译参数" class="headerlink" title="配置编译参数"></a>配置编译参数</h3><ul>
<li>设置 Deployment Target (部署目标)<br>  首选最新的 IOS 版本作为发布版本</li>
</ul>
<h3 id="填写-iTunes-Connect-信息"><a href="#填写-iTunes-Connect-信息" class="headerlink" title="填写 iTunes Connect 信息"></a>填写 iTunes Connect 信息</h3><p>打开<a href="https://itunesconnect.apple.com" target="_blank" rel="noopener">iTunes Connect</a>，填表：  </p>
<ol>
<li><p>第一组：</p>
<ul>
<li>选择语言</li>
<li>应用名称</li>
<li>skunumber：一个用来识别app的特殊字符串。</li>
<li>bundleID</li>
</ul>
</li>
<li><p>第二组</p>
<ul>
<li>版本</li>
<li>版权</li>
<li>软件首类别</li>
<li>次类别</li>
<li>评级划分</li>
<li>内容描述</li>
<li>关键字</li>
<li>技术支持url，以及下面的技术负责人的名字，姓，email，手机号码</li>
</ul>
</li>
</ol>
<p>填写完成后如下图所示：<br><img src="/images/posts/itunes_connect/itunes_connect.png" alt=""></p>
<h3 id="上传安装包"><a href="#上传安装包" class="headerlink" title="上传安装包"></a>上传安装包</h3><h4 id="使用-xcode-直接上传："><a href="#使用-xcode-直接上传：" class="headerlink" title="使用 xcode 直接上传："></a>使用 xcode 直接上传：</h4><ol>
<li>检查代码，去除 log，debug 等相关的信息</li>
<li>清理项目（clean project）</li>
<li>生成包文件（archive）</li>
<li>发送包文件（submit）</li>
<li>选择发布证书（注意要使用 Agent 账号上传）</li>
<li>发布成功</li>
</ol>
<h4 id="使用-application-loader-上传"><a href="#使用-application-loader-上传" class="headerlink" title="使用 application loader 上传"></a>使用 application loader 上传</h4><p>以后补充</p>
<h3 id="itunes-connect-关联上传的包文件"><a href="#itunes-connect-关联上传的包文件" class="headerlink" title="itunes connect 关联上传的包文件"></a>itunes connect 关联上传的包文件</h3><p>上传成功之后，在 Build 分类下，可以关联此包。</p>
<h3 id="提交审核（submit-for-review）"><a href="#提交审核（submit-for-review）" class="headerlink" title="提交审核（submit for review）"></a>提交审核（submit for review）</h3><p>以后补充</p>
]]></content>
      
        <categories>
            
            <category> ios </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ios </tag>
            
            <tag> app </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Grit - Chromium 国际化（2）]]></title>
      <url>/2015/01/31/chromium-grit-2/</url>
      <content type="html"><![CDATA[<p>经过上一篇的分析，虽然对工作原理有了简单认识，但实际修改或添加支持多语言的文本还是蛮麻烦。所以这里提供一个小工具，简化这个流程。</p>
<p>下面说一下工具的使用：</p>
<h3 id="1-准备修改前的文件"><a href="#1-准备修改前的文件" class="headerlink" title="1. 准备修改前的文件"></a>1. 准备修改前的文件</h3><ul>
<li><p>修改前的默认语言文件（grd）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chromium_strings.grd</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改前的翻译文件（xtb）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chromium_strings_zh-CN.xtb</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>将2个文件放到工具的 <code>old</code> 目录中。 </p>
<blockquote>
<p>注意如果有的 grd 文件中引用了其它资源，需要将这些资源一并放到 <code>old</code> 目录中</p>
</blockquote>
<h3 id="2-准备新的默认语言文件（grd）"><a href="#2-准备新的默认语言文件（grd）" class="headerlink" title="2. 准备新的默认语言文件（grd）"></a>2. 准备新的默认语言文件（grd）</h3><p>根据需要，修改旧的默认语言文件，最好将新加的文本放到文档的最后，以便和 chromium 原有的文本作区分。修改完成后的将文件放到 <code>new</code> 目录中。 这里，我将修改好的 <code>chromium_strings.grd</code> 放置到 <code>new</code> 目录。</p>
<blockquote>
<p>注意如果有的 grd 文件中引用了其它资源，需要将这些资源一并放到 <code>old</code> 目录中</p>
</blockquote>
<h3 id="3-执行"><a href="#3-执行" class="headerlink" title="3. 执行"></a>3. 执行</h3><p>准备好的目录结构：</p>
<p><img src="/images/posts/grit/grit-tool-structure.jpg" alt=""></p>
<p>运行根目录的 <code>run.bat</code>，它会根据上面的三个文件生成新的翻译文件 <code>xtb</code>。</p>
<p><em>run.bat</em></p>
<figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> handling chromium_strings.grd...</span><br><span class="line">python3 "generate_translation_bundle.py" "--old_grd" "old/chromium_strings.grd" "--old_xtb" "old/chromium_strings_zh-CN.xtb" "--new_grd" "new/chromium_strings.grd" "-o" "new/chromium_strings_zh-CN.xtb"</span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">ERRORLEVEL</span> <span class="number">0</span> <span class="built_in">ECHO</span> Success!</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> handling generated_resources.grd...</span><br><span class="line">python3 "generate_translation_bundle.py" "--old_grd" "old/generated_resources.grd" "--old_xtb" "old/generated_resources_zh-CN.xtb" "--new_grd" "new/generated_resources.grd" "-o" "new/generated_resources_zh-CN.xtb"</span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">ERRORLEVEL</span> <span class="number">0</span> <span class="built_in">ECHO</span> Success!</span><br><span class="line"></span><br><span class="line"><span class="built_in">cmd</span> /k</span><br></pre></td></tr></table></figure>
<p>新生成的 xtb 实际是 xml 格式，将包含三种类型的结点（node）：</p>
<ul>
<li>未修改：该类结点和原结点格式一样</li>
<li>修改：该类结点是修改了原文档内容，为了方便，生成文件会包含原翻译，用作参考。此类结点包含属性 <code>TODO=&quot;NEED_UPDATE&quot;</code></li>
<li>新添加：该类结点是新添加的文本，为了方便，生成文件会包含默认语言（grd）的文本。此类结点包含属性 <code>TODO=&quot;NEED_TRANSLATE&quot;</code></li>
</ul>
<p>如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE translationbundle&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">translationbundle</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">translation</span> <span class="attr">id</span>=<span class="string">"6970811910055250180"</span>&gt;</span>正在更新设备...<span class="tag">&lt;/<span class="name">translation</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">translation</span> <span class="attr">TODO</span>=<span class="string">"NEED-UPDATE"</span> <span class="attr">id</span>=<span class="string">"4109624392265076313"</span>&gt;</span>Chromium<span class="tag">&lt;/<span class="name">translation</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">translation</span> <span class="attr">TODO</span>=<span class="string">"NEED-TRANSLATE"</span> <span class="attr">desc</span>=<span class="string">"Select the theme."</span> <span class="attr">id</span>=<span class="string">"233572109030077464"</span>&gt;</span></span><br><span class="line">    Select Theme</span><br><span class="line">  <span class="tag">&lt;/<span class="name">translation</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">translationbundle</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>附： <a href="https://github.com/chengxuebin/chromium-grit" target="_blank" rel="noopener">Chromium-grit 工具</a></p>
<h3 id="提醒："><a href="#提醒：" class="headerlink" title="提醒："></a><span class="text-danger">提醒：</span></h3><ul>
<li>保证 <code>old</code> 和 <code>new</code> 中的 grd 文件行数对应，因为是按照行号对应查找旧翻译文的，否则编译时出现错误</li>
<li>如果修改 zh-CN 以外的语言，需要手动修改生成的 xtb 文件中 <code>lang=&quot;zh-CN&quot;</code> 属性</li>
</ul>
]]></content>
      
        <categories>
            
            <category> chromium </category>
            
        </categories>
        
        
        <tags>
            
            <tag> chromium </tag>
            
            <tag> grit </tag>
            
            <tag> i18n </tag>
            
            <tag> l10n </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Grit - Chromium 国际化（1）]]></title>
      <url>/2015/01/29/chromium-grit/</url>
      <content type="html"><![CDATA[<h2 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h2><p>chrome_string 是关于国际化的项目（Project）， 这是一个只包含 <code>build step</code> 定义的空项目， <code>build step</code> 中定义了该项目编译时执行的程序或命令。在VS2010下编辑build step 可以用文本编辑软件直接打开 <code>chrome_strings.vcxproj</code>。</p>
<p>chrome_string 会在 chrome 编译之前编译，它将国际化定义的文件转换成资源文件（.pak）和 C++ 头文件，C++ 头文件将作为源代码在编译 chrome 时一起被编译。</p>
<p>语言包编译过程</p>
<p><img src="/images/posts/grit/grit.jpg" alt=""></p>
<h2 id="Grit-工具"><a href="#Grit-工具" class="headerlink" title="Grit 工具"></a>Grit 工具</h2><p>grit（Google Resource and Internationalization Tool）是一个python开源工具，用于支持多国际化，位于 <code>src/tools/grit</code> 目录下。<code>chrome_string</code> 编译时会执行 <code>grit.py</code> 可以，然后由grit工具将grd和xtb文件编译成pak资源文件。</p>
<h2 id="国际化文件分类"><a href="#国际化文件分类" class="headerlink" title="国际化文件分类"></a>国际化文件分类</h2><ul>
<li><code>generated_resources.grd</code>：该文件定义了大部分国际化字符串定义，包括按钮的文字，窗口的标题等。</li>
<li><code>chromium_string.grd</code>：文件包括 generated_resources.grd 之外的国际化字符串定义，其中包含“安装、卸载”、“关于”等内容，把它独立出来主要是因为要和谷歌chrome 区别开来。</li>
<li><code>google_chrome_strings.grd</code>：用于编译 chrome 时使用，是和 chromium_string.grd 相对应的一个文件。</li>
<li><code>locale_settings.grd</code>：该文件定义了多语言的样式配置，例如窗口的大小，某些控件的尺寸，样式可以根据语言的不同而变化。</li>
</ul>
<h2 id="国际化文件的格式"><a href="#国际化文件的格式" class="headerlink" title="国际化文件的格式"></a>国际化文件的格式</h2><h3 id="grd-文件格式"><a href="#grd-文件格式" class="headerlink" title="grd 文件格式"></a>grd 文件格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;grit base_dir=&quot;.&quot; latest_public_release=&quot;0&quot; current_release=&quot;1&quot;</span><br><span class="line">      source_lang_id=&quot;en&quot; enc_check=&quot;m?l&quot;&gt;</span><br><span class="line">  &lt;outputs&gt;</span><br><span class="line">    &lt;output filename=&quot;grit/google_chrome_strings.h&quot; type=&quot;rc_header&quot;&gt;</span><br><span class="line">      &lt;emit emit_type=&apos;prepend&apos;&gt;&lt;/emit&gt;</span><br><span class="line">    &lt;/output&gt;</span><br><span class="line">    &lt;output filename=&quot;google_chrome_strings_zh-CN.pak&quot; type=&quot;data_package&quot; lang=&quot;zh-CN&quot; /&gt;</span><br><span class="line">    …</span><br><span class="line">  &lt;/outputs&gt;</span><br><span class="line">  &lt;translations&gt;</span><br><span class="line">    &lt;file path=&quot;resources/google_chrome_strings_zh-CN.xtb&quot; lang=&quot;zh-CN&quot; /&gt;</span><br><span class="line">    …</span><br><span class="line">  &lt;/translations&gt;</span><br><span class="line">  &lt;release seq=&quot;1&quot; allow_pseudo=&quot;false&quot;&gt;</span><br><span class="line">    &lt;messages fallback_to_english=&quot;true&quot;&gt;</span><br><span class="line">      &lt;message name=&quot;IDS_PRODUCT_NAME&quot; desc=&quot;The Chrome application name&quot;&gt;</span><br><span class="line">        Google Chrome</span><br><span class="line">      &lt;/message&gt;</span><br><span class="line">      …</span><br><span class="line">    &lt;/messages&gt;</span><br><span class="line">  &lt;/release&gt;</span><br><span class="line">&lt;/grit&gt;</span><br></pre></td></tr></table></figure>
<p>grd 是xml的格式，它有三个部分： <code>outputs</code>、<code>translations</code>、<code>release</code>。</p>
<ul>
<li><code>outputs</code> 中定义编译出的C++头文件的位置和语言资源文件的位置，默认是在 <code>src/build/Debug</code> 或 <code>Release/obj/global_intermediate/chrome/</code></li>
<li><code>translates</code> 中定义了多语言的定义文件的位置，每一种支持的语言都应该有一个翻译文件，这些文件将作为输入。</li>
<li><code>release</code> 中的 messages 定义的是默认语言的定义，当程序 找不到合适的语言显示时，将使用默认语言中的定义。<br>  message 的属性如下：<ul>
<li><code>name</code>：标识一个字符串的变量名</li>
<li><code>desc</code>：该变量的介绍</li>
<li><code>translateable</code>：是否使用翻译，默认true</li>
<li><code>use_name_for_id</code>：是否使用name作为翻译的id标识。默认是false，翻译文件（xtb）中的id使用转换后的数字做映射；如果true，则使用 name 的值来和 grd 文件中的记录来映射。</li>
</ul>
</li>
</ul>
<h3 id="xtb-文件格式"><a href="#xtb-文件格式" class="headerlink" title="xtb 文件格式"></a>xtb 文件格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE translationbundle&gt;</span><br><span class="line">&lt;translationbundle lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;translation id=&quot;6676384891291319759&quot;&gt;访问互联网&lt;/translation&gt;</span><br><span class="line">…</span><br><span class="line">&lt;/translationbundle&gt;</span><br></pre></td></tr></table></figure>
<p>xtb 是多语言的翻译文件，也是xml格式，每种语言对应一个xtb文件。<code>&lt;translateion/&gt;</code> 结点中的 id 的数字对应于 grd 文件中 <code>&lt;message/&gt;</code> 中的 <code>name</code> 或 <code>content</code> 值，注意默认不是根据 <code>name</code>，而是根据内容来生成 <code>id</code>值，这样的好处是可以去除冗余的文字。 转换的过程定义在 <code>/src/tools/grit/external/FP.py</code> 中。</p>
<h2 id="国际化自定义步骤"><a href="#国际化自定义步骤" class="headerlink" title="国际化自定义步骤"></a>国际化自定义步骤</h2><ol>
<li>打开 grd 文件，添加 message 结点，或找到要修改的 message 结点；</li>
<li>根据 message 的内容运行grit 工具，得到翻译文件 xtb 的id值；</li>
<li>打开要修改的 xtb 文件，每种语言对应一个xtb 文件， 新建 translation 结点，id为第2步中计算得到的 id 值，结点内容为对应语言的翻译， 如果不知道如何计算 id，也可以 将 message 结点的属性use_name_for_id 设置成true，则 translate 的id 对应为 message 的name值；</li>
<li>重新编译 chrome_string 项目，生成新的头文件和资源包。</li>
</ol>
<p>改动文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chromium_strings.grd</span><br><span class="line">generated_resource.grd </span><br><span class="line">chromium_strings_zh-CN.xtb </span><br><span class="line">generated_resources_zh-CN.xtb</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> chromium </category>
            
        </categories>
        
        
        <tags>
            
            <tag> chromium </tag>
            
            <tag> grit </tag>
            
            <tag> i18n </tag>
            
            <tag> l10n </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用的正则表达式]]></title>
      <url>/2015/01/25/the-most-used-regular-expression/</url>
      <content type="html"><![CDATA[<h2 id="常用表达式"><a href="#常用表达式" class="headerlink" title="常用表达式"></a>常用表达式</h2><h3 id="1-中文字符"><a href="#1-中文字符" class="headerlink" title="1. 中文字符"></a>1. 中文字符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/[\u4e00-\u9fa5]/</span><br></pre></td></tr></table></figure>
<h3 id="2-邮箱"><a href="#2-邮箱" class="headerlink" title="2. 邮箱"></a>2. 邮箱</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^([a-z0<span class="number">-9</span>\+_\-]+)(\.[a-z0<span class="number">-9</span>\+_\-]+)*@([_a-z0<span class="number">-9</span>]+\.)+[a-z]&#123;<span class="number">2</span>,<span class="number">5</span>&#125;$/</span><br></pre></td></tr></table></figure>
<h3 id="3-多个单词或"><a href="#3-多个单词或" class="headerlink" title="3. 多个单词或"></a>3. 多个单词或</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/(?:apple|banna)/</span><br></pre></td></tr></table></figure>
<h3 id="4-不包含某个单词"><a href="#4-不包含某个单词" class="headerlink" title="4. 不包含某个单词"></a>4. 不包含某个单词</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^((?!hede).)*$/</span><br></pre></td></tr></table></figure>
<p>参考：</p>
<ul>
<li><a href="http://fineonly.com/solutions/regex-exclude-a-string" target="_blank" rel="noopener">Exclude a String</a></li>
<li><a href="http://www.vaikan.com/regular-expression-to-match-string-not-containing-a-word/" target="_blank" rel="noopener">正则表达式里字符串”不包含”匹配技巧</a></li>
<li><a href="http://stackoverflow.com/questions/2078915/a-regular-expression-to-exclude-a-word-string" target="_blank" rel="noopener">A regular expression to exclude a word/string</a></li>
</ul>
<h3 id="5-神奇的全部-ASCII-字符"><a href="#5-神奇的全部-ASCII-字符" class="headerlink" title="5. 神奇的全部 ASCII 字符"></a>5. 神奇的全部 ASCII 字符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/[ -~]/</span><br><span class="line">/[\x20-\x7E]/</span><br></pre></td></tr></table></figure>
<p><strong>解释</strong>：<a href="http://www.asciitable.com/" target="_blank" rel="noopener">ASCII 表</a>中大于空格（0x20），小于~（0x7E）的字符为全部的<strong>打印</strong>字符。</p>
<h3 id="6-处理-HTML-标签"><a href="#6-处理-HTML-标签" class="headerlink" title="6. 处理 HTML 标签"></a>6. 处理 HTML 标签</h3><p>参考：</p>
<ul>
<li><a href="http://haacked.com/archive/2004/10/25/usingregularexpressionstomatchhtml.aspx/" target="_blank" rel="noopener">Using a Regular Expression to Match HTML</a></li>
<li><a href="http://www.pagecolumn.com/tool/all_about_html_tags.htm" target="_blank" rel="noopener">All about HTML tags</a></li>
</ul>
<h3 id="7-使用空格分隔中文和英文单词"><a href="#7-使用空格分隔中文和英文单词" class="headerlink" title="7. 使用空格分隔中文和英文单词"></a>7. 使用空格分隔中文和英文单词</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">([\x&#123;4E00&#125;-\x&#123;9FA5&#125;])([a-z0-9@#&amp;;=_\[\$\%\^\*\-\+\(\/]+)</span><br><span class="line"></span><br><span class="line">$<span class="number">1</span> $<span class="number">2</span></span><br></pre></td></tr></table></figure>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><table>
<thead>
<tr>
<th style="text-align:center">Modifier</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">i</td>
<td style="text-align:left">Perform case-insensitive matching</td>
</tr>
<tr>
<td style="text-align:center">g</td>
<td style="text-align:left">Perform a global match (find all matches rather than stopping after the first match)</td>
</tr>
<tr>
<td style="text-align:center">m</td>
<td style="text-align:left">Perform multiline matching</td>
</tr>
</tbody>
</table>
<p>收集了一些总结的很好的文章：</p>
<ul>
<li><a href="http://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html" target="_blank" rel="noopener">最全的常用正则表达式大全</a></li>
<li><a href="http://www.regular-expressions.info/lookaround.html" target="_blank" rel="noopener">regular-expressions.info</a></li>
<li><a href="http://regexr.com/30npe" target="_blank" rel="noopener">RegExr</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> program </category>
            
        </categories>
        
        
        <tags>
            
            <tag> regexp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 常用命令]]></title>
      <url>/2015/01/25/linux-commands/</url>
      <content type="html"><![CDATA[<h2 id="1-打开服务器的被禁用（blocked）端口（port）"><a href="#1-打开服务器的被禁用（blocked）端口（port）" class="headerlink" title="1. 打开服务器的被禁用（blocked）端口（port）"></a>1. 打开服务器的被禁用（blocked）端口（port）</h2><ul>
<li>启用被 iptables 禁用的 80 端口</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /sbin/iptables -I INPUT -p tcp -m tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure>
<ul>
<li>将上面的配置作为规则保存到 iptables，以便服务器重启后，能再次生效</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /sbin/service iptables save</span><br></pre></td></tr></table></figure>
<h2 id="2-通过-systemctl-启动服务"><a href="#2-通过-systemctl-启动服务" class="headerlink" title="2. 通过 systemctl 启动服务"></a>2. 通过 systemctl 启动服务</h2><ul>
<li>启动、停止、重启</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl start nginx.service</span></span><br><span class="line"><span class="comment"># systemctl stop nginx.service</span></span><br><span class="line"><span class="comment"># systemctl restart nginx.service</span></span><br></pre></td></tr></table></figure>
<p>除了 nginx.service, 常用的服务还有：php-fpm.service, mysqld.service</p>
<ul>
<li>设置开机自启</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl enable nginx.service</span></span><br></pre></td></tr></table></figure>
<h2 id="3-查看进程信息"><a href="#3-查看进程信息" class="headerlink" title="3. 查看进程信息"></a>3. 查看进程信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ps -aux | grep 关键字</span></span><br></pre></td></tr></table></figure>
<h2 id="4-查看进程的安装位置"><a href="#4-查看进程的安装位置" class="headerlink" title="4. 查看进程的安装位置"></a>4. 查看进程的安装位置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep tomcat</span><br></pre></td></tr></table></figure>
<h2 id="5-sudo-保留系统环境"><a href="#5-sudo-保留系统环境" class="headerlink" title="5. sudo 保留系统环境"></a>5. sudo 保留系统环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -E env</span><br></pre></td></tr></table></figure>
<h2 id="6-查找最大目录或文件"><a href="#6-查找最大目录或文件" class="headerlink" title="6. 查找最大目录或文件"></a>6. 查找最大目录或文件</h2><h3 id="1）查找最大目录"><a href="#1）查找最大目录" class="headerlink" title="1）查找最大目录"></a>1）查找最大目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -a | sort -n -r | head -n 5</span><br></pre></td></tr></table></figure>
<h3 id="2）查找最大文件"><a href="#2）查找最大文件" class="headerlink" title="2）查找最大文件"></a>2）查找最大文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -type f -exec du -Sh &#123;&#125; + | sort -rh | head -n 5</span><br></pre></td></tr></table></figure>
<p><a href="https://www.tecmint.com/find-top-large-directories-and-files-sizes-in-linux/" target="_blank" rel="noopener">参考</a></p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> server </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我的快捷键]]></title>
      <url>/2015/01/10/development-shortcuts/</url>
      <content type="html"><![CDATA[<h2 id="Visual-Studio"><a href="#Visual-Studio" class="headerlink" title="Visual Studio"></a>Visual Studio</h2><ul>
<li><code>Ctrl</code> + <code>J</code> ： 智能提示</li>
<li><code>Ctrl</code> + <code>,</code> ： Display Navigate-To dialog box，大爱</li>
<li><code>Ctrl</code> + <code>]</code> ： Go to matching brace in source file</li>
<li><code>Ctrl</code> + <code>Shift</code> + <code>]</code> : Extend selection to nexst brace</li>
<li><code>Ctrl</code> + <code>Alt</code> + <code>F</code>： 搜索文件，尤其是整个项目</li>
<li><code>F3</code> / <code>Shift</code> + <code>F3</code> : Find next / find previous</li>
<li><code>Ctrl</code> + <code>W</code> ： Select current word</li>
<li><code>Ctrl</code> + <code>l</code> ： Delete current line or selection of lines to and add to clipboard</li>
<li><code>Ctrl</code> + <code>Shift</code> + <code>Enter</code> ：Enter blank line below cursor</li>
<li><code>Ctrl</code> + <code>Shift</code> + <code>u</code> ： Make uppercase</li>
<li><code>Ctrl</code> + <code>u</code> ： Make lowercase (reverse upercase)</li>
<li><code>Ctrl</code> + <code>k</code> + <code>c</code> : Comment selected text</li>
<li><code>Ctrl</code> + <code>k</code> + <code>u</code> : Uncomment selected text</li>
<li><code>Ctrl</code> + <code>k</code> + <code>d</code> : Format document to code formatting settings</li>
<li><code>Ctrl</code> + <code>k</code> + <code>f</code> : Format selection to code formatting settings</li>
<li><code>F5</code> : Start debugging</li>
<li><code>Ctrl</code> + <code>F5</code> : Bypass debugger</li>
<li><code>F10</code> ： Debug / step over</li>
<li><code>Shift</code> + <code>F11</code> ： Debug / step out</li>
<li><code>Ctrl</code> + <code>F10</code> ： Debug / run to cursor</li>
</ul>
<h2 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h2><ul>
<li><code>Ctrl</code> + <code>W</code> ： 关闭 Tab</li>
<li><code>Ctrl</code> + <code>T</code> ： 新建 Tab</li>
<li><code>Ctrl</code> + <code>Shift</code> + <code>T</code>： 恢复上一个关闭的 Tab</li>
<li><code>Ctrl</code> + <code>L</code> ： 定位到 Location Bar</li>
<li><code>Ctrl</code> + <code>F</code> ： 搜索页面</li>
<li><code>F12</code> ： 开发者模式</li>
<li><code>Ctrl</code> + <code>Shift</code> + <code>F</code> ： 搜索全部资源</li>
<li><code>Ctrl</code> + <code>Shift</code> + <code>Del</code> ： 清除缓存</li>
</ul>
<h2 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse"></a>Eclipse</h2><ul>
<li><code>Ctrl</code> + <code>Space</code> ： 智能提示</li>
<li><code>Ctrl</code> + <code>Shift</code> + <code>R</code> ： 搜索全部资源</li>
</ul>
<h2 id="UE"><a href="#UE" class="headerlink" title="UE"></a>UE</h2><ul>
<li><code>Ctrl</code> + <code>R</code> ： 替换</li>
</ul>
<h2 id="Mac-OS"><a href="#Mac-OS" class="headerlink" title="Mac OS"></a>Mac OS</h2><h3 id="按键"><a href="#按键" class="headerlink" title="按键"></a>按键</h3><ul>
<li><img src="/images/posts/shortcuts/menusym-command.gif" alt=""> : Command/Apple Key (like Control on a PC) Also written as Cmd</li>
<li><img src="/images/posts/shortcuts/menusym-option.gif" alt=""> : Option (like Alt on a PC)</li>
<li><img src="/images/posts/shortcuts/menusym-shift.gif" alt=""> : Shift</li>
<li><img src="/images/posts/shortcuts/menusym-control.gif" alt=""> : Control (Control-click = Right-click)</li>
<li><img src="/images/posts/shortcuts/menusym-tab.gif" alt=""> : Tab</li>
<li><img src="/images/posts/shortcuts/menusym-return.gif" alt=""> : Return</li>
<li><img src="/images/posts/shortcuts/menusym-enter.gif" alt=""> : Enter (on Number Pad)</li>
<li><img src="/images/posts/shortcuts/menusym-eject.gif" alt=""> : Eject</li>
<li><img src="/images/posts/shortcuts/menusym-escape.gif" alt=""> : Escape</li>
<li><img src="/images/posts/shortcuts/menusym-pageup.gif" alt=""> : Page Up</li>
<li><img src="/images/posts/shortcuts/menusym-pagedown.gif" alt=""> : Page Down</li>
<li><img src="/images/posts/shortcuts/menusym-home.gif" alt=""> : Home</li>
<li><img src="/images/posts/shortcuts/menusym-end.gif" alt=""> : End</li>
<li><img src="/images/posts/shortcuts/menusym-arrowkeys.gif" alt=""> : Arrow Keys</li>
<li><img src="/images/posts/shortcuts/menusym-delete.gif" alt=""> : Delete Left (like Backspace on a PC)</li>
<li><img src="/images/posts/shortcuts/menusym-delete-forward.gif" alt=""> : Delete Right (also called Forward Delete)</li>
</ul>
<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul>
<li><code>Cmd</code> + <code>Shift</code> + <code>3</code> ： Take picture of the entire screen</li>
<li><code>Cmd</code> + <code>Shift</code> + <code>4</code> ： Take picture of a selected area</li>
<li><code>Cmd</code> + <code>Shift</code> + <code>4</code> -&gt; <code>Space</code>： Cmd-Shift-4, then press Spacebar, then Click on the window/object</li>
<li><code>Cmd</code> + <code>Opt</code> + <code>Esc</code> ： Force Quit (displayed list of apps)</li>
</ul>
<h2 id="XCode"><a href="#XCode" class="headerlink" title="XCode"></a>XCode</h2><ul>
<li><code>Esc</code> ： 智能提示</li>
</ul>
<h2 id="PHPStorm"><a href="#PHPStorm" class="headerlink" title="PHPStorm"></a>PHPStorm</h2><ul>
<li><code>SHIFT</code> + <code>SHIFT</code> ： 智能查找</li>
<li><code>SHIFT</code> + <code>F6</code> ： 智能提示</li>
<li><code>CTRL</code> + <code>D</code> ： 复制当前行或复制选中内容</li>
<li><code>CTRL</code> + <code>Y</code> ： 删除当前行或选中内容所涉及的行</li>
<li><code>CTRL</code> + <code>R</code> ： 查找替换</li>
<li><code>ALT</code> + <code>W</code> ： 选中单词</li>
<li><code>ALT</code> + <code>上下箭头</code> ： 向上向下函数间切换</li>
<li><code>CTRL</code> + <code>SHIFT</code> + <code>V</code> ： 显示最近粘贴板中的内容，选择后内容插入到光标位置</li>
<li><code>CTRL</code> + <code>Q</code> ： 显示说明文档</li>
<li><code>CTRL</code> + <code>B</code> ： 跳转到声明处</li>
<li><code>CTRL</code> + <code>N</code> ： 类名查找</li>
<li><code>CTRL</code> + <code>SHIFT</code> + <code>N</code> ： 文件名查找</li>
<li><code>CTRL</code> + <code>SHIFT</code> + <code>ALT</code> + <code>N</code> ： 函数名查找</li>
<li><code>ALT</code> + <code>SHIFT</code> + <code>C</code> ： 快速回顾最近修改的项目</li>
<li><code>CTRL</code> + <code>SHIFT</code> + <code>I</code> ： 查看变量初始化的值</li>
<li><code>CTRL</code> + <code>ALT</code> + <code>T</code> ： 插入环绕代码</li>
<li><code>CTRL</code> + <code>ALT</code> + <code>F12</code> ： 跳转至当前文件所在磁盘上的位置</li>
<li><code>ALT</code> + <code>左右键</code> ： 标签切换</li>
<li><code>CTRL</code> + <code>F12</code> ： 在当前类文件中快速查找方法</li>
</ul>
]]></content>
      
        <categories>
            
            <category> computer </category>
            
        </categories>
        
        
        <tags>
            
            <tag> chrome </tag>
            
            <tag> shortcut </tag>
            
            <tag> mac </tag>
            
            <tag> windows </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[配置 Zend Studio, Xdebug]]></title>
      <url>/2014/12/01/zend-studio-xdebug-setting-up/</url>
      <content type="html"><![CDATA[<p>开发 PHP 过程中，经常不是一蹴而就的，某些疑难问题需要像本地程序一样调试。本文记录如何配置 Zend Studio 和 Xdebug，实现本地调试或远程（Remote）调试。</p>
<p>说到本地或远程调试，就要涉及到 PHP 的2种运行方式：CLI 和 CGI。</p>
<h3 id="TIPS：什么是-CLI-和-CGI？"><a href="#TIPS：什么是-CLI-和-CGI？" class="headerlink" title="TIPS：什么是 CLI 和 CGI？"></a>TIPS：什么是 CLI 和 CGI？</h3><ul>
<li>CLI（Command Line Interface），即“命令行界面”，是指在命令行界面的运行方式。比如在本地执行一个 PHP 脚本。</li>
<li>CGI（Common Gateway Interface），即“通用网关接口”，是 HTTP 服务器和脚本解释器之间的接口。通过这个通用接口，可以忽略 HTTP 服务器或脚本解释器的技术限制。HTTP 服务器常用的就是 Apache，Lighttpd，Nginx，Tomcat等，脚本解释器常用的有 PHP，ASP，JSP 等解释器。</li>
</ul>
<h2 id="安装-Xdebug"><a href="#安装-Xdebug" class="headerlink" title="安装 Xdebug"></a>安装 Xdebug</h2><h3 id="A-安装到远程服务器"><a href="#A-安装到远程服务器" class="headerlink" title="A. 安装到远程服务器"></a>A. 安装到远程服务器</h3><ol>
<li><p>下载 Xdebug 到远程服务器</p>
</li>
<li><p>修改 php.ini<br> 打开 php.ini，添加 Xdebug 扩展（dll）的路径</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Linux and Mac OS: zend_extension=&quot;/usr/local/php/modules/xdebug.so&quot;</span><br><span class="line">Windows: zend_extension=&quot;&lt;path to .dll file&gt;&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 Xdebug<br> 在 php.ini 中，添加配置，其中关键的几个是：<code>remote_enable</code>，<code>remote_autostart</code>，<code>remote_port</code>，<code>remote_handler</code> </p>
<pre><code class="ini">xdebug.auto_trace= "On"
xdebug.collect_params= "On"
xdebug.collect_return= "On"
xdebug.trace_output_dir="/path/to/log/dir/xdebug/trace"
xdebug.profiler_enable= "true"
xdebug.profiler_output_dir="/path/to/log/dir/xdebug/profiler"
xdebug.profiler_append = "On"
xdebug.profiler_enable_trigger = "On"
xdebug.profiler_output_name = "cachegrind.out.%t-%s"
xdebug.remote_enable = "On" 
xdebug.remote_autostart = 0  
xdebug.remote_host = 127.0.0.1
xdebug.remote_port = 9000 
xdebug.remote_handler = "dbgp"
xdebug.remote_log="/path/to/log/dir/remote.log"
</code></pre>
</li>
<li><p>验证安装是否成功<br> 远程打印<code>&lt;?php phpinfo(); ?&gt;</code>，查看是否安装了 Xdebug 模块。</p>
</li>
</ol>
<h3 id="B-安装到-Zend-Studio-运行环境（PHP-Executable）"><a href="#B-安装到-Zend-Studio-运行环境（PHP-Executable）" class="headerlink" title="B. 安装到 Zend Studio 运行环境（PHP Executable）"></a>B. 安装到 Zend Studio 运行环境（PHP Executable）</h3><p>Zend Studio 自带了 PHP 运行环境的插件，在 <code>&lt;Zend_Studio_install_dir&gt;\plugins\com.zend.php.debug.debugger.&lt;version_info&gt;\</code> 目录里。默认配置的是使用自家的 zend debug，切换成 xdebug，需要修改这里的 php 设置。</p>
<ol>
<li><p>下载 Xdebug 到 <code>&lt;Zend_Studio_install_dir&gt;\plugins\com.zend.php.debug.debugger.&lt;version_info&gt;\</code></p>
</li>
<li><p>修改 php.ini<br> 注释掉 zend debug，添加 Xdebug，写法和上节一样。</p>
</li>
<li><p>配置 Xdebug<br> 配置参数参见上节</p>
</li>
<li><p>验证安装是否成功<br> 打开命令行，执行<code>php --re xdebug</code>，如果输出不是<code>Exception: Extension xdebug does not exist</code>, 表示 Xdebug 扩展安装成功。</p>
</li>
</ol>
<p>到这里，已经完成了配置 Xdebug 部分，其实现在已经可以使用多种工具来远程或本地调试了，包括设置断点、单步、查看运行参数等。反映较好的调式客户端有 PhpStorm，eclipse+PDT，netbeans，Notepad++等，Zend Studio 也算是 “eclipse+插件”性质的，下面将描述它的配置。顺道说一下，还有一个极好用的工具，是 Chrome 的插件 WebGDBp，可以直接在浏览器里远程调试，非常 Cool。</p>
<h2 id="配置-Zend-Studio"><a href="#配置-Zend-Studio" class="headerlink" title="配置 Zend Studio"></a>配置 Zend Studio</h2><h3 id="A-配置-Xdebug-CLI-调试"><a href="#A-配置-Xdebug-CLI-调试" class="headerlink" title="A. 配置 Xdebug CLI 调试"></a>A. 配置 Xdebug CLI 调试</h3><ol>
<li><p>打开 <code>Window | Preferences | PHP | PHP Executables</code><br> <img src="/images/posts/zend_xdebug/cli_1.jpg" alt=""></p>
</li>
<li><p>打开 <code>Add</code> ，添加 PHP 运行环境<br> <img src="/images/posts/zend_xdebug/cli_2.jpg" alt=""></p>
<ul>
<li>Name - PHP 运行环境名（比如 PHP 5.5.7 with Xdebug）</li>
<li>Executable path - 运行环境路径.</li>
<li>PHP ini file (Optional) - 运行环境对应的 php.ini 路径</li>
<li>SAPI type - 设置为 CLI</li>
<li>PHP debugger - 设置为 Xdebug.</li>
</ul>
</li>
<li><p>设置 Xdebug 为默认运行环境<br> 上一步保存后的回到运行环境设置窗口，选择添加的运行环境，点击 <code>Set as Default</code></p>
</li>
<li><p>打开 <code>Window | Preferences | PHP | Debug</code><br> <img src="/images/posts/zend_xdebug/cli_3.jpg" alt=""><br> 在 CLI 设置区，选择 Xdebug</p>
</li>
</ol>
<p>到此，CLI 使用 Xdebug 已经配置完成。</p>
<h3 id="B-配置-Xdebug-远程调试"><a href="#B-配置-Xdebug-远程调试" class="headerlink" title="B. 配置 Xdebug 远程调试"></a>B. 配置 Xdebug 远程调试</h3><p>允许远程调试网站程序（Web Application Debugging）</p>
<ol>
<li><p>打开 <code>Window | Preferences | PHP | PHP Servers</code><br> <img src="/images/posts/zend_xdebug/remote_1.jpg" alt="">  </p>
</li>
<li><p>添加服务器（Server）<br> <img src="/images/posts/zend_xdebug/remote_2.jpg" alt="">  </p>
</li>
<li><p>配置路径映射（Path Mapping）<br> <img src="/images/posts/zend_xdebug/remote_3.jpg" alt="">  </p>
</li>
<li><p>配置 DBGp 协议<br> 由于是远程调试，使用了 DBGp 协议通信，需要配置通信参数。<br> 打开 <code>Window | Preferences | PHP | Debug | Installed Debuggers</code><br> <img src="/images/posts/zend_xdebug/remote_6.jpg" alt=""><br> 编辑 Xdebug<br> <img src="/images/posts/zend_xdebug/remote_7.jpg" alt=""><br> 这里非常关键的地方是 <code>Access reomte session (JIT)</code>，它能配置触发 Zend Studio 调试的条件。当我们从浏览器里访问要调试的网站时，可以选择：</p>
<ul>
<li><code>off</code>: 关闭远程调试功能</li>
<li><code>localhost</code>: 通过 localhost 访问时触发调试</li>
<li><code>any</code>: 任何访问都触发调试</li>
<li><code>prompt</code>: 任何访问弹出提示，选择是否触发调试<br>由于我一般都是内网调试，这里选择 localhost，然后配合网站 Xdebug 的配置 <code>xdebug.remote_autostart = 0</code> 来使用，只有当访问 localhost 时才触发 Zend Studio 进入调试状态。</li>
</ul>
</li>
<li><p>开始调试<br> （可选）为项目指定默认服务器<br> <img src="/images/posts/zend_xdebug/remote_8.jpg" alt=""><br> 现在 Xdebug 已经是这个项目的默认远程 PHP 调试器。你可以通过 <code>Debug as web application</code> 来调试某个文件。<br> <img src="/images/posts/zend_xdebug/remote_4.jpg" alt=""><br> 查看结果：<br> <img src="/images/posts/zend_xdebug/remote_5.jpg" alt="">  </p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> xdebug </tag>
            
            <tag> zend studio </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GitHub，GitLab的多账户配置（Windows）]]></title>
      <url>/2014/11/26/github-multi-account-configuration/</url>
      <content type="html"><![CDATA[<p>Windows 系统通过 SSH 方式使用 Git 时，如果有多个账户，需要手工配置多个 rsa 密钥，这里记录一下过程。下面以 GitHub 为例。</p>
<h2 id="单个账号"><a href="#单个账号" class="headerlink" title="单个账号"></a>单个账号</h2><h3 id="1-生成密钥"><a href="#1-生成密钥" class="headerlink" title="1.生成密钥"></a>1.生成密钥</h3><p>打开 Git Bash，运行命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "your_email@example.com"</span><br><span class="line"><span class="meta">#</span><span class="bash"> Creates a new ssh key, using the provided email as a label</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Generating public/private rsa key pair.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]</span></span><br></pre></td></tr></table></figure>
<p>下一步，输入密钥的口令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase): [Type a passphrase]</span><br><span class="line"><span class="meta">#</span><span class="bash"> Enter same passphrase again: [Type passphrase again]</span></span><br></pre></td></tr></table></figure>
<p>执行后，将产生公钥、私钥对：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved in /c/Users/you/.ssh/id_rsa.</span><br><span class="line"><span class="meta">#</span><span class="bash"> Your public key has been saved <span class="keyword">in</span> /c/Users/you/.ssh/id_rsa.pub.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The key fingerprint is:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</span></span><br></pre></td></tr></table></figure>
<h3 id="2-将公钥、私钥加入到-ssh-agent"><a href="#2-将公钥、私钥加入到-ssh-agent" class="headerlink" title="2.将公钥、私钥加入到 ssh-agent"></a>2.将公钥、私钥加入到 ssh-agent</h3><ul>
<li>命令方式：  </li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> start the ssh-agent <span class="keyword">in</span> the background</span></span><br><span class="line">ssh-agent -s</span><br><span class="line"><span class="meta">#</span><span class="bash"> Agent pid 59566</span></span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>
<ul>
<li>或者手工将2个文件复制到 user/.ssh/ 目录</li>
</ul>
<h3 id="3-将公钥文件的内容复制到-GitHub-账户中"><a href="#3-将公钥文件的内容复制到-GitHub-账户中" class="headerlink" title="3.将公钥文件的内容复制到 GitHub 账户中"></a>3.将公钥文件的内容复制到 GitHub 账户中</h3><p>密钥是自己保存的，公钥是需要公开给你使用的网站。登录 GitHub 账户，从账户管理里找到密钥（SSH keys）配置，新建一个key，将公钥（一串 Base64 格式）文本复制到其中，并给这个 key 标记个名字。 </p>
<p>标记个名字，方便多个账号同时使用时，方便管理。</p>
<h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h3><p>在 Git Bash 中输入:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line"><span class="meta">#</span><span class="bash"> Attempts to ssh to GitHub</span></span><br></pre></td></tr></table></figure>
<p>会收到一个提示：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host 'github.com (207.97.227.239)' can't be established.</span><br><span class="line"><span class="meta">#</span><span class="bash"> RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Are you sure you want to <span class="built_in">continue</span> connecting (yes/no)?</span></span><br></pre></td></tr></table></figure>
<p>检查一下指纹（fingerprint）和你上面产生的密钥是否一致，然后输入<code>yes</code>.</p>
<p>最后，你将收到配置成功的消息 :)</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You've successfully authenticated, but GitHub does not</span><br><span class="line"><span class="meta">#</span><span class="bash"> provide shell access.</span></span><br></pre></td></tr></table></figure>
<h2 id="添加多个账户"><a href="#添加多个账户" class="headerlink" title="添加多个账户"></a>添加多个账户</h2><p>上面操作时<strong>手工</strong>产生的<code>id_rsa</code>密钥文件放到<code>username\.ssh\</code>目录下，如果改成其它文件名，在连接时将出错，这就不能支持多个账号的ssh key。  </p>
<p>（不过，我猜可能通过命令 <code>ssh-add ~/.ssh/id_rsa</code> 添加的 key 可能会自动产生多账号配置文件。有待验证！！！）</p>
<p>那如果有多个同名的<code>id_rsa</code>密钥对文件如何处理呢？</p>
<p>做法是添加一个配置文件，来管理（映射）密钥的关系，这只是 windows 的方案，Linux 自带 SSH agent 的。</p>
<h3 id="1-创建管理文件"><a href="#1-创建管理文件" class="headerlink" title="1.创建管理文件"></a>1.创建管理文件</h3><p>在 <code>.ssh</code> 目录下创建 <code>config</code> 文件，同时将产生的 <code>id_rsa</code> 文件改成较好记的名字，比如 <code>username.github.com</code>。</p>
<h3 id="2-添加映射"><a href="#2-添加映射" class="headerlink" title="2.添加映射"></a>2.添加映射</h3><p>打开 <code>config</code> 文件，添加：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">	User git</span><br><span class="line">	Hostname ssh.github.com</span><br><span class="line">	PreferredAuthentications publickey</span><br><span class="line">	IdentityFile ~/.ssh/username.github.com</span><br><span class="line">	Port 443</span><br><span class="line"></span><br><span class="line">Host anothersite.com</span><br><span class="line">	User git</span><br><span class="line">	Hostname ssh.anothersite.com</span><br><span class="line">	PreferredAuthentications publickey</span><br><span class="line">	IdentityFile ~/.ssh/username.anothersite.com</span><br><span class="line">	Port 443</span><br></pre></td></tr></table></figure>
<p>上面是2个密钥映射的关系，<code>IdentityFile</code>是改名后的文件，其它参数根据网站需要来更改。</p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> autolayout </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[优先级：hugging vs compression resistance]]></title>
      <url>/2014/11/12/content-hugging-vs-content%20compression-resistance-priority/</url>
      <content type="html"><![CDATA[<p>开发IOS应用最快速的手段就是自动布局（auto layout）以及它的约束（constraint）机制，下面说几个属性。</p>
<h3 id="1-内嵌内容大小（Intrinsic-Content-Size）"><a href="#1-内嵌内容大小（Intrinsic-Content-Size）" class="headerlink" title="1.内嵌内容大小（Intrinsic Content Size）"></a>1.内嵌内容大小（Intrinsic Content Size）</h3><p>IOS本身依靠一套布局系统（layout system）完成计算各组件大小，最大限度满足尽可能多的约束，说尽可能多的原因是可能存在有冲突的约束，造成没法全部满足。回过头来说，设置了Intrinsic Content Size属性，一是就是通知布局系统本组件包含不容易知道大小的内容，二是会提示布局系统自身的大小，也就是组件本身可以知道自身内容大小。  </p>
<p>常见的组件有UILabel, UIButton, 它们都设置了Intrinsic Content Size这个属性，也就是运行时会根据内容的大小来缩小或扩大。</p>
<p>参见<a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/AutoLayoutConcepts/AutoLayoutConcepts.html" target="_blank" rel="noopener">苹果开发文档</a></p>
<h3 id="2-内容保持紧固的优先级（Content-hugging-priority）"><a href="#2-内容保持紧固的优先级（Content-hugging-priority）" class="headerlink" title="2.内容保持紧固的优先级（Content hugging priority）"></a>2.内容保持紧固的优先级（Content hugging priority）</h3><p>上面说组件会适应其内容大小。那会出现一个问题，例如，当组件还设置了其它约束条件，将左（leading）和右（trailing）边界固定（pinned）到了父视图（superview）上，假如内容宽度是200，父视图宽度是500，那么组件要应用哪个呢？</p>
<p>这时就很有必要为每个条件设置一个优先级，ios默认有高（1000）、中（750）和低（250）3个级别，当然如果需要比较的情况复杂，也可以为优先级设置任意0至1000的数值。</p>
<p>内容保持紧固的优先级指的是组件保持内容大小，<strong>不被拉伸</strong>的优先级别。</p>
<p>回到刚才的例子，将组件的Content hugging priority设置为251，而左右约束设置为250，这时组件会维持自身大小，不会随着父视图拉伸。</p>
<h3 id="3-内容抵抗压缩的优先级（content-compression-resistance-priority）"><a href="#3-内容抵抗压缩的优先级（content-compression-resistance-priority）" class="headerlink" title="3.内容抵抗压缩的优先级（content compression resistance priority）"></a>3.内容抵抗压缩的优先级（content compression resistance priority）</h3><p>思路与上边相似，本属性指的是组件保持内容大小，<strong>不被压缩</strong>的优先级别。</p>
<p>试想上例中，如果父视图只有宽度只有100，组件内容是200，将组件的content compression resistance priority设置为751，而左右约束设置为750，这时组件会维持自身大小，不会随着父视图被压缩。</p>
<h3 id="4-附上一个讲的很清楚的例子"><a href="#4-附上一个讲的很清楚的例子" class="headerlink" title="4. 附上一个讲的很清楚的例子"></a>4. 附上一个讲的很清楚的例子</h3><p>Say you’ve got button like this:</p>
<p><strong>[       Click Me      ]</strong></p>
<p>and you’ve pinned the edges to a larger superview with priority 500.</p>
<p>Then, if Hugging priority &gt; 500 it’ll look like this:</p>
<p><strong>[Click Me]</strong></p>
<p>If Hugging priority &lt; 500 it’ll look like this:</p>
<p><strong>[       Click Me      ]</strong></p>
<p>If superview now shrinks then, if the Compression Resistance priority &gt; 500, it’ll look like this</p>
<p><strong>[Click Me]</strong></p>
<p>Else if Compression Resistance priority &lt; 500, it could look like this:</p>
<p><strong>[Cli..]</strong></p>
<p>from <a href="http://stackoverflow.com/questions/15850417/cocoa-autolayout-content-hugging-vs-content-compression-resistance-priority" target="_blank" rel="noopener">stackoverflow</a></p>
]]></content>
      
        <categories>
            
            <category> ios </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ios </tag>
            
            <tag> autolayout </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 9-Patch]]></title>
      <url>/2014/08/09/android-nine-patch/</url>
      <content type="html"><![CDATA[<p>9-Patch是Android设备上处理可扩展图片的方式。众所周知，Android设备的屏幕尺寸和分辨率众多，为了图片能完美的适配各种屏幕，Android采用了支持可扩展的图片的方案。</p>
<p>9-Patch的使用非常简便。围绕在图片周围的黑线便是定义之处。关于此格式需要注意的地方：</p>
<ul>
<li>png图片的一周有 <strong>1px的边框</strong>，用于定义可扩展区域和静态区域（黑线）</li>
<li>图片一周，黑线标识可扩展区域，黑线必须是 <strong>纯黑</strong> (#000)，不透明的，添加深灰色的线都不能起作用，其它区域必须是完全透明或者纯白色。</li>
<li>可以使用任意图片处理工具处理，比如Windows的画板（MS Paint）也没有问题</li>
<li>保存时使用扩展名 <strong>.9.png</strong></li>
</ul>
<p>下面说明黑线的作用。</p>
<p><img src="/images/posts/ninepatch_raw.png" alt=""></p>
<h3 id="Top和Left"><a href="#Top和Left" class="headerlink" title="Top和Left"></a>Top和Left</h3><p>Top和Left定义了将要被拉伸的部分。要注意的点：</p>
<ul>
<li><p>9-Patch图 <strong>只能拉伸</strong>，不是整块复制，不能收缩<br>  <img src="/images/posts/greater-than-1px.jpg" alt=""></p>
</li>
<li><p>同一边可以定义多个区域，使用时将按照区域的宽度等比例拉伸<br>  <img src="/images/posts/multi-scretch-lines.jpg" alt=""></p>
</li>
</ul>
<h3 id="Right和Bottom"><a href="#Right和Bottom" class="headerlink" title="Right和Bottom"></a>Right和Bottom</h3><p>Right和Bottom定义了内容的区域。</p>
<p><img src="/images/posts/9-patch-content-area.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> 9-Patch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常见的中文编码]]></title>
      <url>/2014/07/26/chinese-charsets/</url>
      <content type="html"><![CDATA[<p>工作经常碰到编码、字符集等概念，下面收集了一下常见的中文编码，方便日后查阅。</p>
<p>常见的有国家标准的<a href="http://zh.wikipedia.org/wiki/GB_2312" target="_blank" rel="noopener">GB 2312-80</a>，<a href="http://zh.wikipedia.org/wiki/GB18030" target="_blank" rel="noopener">GB 18030-2005</a>，以及并非国家标准但应用很广的<a href="http://zh.wikipedia.org/wiki/%E6%B1%89%E5%AD%97%E5%86%85%E7%A0%81%E6%89%A9%E5%B1%95%E8%A7%84%E8%8C%83" target="_blank" rel="noopener">GBK</a>。</p>
<p>先说说这些名称的所表示的意思：标准类别代号 顺序号-年代号 中文名称。如”GB 2312-(19)80”, “GB 18030-2005”。</p>
<h2 id="GB-2312"><a href="#GB-2312" class="headerlink" title="GB 2312"></a>GB 2312</h2><p>标准共收录6763个汉字，其中一级汉字3755个，二级汉字3008个；同时收录了包括拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母在内的682个字符。</p>
<p>在使用GB2312的程序通常采用EUC储存方法，以便兼容于ASCII。浏览器编码表上的“GB2312”，通常都是指“EUC-CN”表示法。</p>
<p>每个汉字及符号以两个字节来表示。第一个字节称为“高位字节”，第二个字节称为“低位字节”。</p>
<p>“高位字节”使用了0xA1-0xF7（把01-87区的区号加上0xA0），“低位字节”使用了0xA1-0xFE（把01-94加上0xA0）。 由于一级汉字从16区起始，汉字区的“高位字节”的范围是0xB0-0xF7，“低位字节”的范围是0xA1-0xFE，占用的码位是72*94=6768。其中有5个空位是D7FA-D7FE。</p>
<p>例如“啊”字在大多数程序中，会以两个字节，0xB0（第一个字节）0xA1（第二个字节）储存。（与区位码对比：0xB0=0xA0+16,0xA1=0xA0+1）。</p>
<h2 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h2><p>由于GB 2312-80只收录6763个汉字，有不少汉字，如部分在GB 2312-80推出以后才简化的汉字（如“啰”），部分人名用字（如中国前总理朱镕基的“镕”字），台湾及香港使用的繁体字，日语及朝鲜语汉字等，并未有收录在内。于是厂商微软利用GB 2312-80未使用的编码空间，收录GB 13000.1-93全部字符制定了GBK编码。</p>
<p>根据微软资料，GBK是对GB2312-80的扩展，也就是CP936字码表 (Code Page 936)的扩展（之前CP936和GB 2312-80一模一样），最早实现于Windows 95简体中文版。虽然GBK收录GB 13000.1-93的全部字符，但编码方式并不相同。</p>
<p>GBK自身并非国家标准，只是曾由国家技术监督局标准化司、电子工业部科技与质量监督司公布为“技术规范指导性文件”。原始GB13000一直未被业界采用，后续国家标准GB18030技术上兼容GBK而非GB13000。</p>
<p>字符有一字节和双字节编码，00–7F范围内是一位，和ASCII保持一致，此范围内严格上说有96个文字和32个控制符号。</p>
<p>之后的双字节中，前一字节是双字节的第一位。总体上说第一字节的范围是81–FE（也就是不含80和FF），第二字节的一部分领域在40–7E，其他领域在80–FE。</p>
<h2 id="GB-18030"><a href="#GB-18030" class="headerlink" title="GB 18030"></a>GB 18030</h2><p>全称：国家标准GB 18030-2005《信息技术　中文编码字符集》，是中华人民共和国现时最新的内码字集，是GB 18030-2000《信息技术　信息交换用汉字编码字符集　基本集的扩充》的修订版。与GB 2312-1980完全兼容，与GBK基本兼容，支持GB 13000及Unicode的全部统一汉字，共收录汉字70244个。</p>
<p>GB 18030主要有以下特点：</p>
<p>代码页 54936<br>与 UTF-8 相同，采用多字节编码，每个字可以由1个、2个或4个字节组成。<br>编码空间庞大，最多可定义161万个字符。<br>支持中国国内少数民族的文字，不需要动用造字区。<br>汉字收录范围包含繁体汉字以及日韩汉字。</p>
<p>单字节，其值从0到0x7F。<br>双字节，第一个字节的值从0x81到0xFE，第二个字节的值从0x40到0xFE（不包括0x7F）。<br>四字节，第一个字节的值从0x81到0xFE，第二个字节的值从0x30到0x39，第三个字节从0x81到0xFE，第四个字节从0x30到0x39。</p>
<h2 id="区别与联系"><a href="#区别与联系" class="headerlink" title="区别与联系"></a>区别与联系</h2><ul>
<li>容量：GB 2312 &lt; GBK &lt; GB 18030</li>
<li>GB 2312 和 GBK 是16位的，GB 18030 是32位</li>
<li>GB 18030, GBK 都是向后兼容，GB 18030兼容GBK，GBK兼容GB 2312</li>
</ul>
<p>平常使用中，应该首选Unicode编码，保证在多语言环境下的兼容性。如果需要使用中文编码，首选GB 18030，能保证更多的汉字正常显示，如果终端不支持，可以按序向后换小一些的编码集。</p>
]]></content>
      
        <categories>
            
            <category> programming </category>
            
        </categories>
        
        
        <tags>
            
            <tag> encoding </tag>
            
            <tag> charset </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[32位和64位程序的注册表知识点]]></title>
      <url>/2014/07/06/32bit-64bit-registry/</url>
      <content type="html"><![CDATA[<p>众所周知，注册表是windows系统的数据库，系统本身以及安装的程序都依赖注册表。当windows进化到64位，还要兼容大量的32位老程序，便碰到了注册表的问题。这里只讨论64位系统的注册表机制。</p>
<p>注册表树最大可以有512级深度，通过注册表API一次可以创建32级深的键值。</p>
<p>为了解决64位系统遇到的问题，Windows使用了三套方案，共享（Shared）、<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa384232\(v=vs.85\" target="_blank" rel="noopener">注册表重定向（Registry Redirector）</a>.aspx)和<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa384235\(v=vs.85\" target="_blank" rel="noopener">注册表反射（Registry Reflection）</a>.aspx)。</p>
<ul>
<li><p>共享，顾名思义，保存可以被32位和64位共同使用的注册表。</p>
</li>
<li><p>反射，这是一个早期的方案，只用于Windows Server 2008, Windows Vista, Windows Server 2003, 和Windows XP，从Windows 7 和 Windows Server 2008 R2 开始被移除。  </p>
<p>  它的做法是备份和同步，就是把同一份注册表保存到两个物理位置，这两个位置会分别被32位或64位程序使用。保存发生在RegCloseKey调用结束。使用 RegDisableReflectionKey和RegEnableReflectionKey方法可以禁用/启用反射机制。</p>
</li>
<li><p>重定向，主要使用的机制，它会区分32位和64位程序（Application），分别提供给他们不同的注册表物理存储位置，但会映射成同一个逻辑视图（View），这个过程对程序本身是透明的。也就是说，一个32位程序可以像在32位系统中一样来使用注册表，虽然它们在64位系统上被存储在不同的物理位置。  </p>
<p>  32位程序重定向的注册表存放在Wow6432Node下，例如, HKEY_LOCAL_MACHINE\Software 会被重定向到 HKEY_LOCAL_MACHINE\Software\Wow6432Node。但是，这些操作应该由系统而非程序本身来做。  </p>
<p>  当注册表包含%ProgramFiles% 或 %commonprogramfiles%时，64位系统会自动替换为 “%ProgramFiles(x86)%” 和 “%commonprogramfiles(x86)%”，同样的system32 被替换为  syswow64。具体的替换规则请阅读 <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa384232\(v=vs.85\" target="_blank" rel="noopener">MSDN</a>.aspx)</p>
</li>
</ul>
<p>关于Windows系统中哪些目录使用的是哪种机制，请<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa384253\(v=vs.85\" target="_blank" rel="noopener">更详细的列表</a>.aspx)。</p>
<p>上面是系统的解决方案，如果你需要显式地访问64位注册表或32位注册表，可以使用KEY_WOW64_64KEY和KEY_WOW64_32KEY标识。</p>
]]></content>
      
        <categories>
            
            <category> windows </category>
            
        </categories>
        
        
        <tags>
            
            <tag> registry </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IOS要点总结]]></title>
      <url>/2014/06/16/ios-bullet/</url>
      <content type="html"><![CDATA[<p>总结ios开发遇到的易混知识点、陷阱</p>
<h2 id="Frame-VS-Bounds"><a href="#Frame-VS-Bounds" class="headerlink" title="Frame VS Bounds"></a>Frame VS Bounds</h2><p>A picture worth thousand words! 见下图。</p>
<ul>
<li><p><strong>Frame</strong>： 视图的frame是相对父坐标系的原点和矩形，默认从左上点开始。</p>
</li>
<li><p><strong>Bounds</strong>： 视图的bounds是相对自身坐标系的原点和区域。</p>
</li>
<li><p><strong>Center</strong>： 中点是相对父坐标系的中心点。 注意<strong>middle</strong>是相对自身坐标系的中心点</p>
</li>
</ul>
<p>注意，当view旋转（rotate）时：</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frame.size != bounds.size</span><br></pre></td></tr></table></figure>
<p><img src="http://i.stack.imgur.com/3jcne.jpg" alt="The Kitchen Drawer based on Stanford CS193p course"></p>
<h2 id="initWithFrame-VS-initWithCoder-VS-awakeFromNib"><a href="#initWithFrame-VS-initWithCoder-VS-awakeFromNib" class="headerlink" title="initWithFrame VS initWithCoder VS awakeFromNib"></a>initWithFrame VS initWithCoder VS awakeFromNib</h2><ul>
<li>initWithFrame 是用户主动调用的，传入用来初始化的frame</li>
<li>initWithCoder 是被触发的。当UIView被反序列化（deserialize）后，被触发。</li>
<li>awakeFromNib 是被触发的。当UIView与xib内组件建立好连接（connection）后被触发。</li>
</ul>
<p>注：initWithNibName:boundle是发送到UIViewController的消息，与上面的方法对象不同。</p>
<p><img src="/images/posts/view-init.png" alt=""></p>
<h2 id="extension-VS-category"><a href="#extension-VS-category" class="headerlink" title="extension VS category"></a>extension VS category</h2><ul>
<li><p>category是一种扩展已经存在的Class的方法。当你不能接触到Class的源码时，这是一种很有用的方式. 它常把文件取名为 “Class+CategoryName.h”, 比如 “NSView+CustomAdditions.h”， 包括.m的命名.</p>
</li>
<li><p>extension是一种特殊的category, 有以下两个不同：</p>
<ul>
<li><p>没有被扩展类名的category. 它的声明像这样:</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SomeClass</span> ()</span></span><br><span class="line">	- (<span class="keyword">void</span>) anAdditionalMethod;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>extension常定义在实现（.m）文件的顶部，然后在其下@implementation部分实现它。这也成为一种实现“伪私有”（pseudo-private）成员的方式。伪私有顾名思义，并不是真的声明了私有成员，只是达到了不能在外部访问的目的。</p>
</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> ios </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ios </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[XCode 5 添加复制/删除行快捷键]]></title>
      <url>/2014/05/16/xcode5-delete-duplicate-line/</url>
      <content type="html"><![CDATA[<p>习惯了某些编辑器的复制一行和删除一行快捷方式后，使用xcode时没有相应快捷键有些不适应，下面是一种为其添加快捷键的方式。</p>
<h3 id="修改快捷键配置文件的权限"><a href="#修改快捷键配置文件的权限" class="headerlink" title="修改快捷键配置文件的权限"></a>修改快捷键配置文件的权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 666 /Applications/Xcode.app/Contents/Frameworks/IDEKit.framework/Resources/IDETextKeyBindingSet.plist</span><br><span class="line"></span><br><span class="line">sudo chmod 777 /Applications/Xcode.app/Contents/Frameworks/IDEKit.framework/Resources/</span><br></pre></td></tr></table></figure>
<p><img src="/images/posts/duplicate_delete_line_2.png" alt=""></p>
<h3 id="修改快捷键配置文件"><a href="#修改快捷键配置文件" class="headerlink" title="修改快捷键配置文件"></a>修改快捷键配置文件</h3><ol>
<li>添加Customized类别</li>
<li><p>添加Delete Current Line宏（macro）  </p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selectLine:, cut:</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加Duplicate Current Line宏  </p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selectLine:, copy:, moveToEndOfLine:, insertNewline:, paste:, deleteBackward:</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>&nbsp;<br><img src="/images/posts/duplicate_delete_line_1.png" alt=""></p>
<h3 id="绑定快捷键"><a href="#绑定快捷键" class="headerlink" title="绑定快捷键"></a>绑定快捷键</h3><p>重启 Xcode，打开菜单 <code>Xcode &gt; Preferences &gt; KeyBindings</code>。 找到上面定义的宏，为其定义快捷键。</p>
<p><img src="/images/posts/duplicate_delete_line_3.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> ios </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ios </tag>
            
            <tag> xcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Chromium 用户界面分析（1）]]></title>
      <url>/2014/05/05/chromium-ui-1/</url>
      <content type="html"><![CDATA[<h2 id="基础界面库的类结构"><a href="#基础界面库的类结构" class="headerlink" title="基础界面库的类结构"></a>基础界面库的类结构</h2><p>基础界面库位于src\ui\views目录下，定义了 <strong>跨平台</strong> 的组件，是Chromium界面的基础，顶层chrome/browser/ui/下的类都继承或使用这些基础类。</p>
<h3 id="关于Widget静态图"><a href="#关于Widget静态图" class="headerlink" title="关于Widget静态图"></a>关于Widget静态图</h3><p>下面是Widget及内部结构的类图，类关系做了简化，只显示较关键的联系。<br><img src="/images/posts/chromium_ui_hierarchy.jpg" alt="chromium ui hierarchy"></p>
<h3 id="Widget内组件布局"><a href="#Widget内组件布局" class="headerlink" title="Widget内组件布局"></a>Widget内组件布局</h3><ul>
<li>总体来说，Widget是最底层的UI组件（此处不区分Widget和NativeWidget，后面讨论其关系），与本地（Native）平台交互，处理平台相关的消息、事件等，转换到Chromium UI体系内。  </li>
<li>为了统一处理视图组件的消息事件，Widget内定义了一个根视图RootView    </li>
<li>NonClientView是RootView的唯一孩子，也是其它所有视图的逻辑根  （<strong>为什么RootView和NonClientView不合并为一个视图？</strong>） </li>
<li>NonClientFrameView 是NonClientView孩子之一，负责非客户区的绘制和消息处理，根据不同的系统会有不同的实现，比如Windows下有OpaqueFrameView和GlassFrameView，非客户区一般包括窗口控制按钮（最大化，最小化，关闭）和标题栏（Title bar） </li>
<li>ClientView 是另一个孩子，负责客户区的绘制和消息处理，客户区包括工具栏、标签栏、地址栏、页面等。  </li>
</ul>
<p>&nbsp;</p>
<pre><code>//  The NonClientView is the logical root of all Views contained within a
//  Window, except for the RootView which is its parent and of which it is the
//  sole child. The NonClientView has two children, the NonClientFrameView which
//  is responsible for painting and responding to events from the non-client
//  portions of the window, and the ClientView, which is responsible for the
//  same for the client area of the window:
//
//  +- views::Widget ------------------------------------+
//  | +- views::RootView ------------------------------+ |
//  | | +- views::NonClientView ---------------------+ | |
//  | | | +- views::NonClientFrameView subclas  ---+ | | |
//  | | | |                                        | | | |
//  | | | | &lt;&lt; all painting and event receiving &gt;&gt; | | | |
//  | | | | &lt;&lt; of the non-client areas of a     &gt;&gt; | | | |
//  | | | | &lt;&lt; views::Widget.                   &gt;&gt; | | | |
//  | | | |                                        | | | |
//  | | | +----------------------------------------+ | | |
//  | | | +- views::ClientView or subclass --------+ | | |
//  | | | |                                        | | | |
//  | | | | &lt;&lt; all painting and event receiving &gt;&gt; | | | |
//  | | | | &lt;&lt; of the client areas of a         &gt;&gt; | | | |
//  | | | | &lt;&lt; views::Widget.                   &gt;&gt; | | | |
//  | | | |                                        | | | |
//  | | | +----------------------------------------+ | | |
//  | | +--------------------------------------------+ | |
//  | +------------------------------------------------+ |
//  +----------------------------------------------------+
//
// The NonClientFrameView and ClientView are siblings because due to theme
// changes the NonClientFrameView may be replaced with different
// implementations (e.g. during the switch from DWM/Aero-Glass to Vista Basic/
// Classic rendering).
</code></pre><h3 id="类关系（Class-Relationship）的建立"><a href="#类关系（Class-Relationship）的建立" class="headerlink" title="类关系（Class Relationship）的建立"></a>类关系（Class Relationship）的建立</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Widget::Init(<span class="keyword">const</span> InitParams&amp; params) &#123;</span><br><span class="line">  ...</span><br><span class="line">  root_view_.reset(CreateRootView());                                               --&gt;<span class="number">1</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">if</span> (RequiresNonClientView(params.type)) &#123;</span><br><span class="line">    non_client_view_ = <span class="keyword">new</span> NonClientView;                                           --&gt;<span class="number">2</span></span><br><span class="line">    non_client_view_-&gt;SetFrameView(CreateNonClientFrameView());                     --&gt;<span class="number">3</span></span><br><span class="line">    <span class="comment">// Create the ClientView, add it to the NonClientView and add the          </span></span><br><span class="line">    <span class="comment">// NonClientView to the RootView. This will cause everything to be parented.</span></span><br><span class="line">    non_client_view_-&gt;set_client_view(widget_delegate_-&gt;CreateClientView(<span class="keyword">this</span>));    --&gt;<span class="number">4</span></span><br><span class="line">    SetContentsView(non_client_view_);                                              --&gt;<span class="number">5</span></span><br><span class="line">    ...	</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (params.delegate) &#123;</span><br><span class="line">    SetContentsView(params.delegate-&gt;GetContentsView());</span><br><span class="line">    ...</span><br><span class="line">  &#125;	</span><br><span class="line">  ...  </span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> Create root view</span><br><span class="line"><span class="number">1.</span> Create NonClientView <span class="keyword">and</span> make Widget::non_client_view_ point to it</span><br><span class="line"><span class="number">1.</span> Create NonClientFrameView <span class="keyword">and</span> add it to NonClientView</span><br><span class="line"><span class="number">1.</span> Create ClientFrameView <span class="keyword">and</span> add it to NonClientView</span><br><span class="line"><span class="number">1.</span> Add NonClientView to RootView  </span><br><span class="line"></span><br><span class="line">### RootView类</span><br><span class="line">要注意的几点：  </span><br><span class="line">- 从名字便可知，RootView是View体系（hierarchy）的根  </span><br><span class="line">- RootView起到中转的作用，把本地Widget相关的事件等转换到Chromium View体系中  </span><br><span class="line">- RootView只有一个孩子ContentView，大小正好布满整个区域  </span><br><span class="line"></span><br><span class="line">原文：</span><br><span class="line"></span><br><span class="line">	<span class="comment">// RootView class</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//  The RootView is the root of a View hierarchy. A RootView is attached to a</span></span><br><span class="line">	<span class="comment">//  Widget. The Widget is responsible for receiving events from the host</span></span><br><span class="line">	<span class="comment">//  environment, converting them to views-compatible events and then forwarding</span></span><br><span class="line">	<span class="comment">//  them to the RootView for propagation into the View hierarchy.</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//  A RootView can have only one child, called its "Contents View" which is</span></span><br><span class="line">	<span class="comment">//  sized to fill the bounds of the RootView (and hence the client area of the</span></span><br><span class="line">	<span class="comment">//  Widget). Call SetContentsView() after the associated Widget has been</span></span><br><span class="line">	<span class="comment">//  initialized to attach the contents view to the RootView.</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">### Widget和NativeWidget的关系</span><br><span class="line"></span><br><span class="line">Chromium UI的一个目标是实现 **跨平台** ，这样就抽象出一个与平台无关的Widget，而与平台相关特性则由NativeWidget处理。它们两个一一对应，可以设置为Widget拥有（owns）NativeWidget或NativeWidget拥有Widget。</span><br><span class="line"></span><br><span class="line">	<span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">	<span class="comment">// Widget class</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//  Encapsulates the platform-specific rendering, event receiving and widget</span></span><br><span class="line">	<span class="comment">//  management aspects of the UI framework.</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//  Owns a RootView and thus a View hierarchy. Can contain child Widgets.</span></span><br><span class="line">	<span class="comment">//  Widget is a platform-independent type that communicates with a platform or</span></span><br><span class="line">	<span class="comment">//  context specific NativeWidget implementation.</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//  A special note on ownership:</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//    Depending on the value of the InitParams' ownership field, the Widget</span></span><br><span class="line">	<span class="comment">//    either owns or is owned by its NativeWidget:</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//    ownership = NATIVE_WIDGET_OWNS_WIDGET (default)</span></span><br><span class="line">	<span class="comment">//      The Widget instance is owned by its NativeWidget. When the NativeWidget</span></span><br><span class="line">	<span class="comment">//      is destroyed (in response to a native destruction message), it deletes</span></span><br><span class="line">	<span class="comment">//      the Widget from its destructor.</span></span><br><span class="line">	<span class="comment">//    ownership = WIDGET_OWNS_NATIVE_WIDGET (non-default)</span></span><br><span class="line">	<span class="comment">//      The Widget instance owns its NativeWidget. This state implies someone</span></span><br><span class="line">	<span class="comment">//      else wants to control the lifetime of this object. When they destroy</span></span><br><span class="line">	<span class="comment">//      the Widget it is responsible for destroying the NativeWidget (from its</span></span><br><span class="line">	<span class="comment">//      destructor).</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">&amp;nbsp;</span><br><span class="line">&amp;nbsp;</span><br><span class="line">&amp;nbsp;</span><br><span class="line"></span><br><span class="line">## Chromium界面的类结构</span><br><span class="line"></span><br><span class="line">### 静态图</span><br><span class="line">![chromium browser hierarchy](/images/posts/chromium_browser_hierarchy.jpg)</span><br><span class="line"></span><br><span class="line">### 类关系（Class Relationship）的建立</span><br><span class="line"><span class="number">1.</span> Enter <span class="string">"Browser::Create"</span> method</span><br><span class="line"><span class="number">1.</span> Call <span class="string">"InitBrowserWindow"</span> </span><br><span class="line"><span class="number">1.</span> Call <span class="string">"CreateBrowserWindow"</span> with the parameter <span class="string">"browser"</span>(<span class="keyword">this</span>)</span><br><span class="line"><span class="number">1.</span> Create <span class="string">"BrowserView"</span> which is the subclass of <span class="string">"BrowserWindow"</span></span><br><span class="line"><span class="number">1.</span> Set up the relation of <span class="string">"BrowserView"</span> <span class="keyword">and</span> <span class="string">"BrowserFrame"</span></span><br><span class="line"><span class="number">1.</span> Return back the <span class="string">"Browser::window_"</span> to <span class="string">"BrowserView"</span> instance</span><br><span class="line"></span><br><span class="line">Pseudo code:</span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line">Browser::Create()&#123;                                                         --&gt;<span class="number">1</span></span><br><span class="line">    ...</span><br><span class="line">    browser-&gt;InitBrowserWindow()&#123;                                          --&gt;<span class="number">2</span></span><br><span class="line">        ...</span><br><span class="line">        browser.window_ = BrowserWindow::CreateBrowserWindow(browser)&#123;     --&gt;<span class="number">3</span>,<span class="number">6</span></span><br><span class="line">            BrowserView* view = <span class="keyword">new</span> BrowserView(browser);                  --&gt;<span class="number">4</span></span><br><span class="line">            (<span class="keyword">new</span> BrowserFrame(view))-&gt;InitBrowserFrame();                  --&gt;<span class="number">5</span></span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">return</span> view;                                                   --&gt;<span class="number">6</span></span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Chromium UI的目标是一套跨平台的方案，其中NativeWidget实现了平台相关的细节，Widget才是跨平台的组件，与NativeWidget做了映射。Widget是Windows组件，而Chromium UI的其它组件都是基于View建立的，所以需要一个RootView做中转，将窗口事件转换到View体系中，又作为其它View的根。</p>
]]></content>
      
        <categories>
            
            <category> chromium </category>
            
        </categories>
        
        
        <tags>
            
            <tag> chrome </tag>
            
            <tag> c/c++ </tag>
            
            <tag> chromium </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Chrome扩展+NPPlugin]]></title>
      <url>/2014/04/24/chrome-extension-plugin/</url>
      <content type="html"><![CDATA[<h2 id="扩展“Chrome扩展”"><a href="#扩展“Chrome扩展”" class="headerlink" title="扩展“Chrome扩展”"></a>扩展“Chrome扩展”</h2><p>虽然基于强大的Javascript和Chrome扩展接口 （Extension API）所实现的扩展简单且强大，但是，如果你已经有一些实现的很不错的本地程序（Native Program）要通过浏览器复用怎么办？或者，浏览器的API不满足需求，你需要使用某些更强大的本地接口（Native API）时呢？</p>
<p>你可以配合Chrome扩展，实现NPAPI插件，通过Javascript与本地的二进制程序交互。</p>
<p>其实Chrome本身已经集成了一些NPAPI插件，比如PDF viewer，Flash player。</p>
<p>先简单区分一下扩展（Extension）和插件（Plguin），它们的共同点是都用于扩充增强浏览器的功能，</p>
<ul>
<li><p>扩展是基于 <strong>浏览器提供的接口</strong> ，运行在浏览器的沙箱（Sandbox）中，不与本地代码交互，安全性可控，也意味着可扩展的功能有限。</p>
</li>
<li><p>插件是基于与浏览器交互的框架（chrome用的是Mozilla的NPAPI框架），实现方式为本地二进制代码，插件其实就是能通过框架与浏览器通信的 <strong>本地程序</strong> 。它可以不运行在沙箱中，所以权限很大，实现不好很容易造成浏览器的漏洞。</p>
</li>
</ul>
<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>
<h2 id="实现NPAPI插件"><a href="#实现NPAPI插件" class="headerlink" title="实现NPAPI插件"></a>实现NPAPI插件</h2><h3 id="创建动态库（DLL）项目"><a href="#创建动态库（DLL）项目" class="headerlink" title="创建动态库（DLL）项目"></a>创建动态库（DLL）项目</h3><ol>
<li><p>创建空项目<br>本文通过VS2010创建，首选新建Win32|Win32 Project, 然后在创建向导中选择DLL, empty project。</p>
</li>
<li><p>复制示例代码<br>将示例包（文章附件）以下文件复制到项目中：</p>
<pre><code>common/*
include/*
lib/*
Plugin.cpp
Plugin.h
PluginObject.cpp
PluginObject.h
</code></pre></li>
</ol>
<h3 id="配置项目（Project）属性"><a href="#配置项目（Project）属性" class="headerlink" title="配置项目（Project）属性"></a>配置项目（Project）属性</h3><ol>
<li><p>修改输出的动态库名<br>修改Configuration Properties | General | Target Name，注意Mozilla规范要求，插件 <strong>必须以“np”开头</strong> 。</p>
</li>
<li><p>添加Include目录<br>在Configuration Properties | C/C++ | General | Additional Include Directories添加自定义目录include。</p>
</li>
<li><p>添加第三方库<br>这里要和前端JS交互，所以添加C++的第三方<a href="http://jsoncpp.sourceforge.net/" target="_blank" rel="noopener">JSON库</a>，<br>在Configuration Properties | Linker | General | Additional Library Directories添加链接库目录lib。<br>然后在Configuration Properties | Linker | Input | Additional Dependencies里添加库文件lib_json.lib。</p>
</li>
<li><p>添加宏定义（Preprocessor）<br>在Configuration Properties | C/C++ | Preprocessor Definitions添加宏 <strong>WIN32;_WINDOWS;XP_WIN32;XP_WIN;<em>X86</em>;</strong>。</p>
</li>
<li><p>禁止预编译头（Precompiled header)<br>Configuration Properties | C/C++ | Precompiled Header为“Not Using Precompiled Headers”。</p>
</li>
<li><p>添加.def文件<br>在Configuration Properties | Linker | Input | Module Definition File中添加NPHello.def。</p>
</li>
<li><p>修改Runtime Library<br>这一步比较关键,在发布插件时去除debug符号，以“ <strong>/MT</strong> ”方式编译，不然在某些系统会遇到缺少运行时库的问题。<br>Configuration Properties | C/C++ | Code Generation | Runtime Library设置为/MT。</p>
</li>
</ol>
<h3 id="实现插件"><a href="#实现插件" class="headerlink" title="实现插件"></a>实现插件</h3><ol>
<li><p>新建.def文件<br>在项目中新建NPHello.def：  </p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LIBRARY	<span class="string">"nphello"</span>		</span><br><span class="line">EXPORTS</span><br><span class="line">	NP_GetEntryPoints     @<span class="number">1</span></span><br><span class="line">	NP_Initialize         @<span class="number">2</span></span><br><span class="line">	NP_Shutdown           @<span class="number">3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改mimetype<br>npp_gate.cpp：</p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">NPP_GetMIMEDescription</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"application/x-hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> NPHello.rc：</p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">BEGIN</span><br><span class="line">       VALUE <span class="string">"CompanyName"</span>, <span class="string">"XB"</span></span><br><span class="line">       VALUE <span class="string">"FileDescription"</span>, <span class="string">"XB Hello Module"</span></span><br><span class="line">       VALUE <span class="string">"FileVersion"</span>, <span class="string">"1, 0, 0, 1"</span></span><br><span class="line">       VALUE <span class="string">"InternalName"</span>, <span class="string">"nphello.dll"</span></span><br><span class="line">       VALUE <span class="string">"LegalCopyright"</span>, <span class="string">"Copyright (C) 2013"</span></span><br><span class="line">       VALUE <span class="string">"MIMEType"</span>, <span class="string">"application/x-hello"</span></span><br><span class="line">       VALUE <span class="string">"OriginalFilename"</span>, <span class="string">"nphello.dll"</span></span><br><span class="line">       VALUE <span class="string">"ProductName"</span>, <span class="string">"NPHello"</span></span><br><span class="line">       VALUE <span class="string">"ProductVersion"</span>, <span class="string">"1, 0, 0, 1"</span></span><br><span class="line">   END</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除NPP_GetJavaClass<br>np_entry.cpp</p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NPNFuncs.getJavaEnv              = <span class="literal">NULL</span>;</span><br><span class="line">NPNFuncs.getJavaPeer             = <span class="literal">NULL</span>;</span><br><span class="line">...</span><br><span class="line">pluginFuncs-&gt;javaClass  = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义与Javascript交互的接口<br>PluginObject.cpp</p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// define function name called by JS</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* kPluginFunction = <span class="string">"function"</span>;</span><br><span class="line"><span class="comment">// define property name set by JS</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* kPluginCallback = <span class="string">"callback"</span>;</span><br></pre></td></tr></table></figure>
<p> 接口1：用于JS查询Plugin对象是否有该方法：</p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> PluginObject::hasMethod(NPIdentifier methodName)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">bool</span> bRev = <span class="literal">false</span>;</span><br><span class="line">	NPUTF8 *pName = NPNFuncs.utf8fromidentifier(methodName);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(pName, kPluginFunction) ==<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>接口2：用于JS查询Plguin对象是否有该属性：

<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> PluginObject::hasProperty(NPIdentifier propertyName)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">bool</span> bRev = <span class="literal">false</span>;</span><br><span class="line">	NPUTF8 *pName = NPNFuncs.utf8fromidentifier(propertyName);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (pName!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(pName, kPluginCallback) == <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> bRev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre><ol>
<li><p>Javascript调用Plugin的入口   </p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> PluginObject::invoke(NPIdentifier methodName,</span><br><span class="line">    <span class="keyword">const</span> NPVariant* args, <span class="keyword">uint32_t</span> argCount, NPVariant* result) &#123; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span>* name = NPNFuncs.utf8fromidentifier(methodName);</span><br><span class="line">  <span class="keyword">bool</span> ret_val = <span class="literal">false</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> outString;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!name) &#123;</span><br><span class="line">    <span class="keyword">return</span> ret_val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strcmp</span>(name, kPluginFunction)==<span class="number">0</span>)&#123;</span><br><span class="line">    ret_val = <span class="literal">true</span>;</span><br><span class="line">    hThread = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, FunctionThread, <span class="keyword">this</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    outString = <span class="string">"Called plugin method from external."</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Exception handling. </span></span><br><span class="line">    outString = <span class="string">"Called an invalid method."</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">char</span>* npOutString = (<span class="keyword">char</span> *)NPNFuncs.memalloc(outString.length() + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (!npOutString)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  strcpy_s(npOutString, outString.length()+<span class="number">1</span>, outString.c_str());</span><br><span class="line">  STRINGZ_TO_NPVARIANT(npOutString, *result);</span><br><span class="line"></span><br><span class="line">  NPNFuncs.memfree(name);</span><br><span class="line">  <span class="keyword">return</span> ret_val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在新的线程中执行插件的逻辑</p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create a threed</span></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">FunctionThread</span><span class="params">(LPVOID lparam)</span></span>&#123; </span><br><span class="line">	PluginObject* pluginObj = (PluginObject*)lparam;</span><br><span class="line">  <span class="keyword">if</span> (pluginObj==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  pluginObj-&gt;PluginFunction();</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> PluginObject::PluginFunction()&#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    Sleep(<span class="number">3000</span>);</span><br><span class="line">    Json::Value root;</span><br><span class="line">    root[<span class="string">"msg"</span>] = <span class="string">"Plugin process complete with three minutes!"</span>;</span><br><span class="line">    CallJSFunction(root.toStyledString());</span><br><span class="line">  &#125; <span class="keyword">catch</span>(HRESULT hr)&#123;</span><br><span class="line">    _<span class="function">com_error <span class="title">error</span><span class="params">(hr)</span></span>;</span><br><span class="line">    std::wstring msg(error.ErrorMessage());</span><br><span class="line">    Json::Value root;</span><br><span class="line">    root[<span class="string">"msg"</span>] = utf8_encode(msg);</span><br><span class="line">    CallJSFunction(root.toStyledString());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>当插件执行完毕，回调Javascript的方法</p>
 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> PluginObject::CallJSFunction(<span class="built_in">std</span>::<span class="built_in">string</span> result)&#123;</span><br><span class="line">	<span class="keyword">int</span> iRev = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (mJSFunction != <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="comment">// 转换参数列表</span></span><br><span class="line">		NPVariant relements[<span class="number">1</span>];</span><br><span class="line">    	STRINGZ_TO_NPVARIANT(result.c_str(), relements[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 调用JS函数</span></span><br><span class="line">	    NPVariant jsResult; </span><br><span class="line">		NPN_InvokeDefault(npp, mJSFunction, relements, <span class="number">1</span>, &amp;jsResult);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (NPVARIANT_IS_STRING(jsResult))&#123;</span><br><span class="line">			NPString rString = NPVARIANT_TO_STRING(jsResult);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">char</span> revBuf[<span class="number">255</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">			<span class="built_in">memcpy</span>(revBuf, rString.UTF8Characters, rString.UTF8Length);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 释放从浏览器那获取的结果</span></span><br><span class="line">		NPN_ReleaseVariantValue(&amp;jsResult);</span><br><span class="line">	&#125;</span><br><span class="line">  	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="编译项目"><a href="#编译项目" class="headerlink" title="编译项目"></a>编译项目</h3><p>以Release方式编译</p>
<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>
<h2 id="实现一个简单的扩展"><a href="#实现一个简单的扩展" class="headerlink" title="实现一个简单的扩展"></a>实现一个简单的扩展</h2><h3 id="Manifest"><a href="#Manifest" class="headerlink" title="Manifest"></a>Manifest</h3><p>注意plugins属性，如果插件只希望被本扩展调用，那将public设置成false。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  <span class="string">"browser_action"</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"default_popup"</span>: <span class="string">"popup.html"</span>,     </span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    &#123; <span class="string">"path"</span>: <span class="string">"plugins/nphello.dll"</span>, <span class="string">"public"</span>:<span class="literal">false</span> &#125;</span><br><span class="line">  ],</span><br><span class="line">  </span><br><span class="line">  <span class="string">"permissions"</span>: [</span><br><span class="line">    <span class="string">"*://*/*"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="popup-html"><a href="#popup-html" class="headerlink" title="popup.html"></a>popup.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">id</span>=<span class="string">"pluginObj"</span> <span class="attr">type</span>=<span class="string">"application/x-hello"</span> <span class="attr">style</span>=<span class="string">"width:0;height:0;"</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/popup.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="popup-js"><a href="#popup-js" class="headerlink" title="popup.js"></a>popup.js</h3><p>先设置回调函数，再去调用插件的方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">  result = <span class="built_in">JSON</span>.parse(result);</span><br><span class="line">  print(<span class="string">'&lt;p class="npp"&gt; [ NPP ]: '</span>+ result[<span class="string">'msg'</span>]+<span class="string">'&lt;/p&gt;'</span>) </span><br><span class="line">  clearInterval(timer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  pluginObj = <span class="built_in">document</span>.getElementById(<span class="string">"pluginObj"</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> pluginObj == <span class="string">"object"</span>) &#123;</span><br><span class="line">    pluginObj.callback = callback;</span><br><span class="line">    print(<span class="string">'&lt;p class="js"&gt; [ JS ]: I\'m calling Plugin function!&lt;/p&gt;'</span>) </span><br><span class="line">    <span class="keyword">var</span> msg = pluginObj.function();</span><br><span class="line">    print(<span class="string">'&lt;p class="npp"&gt; [ NPP ]: '</span>+ msg+<span class="string">'&lt;/p&gt;'</span>) </span><br><span class="line">  &#125; </span><br><span class="line">  timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;count++; print(<span class="string">'&lt;p class="js"&gt; [ JS ]: Hey, I\'ve been waiting '</span>+<span class="number">500</span>*count+<span class="string">' ms...'</span>)&#125;, <span class="number">500</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/images/posts/extension_npp_result.jpg" alt=""></p>
<p>&nbsp;<br>&nbsp;<br>&nbsp;</p>
<p>附：<a href="https://github.com/chengxuebin/chrome_extension_npplugin" target="_blank" rel="noopener">chrome extension+npplugin</a></p>
<p>扩展阅读：<a href="https://developer.mozilla.org/en/docs/Compiling_The_npruntime_Sample_Plugin_in_Visual_Studio" target="_blank" rel="noopener">使用 VS 编译 NPAPI 插件</a></p>
]]></content>
      
        <categories>
            
            <category> c/c++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> chrome </tag>
            
            <tag> c/c++ </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
